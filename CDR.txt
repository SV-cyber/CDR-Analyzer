basic.js:
class BasicAnalysis {
    constructor() {
        this.activeTab = null;
        this.data = null;
        this.analysisType = null;
        this.deviceDetailCache = {};
        this.pendingRequests = {};
        this.requestQueue = [];
        this.isProcessingQueue = false;
        this.MAX_CONCURRENT_REQUESTS = 3;
        this.QUEUE_PROCESSING_DELAY = 500;
    }

    async init(fileId, analysisType) {
        this.activeTab = fileId;
        this.analysisType = analysisType;

        try {
            const file = await DB.getFileById(fileId);
            if (!file || !file.data) throw new Error('File data not found');
            this.data = file.data;

            switch (analysisType) {
                case 'maximum-b-party': await this.processMaximumBPartyData(); break;
                case 'max-imei': await this.processMaxIMEIData(); break;
                case 'max-imsi': await this.processMaxIMSIData(); break;
            }
            return true;
        } catch (error) {
            console.error(`Error in ${analysisType} analysis:`, error);
            DataTable.showToast(`Error processing data: ${error.message}`, 'error');
            return false;
        }
    }

    async processMaximumBPartyData() {
        const bPartyIndex = this.data[0].indexOf('B Party');
        const dateIndex = this.data[0].indexOf('Date');
        const timeIndex = this.data[0].indexOf('Time');
        const targetNoIndex = this.data[0].indexOf('Target No');
        const durationIndex = this.data[0].indexOf('Duration');
        const lrnIndex = this.data[0].indexOf('LRN');

        if (bPartyIndex === -1) throw new Error('B Party column not found');

        const bPartyStats = {};
        const mobilePattern = /^[6-9]\d{9}$/;

        // नंबर डेटा प्रोसेस करें
        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            let bParty = row[bPartyIndex];
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : '-';
            const duration = parseInt(row[durationIndex]) || 0;
            const lrn = lrnIndex !== -1 ? row[lrnIndex] : '';

            if (bParty) {
                bParty = this.formatMobileNumber(bParty);
                if (mobilePattern.test(bParty)) {
                    const date = DateFormatter.formatToStandard(row[dateIndex]) || '';
                    const time = timeIndex !== -1 ? row[timeIndex] : '';

                    if (!bPartyStats[bParty]) {
                        bPartyStats[bParty] = {
                            targetNo,
                            count: 0,
                            totalDuration: 0,
                            firstCall: { date, time },
                            lastCall: { date, time },
                            lrn: lrn
                        };
                    } else {
                        if (date && this.compareDate(date, time, bPartyStats[bParty].firstCall.date, bPartyStats[bParty].firstCall.time) < 0) {
                            bPartyStats[bParty].firstCall = { date, time };
                        }
                        if (date && this.compareDate(date, time, bPartyStats[bParty].lastCall.date, bPartyStats[bParty].lastCall.time) > 0) {
                            bPartyStats[bParty].lastCall = { date, time };
                        }
                    }
                    bPartyStats[bParty].count++;
                    bPartyStats[bParty].totalDuration += duration;
                }
            }
        }

        // सर्वर उपलब्धता चेक करें और अतिरिक्त डेटा प्राप्त करें
        const API_BASE_URL = "http://192.168.1.54:8000";
        let additionalDataAvailable = false;
        let additionalData = {};

        try {
            // यूनिक मोबाइल नंबर्स प्राप्त करें
            const uniqueBParties = Object.keys(bPartyStats).filter(num => mobilePattern.test(num));

            if (uniqueBParties.length > 0) {
                // टाइमआउट के लिए AbortController बनाएं
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 1000); // 1 सेकंड टाइमआउट

                try {
                    // सर्वर उपलब्धता चेक करें
                    const response = await fetch(`${API_BASE_URL}/mobile/${uniqueBParties.join(',')}`, {
                        method: 'GET',
                        signal: controller.signal
                    });

                    clearTimeout(timeoutId);

                    if (response.ok) {
                        const result = await response.json();
                        if (result.status === "success" && result.data) {
                            additionalDataAvailable = true;
                            additionalData = result.data;
                        }
                    }
                } catch (error) {
                    // टाइमआउट या अन्य त्रुटि - साइलेंट में जारी रखें
                    clearTimeout(timeoutId);
                }
            }
        } catch (error) {
            // कोई भी त्रुटि साइलेंटली हैंडल करें
            console.debug("Additional data fetch failed silently:", error);
        }

        // टेबल हेडर्स सेट करें
        let tableHeaders = [
            'Target No', 'B Party', 'B Party Operator & Circle', 'Maximum Calls',
            'Maximum Call Duration', 'First Call', 'Last Call'
        ];

        // अगर अतिरिक्त डेटा उपलब्ध है, तो अतिरिक्त कॉलम्स जोड़ें
        if (additionalDataAvailable) {
            tableHeaders = tableHeaders.concat(['Name', 'Address', 'Date', 'Circle', 'Operator', 'Aadhaar', 'Alternate']);
        }

        const tableData = [tableHeaders];

        // टेबल रो डेटा जोड़ें
        Object.entries(bPartyStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([bParty, stats]) => {
                const row = [
                    stats.targetNo,
                    bParty,
                    AppConstants.getOperatorCircle(stats.lrn),
                    stats.count,
                    this.formatDuration(stats.totalDuration),
                    `${stats.firstCall.date} ${stats.firstCall.time}`,
                    `${stats.lastCall.date} ${stats.lastCall.time}`
                ];

                // अगर अतिरिक्त डेटा उपलब्ध है, तो जोड़ें
                if (additionalDataAvailable) {
                    const addData = additionalData[bParty] || {};
                    row.push(
                        addData.Name || '-',
                        addData.Address || '-',
                        addData.Date || '-',
                        addData.Circle || '-',
                        addData.Operator || '-',
                        addData.Aadhaar || '-',
                        addData.Alternate || '-'
                    );
                }

                tableData.push(row);
            });

        // टेबल लोड करें
        DataTable.loadData(tableData);
    }

    async processMaxIMEIData() {
        // Get column indices
        const indices = {
            imei: this.data[0].indexOf('IMEI'),
            date: this.data[0].indexOf('Date'),
            time: this.data[0].indexOf('Time'),
            targetNo: this.data[0].indexOf('Target No'),
            bParty: this.data[0].indexOf('B Party'),
            duration: this.data[0].indexOf('Duration')
        };

        if (indices.imei === -1) throw new Error('IMEI column not found');

        // Data structure to store IMEI information
        const imeiStats = {};
        const tacsToFetch = new Set();

        // First pass: gather unique target numbers per IMEI
        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const imei = row[indices.imei];
            const targetNo = indices.targetNo !== -1 ? row[indices.targetNo] : '-';

            if (!imei || imei.length === 0) continue;

            if (!imeiStats[imei]) {
                imeiStats[imei] = {
                    targetNumbers: new Set(),
                    deviceInfo: { marketingName: 'Loading...', brandName: 'Loading...', modelName: 'Loading...' },
                    targetStats: {}
                };

                // Add TAC for API fetch
                try {
                    const tac = imei.substring(0, 8);
                    if (!this.deviceDetailCache[tac] && !this.pendingRequests[tac]) {
                        tacsToFetch.add(tac);
                    }
                } catch (err) {
                    console.error(`Error processing IMEI: ${err}`);
                }
            }

            if (targetNo) imeiStats[imei].targetNumbers.add(targetNo);
        }

        // Second pass: collect call statistics per target number
        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const imei = row[indices.imei];
            const targetNo = indices.targetNo !== -1 ? row[indices.targetNo] : '-';

            if (!imei || imei.length === 0 || !targetNo) continue;

            const date = indices.date !== -1 ? DateFormatter.formatToStandard(row[indices.date]) || '' : '';
            const time = indices.time !== -1 ? row[indices.time] : '';
            const bParty = indices.bParty !== -1 ? row[indices.bParty] : '-';
            const duration = indices.duration !== -1 ? parseInt(row[indices.duration]) || 0 : 0;

            // Initialize target stats if not exists
            if (!imeiStats[imei].targetStats[targetNo]) {
                imeiStats[imei].targetStats[targetNo] = {
                    count: 0,
                    totalDuration: 0,
                    firstCall: { date, time, bParty },
                    lastCall: { date, time, bParty }
                };
            }

            // Update statistics
            const stats = imeiStats[imei].targetStats[targetNo];
            stats.count++;
            stats.totalDuration += duration;

            // Update first call if current date/time is earlier
            if (date && this.compareDate(date, time, stats.firstCall.date, stats.firstCall.time) < 0) {
                stats.firstCall = { date, time, bParty };
            }

            // Update last call if current date/time is later
            if (date && this.compareDate(date, time, stats.lastCall.date, stats.lastCall.time) > 0) {
                stats.lastCall = { date, time, bParty };
            }
        }

        // Fetch device details
        if (tacsToFetch.size > 0) {
            this.batchFetchDeviceDetails(Array.from(tacsToFetch), imeiStats);
        }

        // Create table data
        const tableData = [
            ['Target No', 'IMEI', 'Call Count', 'Total Duration',
                'First Call Date Time', 'First Call B Party',
                'Last Call Date Time', 'Last Call B Party',
                'Marketing Name', 'Brand Name', 'Model Name']
        ];

        // Add rows to table
        Object.entries(imeiStats)
            .sort((a, b) => {
                // Sort by total call count across all targets
                const sumA = Object.values(a[1].targetStats).reduce((sum, stat) => sum + stat.count, 0);
                const sumB = Object.values(b[1].targetStats).reduce((sum, stat) => sum + stat.count, 0);
                return sumB - sumA;
            })
            .forEach(([imei, stats]) => {
                const targetNumbers = Array.from(stats.targetNumbers);

                // Format multi-line data for each column
                const targetNoStr = targetNumbers.join('<br>');
                const callCounts = targetNumbers.map(target =>
                    stats.targetStats[target]?.count || 0).join('<br>');
                const totalDurations = targetNumbers.map(target =>
                    this.formatDuration(stats.targetStats[target]?.totalDuration || 0)).join('<br>');
                const firstCallDateTimes = targetNumbers.map(target =>
                    stats.targetStats[target] ?
                        `${stats.targetStats[target].firstCall.date} ${stats.targetStats[target].firstCall.time}` : '-'
                ).join('<br>');
                const firstCallBParties = targetNumbers.map(target =>
                    stats.targetStats[target]?.firstCall.bParty || '-').join('<br>');
                const lastCallDateTimes = targetNumbers.map(target =>
                    stats.targetStats[target] ?
                        `${stats.targetStats[target].lastCall.date} ${stats.targetStats[target].lastCall.time}` : '-'
                ).join('<br>');
                const lastCallBParties = targetNumbers.map(target =>
                    stats.targetStats[target]?.lastCall.bParty || '-').join('<br>');

                // Add row
                tableData.push([
                    targetNoStr, imei, callCounts, totalDurations,
                    firstCallDateTimes, firstCallBParties,
                    lastCallDateTimes, lastCallBParties,
                    stats.deviceInfo.marketingName,
                    stats.deviceInfo.brandName,
                    stats.deviceInfo.modelName
                ]);
            });

        DataTable.loadData(tableData);
        setTimeout(() => this.formatTargetNumberCells(), 200);
        setTimeout(() => this.updateTableWithCachedDeviceDetails(imeiStats), 300);
    }

    async processMaxIMSIData() {
        const imsiIndex = this.data[0].indexOf('IMSI');
        const dateIndex = this.data[0].indexOf('Date');
        const timeIndex = this.data[0].indexOf('Time');
        const targetNoIndex = this.data[0].indexOf('Target No');

        if (imsiIndex === -1) throw new Error('IMSI column not found');

        const imsiStats = {};

        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const imsi = row[imsiIndex];
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : '-';

            if (imsi && imsi.length > 0) {
                if (!imsiStats[imsi]) {
                    imsiStats[imsi] = {
                        count: 0,
                        firstDate: DateFormatter.formatToStandard(row[dateIndex]) || '',
                        lastDate: '',
                        targetNumbers: new Set()
                    };
                }

                imsiStats[imsi].count++;
                if (targetNo) imsiStats[imsi].targetNumbers.add(targetNo);

                if (dateIndex !== -1) {
                    const currentDate = DateFormatter.formatToStandard(row[dateIndex]) || '';
                    if (!imsiStats[imsi].lastDate || currentDate > imsiStats[imsi].lastDate) {
                        imsiStats[imsi].lastDate = currentDate;
                    }
                }
            }
        }

        const tableData = [
            ['Target No', 'IMSI', 'Count', 'First Usage', 'Last Usage']
        ];

        Object.entries(imsiStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([imsi, stats]) => {
                tableData.push([
                    Array.from(stats.targetNumbers).join('<br>') || '-',
                    imsi,
                    stats.count,
                    stats.firstDate,
                    stats.lastDate
                ]);
            });

        DataTable.loadData(tableData);
        setTimeout(() => this.formatTargetNumberCells(), 500);
    }

    // Batch processing of device details
    async batchFetchDeviceDetails(tacs, imeiStats) {
        console.log(`Fetching details for ${tacs.length} TACs`);
        for (const tac of tacs) {
            this.queueDeviceDetailRequest(tac, imeiStats);
        }
    }

    queueDeviceDetailRequest(tac, imeiStats) {
        this.requestQueue.push({ tac, imeiStats });
        if (!this.isProcessingQueue) this.processQueue();
    }

    async processQueue() {
        if (this.requestQueue.length === 0) {
            this.isProcessingQueue = false;
            return;
        }

        this.isProcessingQueue = true;
        const batch = this.requestQueue.splice(0, this.MAX_CONCURRENT_REQUESTS);
        const promises = batch.map(item => this.processDeviceDetailRequest(item.tac, item.imeiStats));

        await Promise.allSettled(promises);
        setTimeout(() => this.processQueue(), this.QUEUE_PROCESSING_DELAY);
    }

    async processDeviceDetailRequest(tac, imeiStats) {
        if (this.deviceDetailCache[tac] || this.pendingRequests[tac]) {
            return this.deviceDetailCache[tac] || null;
        }

        this.pendingRequests[tac] = true;
        try {
            const deviceDetail = await this.getDeviceDetail(tac);
            this.updateImeiStatsWithDetail(tac, deviceDetail, imeiStats);
            this.updateDeviceDetailsInTable(tac, deviceDetail);
            return deviceDetail;
        } catch (error) {
            console.error(`Error processing device detail request for TAC ${tac}:`, error);
            return null;
        } finally {
            delete this.pendingRequests[tac];
        }
    }

    updateImeiStatsWithDetail(tac, deviceDetail, imeiStats) {
        if (!deviceDetail) return;

        Object.entries(imeiStats).forEach(([imei, stats]) => {
            if (imei.startsWith(tac)) {
                stats.deviceInfo.marketingName = deviceDetail.marketingName;
                stats.deviceInfo.brandName = deviceDetail.brandName;
                stats.deviceInfo.modelName = deviceDetail.modelName;
            }
        });
    }

    updateDeviceDetailsInTable(tac, deviceDetail) {
        if (!deviceDetail) return;

        try {
            const tableBody = document.getElementById('table-body');
            if (!tableBody) return;

            tableBody.querySelectorAll('tr').forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length < 11) return;

                const imei = cells[1].textContent.trim();
                if (imei.startsWith(tac)) {
                    // Update Marketing Name (index 8), Brand Name (9), Model Name (10)
                    cells[8].textContent = deviceDetail.marketingName;
                    cells[9].textContent = deviceDetail.brandName;
                    cells[10].textContent = deviceDetail.modelName;
                    this.makeMarketingNameClickable(cells[8], deviceDetail.marketingName);
                }
            });
        } catch (error) {
            console.error(`Error updating table with device details:`, error);
        }
    }

    updateTableWithCachedDeviceDetails(imeiStats) {
        try {
            const tableBody = document.getElementById('table-body');
            if (!tableBody) return;

            tableBody.querySelectorAll('tr').forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length < 11) return;

                const imei = cells[1].textContent.trim();
                if (imei && imei.length >= 8) {
                    const tac = imei.substring(0, 8);
                    const cachedDetail = this.deviceDetailCache[tac];

                    if (cachedDetail) {
                        cells[8].textContent = cachedDetail.marketingName;
                        cells[9].textContent = cachedDetail.brandName;
                        cells[10].textContent = cachedDetail.modelName;
                        this.makeMarketingNameClickable(cells[8], cachedDetail.marketingName);
                    }
                }
            });

            setTimeout(() => this.attachMarketingNameClickHandlers(), 100);
        } catch (error) {
            console.error(`Error updating table with cached device details:`, error);
        }
    }

    // API call to get device details
    async getDeviceDetail(tac) {
        if (this.deviceDetailCache[tac]) return this.deviceDetailCache[tac];

        try {
            console.log(`Fetching device details for TAC: ${tac}`);
            const response = await fetch(`https://investigationcamp.com/imei_lookup/fetch_device.php?tac=${tac}`);

            if (!response.ok) throw new Error(`API returned status: ${response.status}`);

            const result = await response.json();
            const deviceDetail = result.status === "success" && result.data ?
                {
                    marketingName: result.data.marketname || 'Unknown',
                    brandName: result.data.brandname || 'Unknown',
                    modelName: result.data.modelname || 'Unknown'
                } : {
                    marketingName: 'Unknown',
                    brandName: 'Unknown',
                    modelName: 'Unknown'
                };

            this.deviceDetailCache[tac] = deviceDetail;
            return deviceDetail;
        } catch (error) {
            console.error(`Error fetching device detail: ${error}`);
            this.deviceDetailCache[tac] = { marketingName: 'Error', brandName: 'Error', modelName: 'Error' };
            return this.deviceDetailCache[tac];
        }
    }

    // Helper functions
    formatMobileNumber(number) {
        number = number.replace(/\D/g, '');
        if (number.startsWith('91')) number = number.slice(2);
        else if (number.startsWith('0')) number = number.slice(1);
        return number;
    }

    compareDate(date1, time1, date2, time2) {
        const formattedDate1 = DateFormatter.formatToStandard(date1);
        const formattedDate2 = DateFormatter.formatToStandard(date2);

        if (!formattedDate1 || !formattedDate2) return 0;

        const [day1, month1, year1] = formattedDate1.split('/').map(Number);
        const [day2, month2, year2] = formattedDate2.split('/').map(Number);

        // Compare years, then months, then days
        if (year1 !== year2) return year1 - year2;
        if (month1 !== month2) return month1 - month2;
        if (day1 !== day2) return day1 - day2;

        // Compare times if dates are the same
        return time1 < time2 ? -1 : (time1 > time2 ? 1 : 0);
    }

    formatDuration(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = seconds % 60;

        return [
            hours.toString().padStart(2, '0'),
            minutes.toString().padStart(2, '0'),
            remainingSeconds.toString().padStart(2, '0')
        ].join(':');
    }

    makeMarketingNameClickable(cell, marketingName) {
        if (!cell || !marketingName || ['Loading...', 'Unknown', 'Error'].includes(marketingName)) return;

        cell.style.color = '#007bff';
        cell.style.textDecoration = 'underline';
        cell.style.cursor = 'pointer';

        const newCell = cell.cloneNode(true);
        newCell.textContent = marketingName;

        newCell.addEventListener('click', (e) => {
            e.stopPropagation();
            window.open(`https://www.google.com/search?q=${encodeURIComponent(marketingName)}`, '_blank');
        });

        cell.parentNode.replaceChild(newCell, cell);
    }

    attachMarketingNameClickHandlers() {
        try {
            const tableBody = document.getElementById('table-body');
            if (!tableBody) return;

            tableBody.querySelectorAll('tr').forEach(row => {
                const cells = row.querySelectorAll('td');
                if (cells.length >= 11) {
                    // Only marketing name (column 8) should be clickable
                    const marketingNameCell = cells[8];
                    const marketingName = marketingNameCell.textContent.trim();
                    if (marketingName && marketingName !== 'Loading...') {
                        this.makeMarketingNameClickable(marketingNameCell, marketingName);
                    }
                }
            });
        } catch (error) {
            console.error("Error attaching click handlers:", error);
        }
    }

    formatTargetNumberCells() {
        try {
            const tableBody = document.getElementById('table-body');
            if (!tableBody) return;

            tableBody.querySelectorAll('tr td').forEach(cell => {
                if (cell.textContent.includes('<br>')) {
                    cell.innerHTML = cell.textContent.replace(/<br>/g, '<br>');
                }
            });
        } catch (error) {
            console.error("Error formatting cells:", error);
        }
    }

    cleanup() {
        this.activeTab = null;
        this.data = null;
        this.analysisType = null;
    }
}

// Create a global instance
window.basicAnalysis = new BasicAnalysis();

common.js:


// common.js - Common B Party and IMEI analysis
class CommonAnalysis {
  constructor() {
    this.fileIds = [];
    this.fileData = {};
    this.analysisType = null;
  }

  /**
   * Initialize common analysis with file data
   * @param {Array<number>} fileIds - IDs of the files to analyze
   * @param {string} analysisType - Type of analysis to perform
   * @returns {Promise<boolean>} - Success/failure
   */
  async init(fileIds, analysisType) {
    this.fileIds = fileIds;
    this.analysisType = analysisType;
    this.fileData = {};

    try {
      // Load data for all files
      for (const fileId of fileIds) {
        const file = await DB.getFileById(fileId);
        if (file && file.data) {
          this.fileData[fileId] = {
            data: file.data,
            displayName: file.displayName || `File ${fileId}`
          };
        }
      }

      if (Object.keys(this.fileData).length === 0) {
        throw new Error('No valid file data found');
      }

      // Process data based on analysis type
      if (analysisType === 'common-b-party') {
        await this.processCommonBParty();
      } else if (analysisType === 'common-imei') {
        await this.processCommonIMEI();
      }

      return true;
    } catch (error) {
      console.error(`Error in ${analysisType} analysis:`, error);
      DataTable.showToast(`Error: ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * Process common B Party analysis
   */
  async processCommonBParty() {
    // Map to store B Party occurrences
    const bPartyOccurrences = {};
    const mobilePattern = /^[6-9]\d{9}$/; // Pattern for 10-digit mobile numbers

    // Process each file
    for (const [fileId, { data, displayName }] of Object.entries(this.fileData)) {
      const bPartyIndex = data[0].indexOf('B Party');

      if (bPartyIndex === -1) continue;

      // Process B Party numbers
      for (let i = 1; i < data.length; i++) {
        let bParty = data[i][bPartyIndex];

        if (bParty) {
          // Clean and format number
          bParty = bParty.replace(/\D/g, '');

          if (bParty.startsWith('91') && bParty.length === 12) {
            bParty = bParty.slice(2);
          } else if (bParty.startsWith('0') && bParty.length === 11) {
            bParty = bParty.slice(1);
          }

          // Only include 10-digit mobile numbers
          if (mobilePattern.test(bParty)) {
            if (!bPartyOccurrences[bParty]) {
              bPartyOccurrences[bParty] = new Set();
            }
            bPartyOccurrences[bParty].add(fileId);
          }
        }
      }
    }

    // Filter for B Parties that occur in multiple files
    const commonBParties = Object.entries(bPartyOccurrences)
      .filter(([_, fileIds]) => fileIds.size > 1)
      .map(([bParty, fileIds]) => ({
        bParty,
        fileIds: Array.from(fileIds),
        count: fileIds.size
      }))
      .sort((a, b) => b.count - a.count);

    // Create table data
    const tableData = [['B Party', 'Found In Files', 'Count']];

    commonBParties.forEach(({ bParty, fileIds, count }) => {
      const fileNames = fileIds.map(id => this.fileData[id].displayName).join('<br>'); // Use <br> for new lines
      tableData.push([bParty, fileNames, count]);
    });

    // Load table data
    DataTable.loadData(tableData);
  }

  /**
   * Process common IMEI analysis
   */
  async processCommonIMEI() {
    // Map to store IMEI occurrences
    const imeiOccurrences = {};

    // Process each file
    for (const [fileId, { data, displayName }] of Object.entries(this.fileData)) {
      const imeiIndex = data[0].indexOf('IMEI');
      const targetNoIndex = data[0].indexOf('Target No');

      if (imeiIndex === -1) continue;

      // Process IMEI numbers
      for (let i = 1; i < data.length; i++) {
        const imei = data[i][imeiIndex];
        const targetNo = targetNoIndex !== -1 ? data[i][targetNoIndex] : 'Unknown';

        if (imei && imei.length >= 14 && imei.length <= 16) { // Valid IMEI length check
          if (!imeiOccurrences[imei]) {
            imeiOccurrences[imei] = {
              files: new Set(),
              targetNumbers: new Set()
            };
          }
          imeiOccurrences[imei].files.add(fileId);
          if (targetNo) {
            imeiOccurrences[imei].targetNumbers.add(targetNo);
          }
        }
      }
    }

    // Filter for IMEIs that occur in multiple files or have multiple Target Nos
    const commonIMEIs = Object.entries(imeiOccurrences)
      .filter(([_, data]) => data.files.size > 1 || data.targetNumbers.size > 1)
      .map(([imei, data]) => ({
        imei,
        fileIds: Array.from(data.files),
        targetNumbers: Array.from(data.targetNumbers),
        fileCount: data.files.size,
        targetCount: data.targetNumbers.size
      }))
      .sort((a, b) => b.fileCount - a.fileCount);

    // Create table data
    const tableData = [['IMEI', 'Target Nos', 'Found In Files', 'Files Count']];

    commonIMEIs.forEach(({ imei, fileIds, targetNumbers, fileCount }) => {
      const fileNames = fileIds.map(id => this.fileData[id].displayName).join('<br>');
      tableData.push([imei, targetNumbers.join('<br>'), fileNames, fileCount]);
    });

    // Load table
    DataTable.loadData(tableData);
  }

  /**
   * Clean up resources and reset state
   */
  cleanup() {
    // Reset state
    this.fileIds = [];
    this.fileData = {};
    this.analysisType = null;

    // Remove any existing filter container
    const filterContainer = document.querySelector('.filter-container');
    if (filterContainer) {
      filterContainer.remove();
    }
  }
}

const commonAnalysis = new CommonAnalysis();

location.js:
// location.js - Call Location analysis
class LocationAnalysis {
    constructor() {
        this.activeTab = null;
        this.data = null;
    }

    async init(fileId) {
        this.activeTab = fileId;

        try {
            const file = await DB.getFileById(fileId);
            if (!file || !file.data) {
                throw new Error('File data not found');
            }

            this.data = file.data;
            await this.processLocationData();
            return true;
        } catch (error) {
            console.error('Error in location analysis:', error);
            DataTable.showToast(`Error: ${error.message}`, 'error');
            return false;
        }
    }

    async processLocationData() {
        // पहले Target No और अन्य कॉलम इंडेक्स को खोजें
        const targetNoIndex = this.data[0].indexOf('Target No');
        const dateIndex = this.data[0].indexOf('Date');
        const timeIndex = this.data[0].indexOf('Time');
        const cellIdIndex = this.data[0].indexOf('First Cell ID');
        const bPartyIndex = this.data[0].indexOf('B Party');
        const durationIndex = this.data[0].indexOf('Duration');

        if (cellIdIndex === -1) throw new Error('Cell ID column not found');

        const locationStats = {};

        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const cellId = row[cellIdIndex];
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const time = timeIndex !== -1 ? row[timeIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            // Target No को सही कॉलम से लें
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const duration = durationIndex !== -1 ? this.parseDuration(row[durationIndex]) : 0;

            if (cellId && date && time) {
                const currentDateTime = `${date} ${time}`;

                if (!locationStats[cellId]) {
                    locationStats[cellId] = {
                        targetNo: targetNo,
                        targetNumbers: new Set([targetNo]), // Initialize with current targetNo
                        callCount: 0,
                        totalDuration: 0,
                        firstCall: {
                            dateTime: currentDateTime,
                            bParty: bParty
                        },
                        lastCall: {
                            dateTime: currentDateTime,
                            bParty: bParty
                        }
                    };
                } else {
                    // Add targetNo to the set instead of bParty
                    locationStats[cellId].targetNumbers.add(targetNo);
                }

                locationStats[cellId].callCount++;
                locationStats[cellId].totalDuration += duration;

                // Compare dates properly
                const currentTimestamp = new Date(date.split('/').reverse().join('-') + 'T' + time).getTime();
                const firstCallTimestamp = new Date(locationStats[cellId].firstCall.dateTime.split(' ')[0].split('/').reverse().join('-') + 'T' + locationStats[cellId].firstCall.dateTime.split(' ')[1]).getTime();
                const lastCallTimestamp = new Date(locationStats[cellId].lastCall.dateTime.split(' ')[0].split('/').reverse().join('-') + 'T' + locationStats[cellId].lastCall.dateTime.split(' ')[1]).getTime();

                if (currentTimestamp < firstCallTimestamp) {
                    locationStats[cellId].firstCall = {
                        dateTime: currentDateTime,
                        bParty: bParty
                    };
                }

                if (currentTimestamp > lastCallTimestamp) {
                    locationStats[cellId].lastCall = {
                        dateTime: currentDateTime,
                        bParty: bParty
                    };
                }
            }
        }

        // Create table data with Target No as first column
        const tableData = [
            [
                'Target No',
                'Cell ID',
                'Call Count',
                'Total Duration',
                'First Call Date Time',
                'First Call B Party',
                'Last Call Date Time',
                'Last Call B Party'
            ]
        ];

        Object.entries(locationStats)
            .sort((a, b) => b[1].callCount - a[1].callCount)
            .forEach(([cellId, stats]) => {
                tableData.push([
                    Array.from(stats.targetNumbers).join(', '), // Use targetNumbers instead of B Party numbers
                    cellId,
                    stats.callCount,
                    this.formatDuration(stats.totalDuration),
                    stats.firstCall.dateTime,
                    stats.firstCall.bParty,
                    stats.lastCall.dateTime,
                    stats.lastCall.bParty
                ]);
            });

        // Load table with the processed data
        DataTable.loadData(tableData);
    }

    compareDateTime(dateTime1, dateTime2) {
        const timestamp1 = new Date(dateTime1).getTime();
        const timestamp2 = new Date(dateTime2).getTime();
        return timestamp1 - timestamp2;
    }

    parseDuration(durationStr) {
        if (!durationStr) return 0;

        // Handle different duration formats
        // Format 1: "HH:MM:SS"
        const timeMatch = durationStr.match(/(\d+):(\d+):(\d+)/);
        if (timeMatch) {
            const [_, hours, minutes, seconds] = timeMatch;
            return (parseInt(hours) * 3600) + (parseInt(minutes) * 60) + parseInt(seconds);
        }

        // Format 2: Simple seconds
        const seconds = parseInt(durationStr);
        return isNaN(seconds) ? 0 : seconds;
    }

    formatDuration(totalSeconds) {
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    cleanup() {
        this.activeTab = null;
        this.data = null;
    }
}

const locationAnalysis = new LocationAnalysis();

max-stay.js:
// max-stay.js - Day and Night Stay analysis

class DayStayAnalysis {
    constructor() {
        this.activeTab = null;
        this.data = null;
    }

    async init(fileId) {
        this.activeTab = fileId;

        try {
            const file = await DB.getFileById(fileId);
            if (!file || !file.data) {
                throw new Error('File data not found');
            }

            this.data = file.data;
            await this.processStayData();
            
            // Add post-processing to make coordinates clickable
            this.makeCoordinatesClickable();
            
            return true;
        } catch (error) {
            console.error('Error in day stay analysis:', error);
            DataTable.showToast(`Error: ${error.message}`, 'error');
            return false;
        }
    }

    async processStayData() {
        // Get column indices
        const targetNoIndex = this.data[0].indexOf('Target No');
        const dateIndex = this.data[0].indexOf('Date');
        const timeIndex = this.data[0].indexOf('Time');
        const cellIdIndex = this.data[0].indexOf('First Cell ID');
        const cellIdAddressIndex = this.data[0].indexOf('First Cell ID Address');
        const bPartyIndex = this.data[0].indexOf('B Party');
        const durationIndex = this.data[0].indexOf('Duration');

        if (cellIdAddressIndex === -1) throw new Error('Cell ID Address column not found');
        if (timeIndex === -1) throw new Error('Time column not found');

        const stayStats = {};

        // Process each row
        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const time = row[timeIndex];
            
            // Skip if time is not in the desired range (day: 06:00-18:00)
            if (!this.isTimeInRange(time)) continue;
            
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const cellId = cellIdIndex !== -1 ? row[cellIdIndex] : '';
            const cellIdAddress = cellIdAddressIndex !== -1 ? row[cellIdAddressIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            const duration = durationIndex !== -1 ? this.parseDuration(row[durationIndex]) : 0;

            if (cellId && date && time) {
                if (!stayStats[cellId]) {
                    stayStats[cellId] = {
                        targetNo: targetNo,
                        cellIdAddress: cellIdAddress,
                        count: 0,
                        totalDuration: 0,
                        firstCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        },
                        lastCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        }
                    };
                }

                stayStats[cellId].count++;
                stayStats[cellId].totalDuration += duration;

                // Compare dates for first and last call
                const currentTimestamp = new Date(`${date.split('/').reverse().join('-')}T${time}`).getTime();
                const firstCallTimestamp = new Date(`${stayStats[cellId].firstCall.date.split('/').reverse().join('-')}T${stayStats[cellId].firstCall.time}`).getTime();
                const lastCallTimestamp = new Date(`${stayStats[cellId].lastCall.date.split('/').reverse().join('-')}T${stayStats[cellId].lastCall.time}`).getTime();

                if (currentTimestamp < firstCallTimestamp) {
                    stayStats[cellId].firstCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }

                if (currentTimestamp > lastCallTimestamp) {
                    stayStats[cellId].lastCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }
            }
        }

        // Create table data with required columns - DO NOT USE HTML, use plain text
        const tableData = [
            [
                'Target',
                'First Cell ID',
                'First Cell ID Address',
                'Total Count Cell ID',
                'Total Duration of calls',
                'First Date',
                'First Time',
                'First B Party',
                'Last Date',
                'Last Time',
                'Last B Party'
            ]
        ];

        Object.entries(stayStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([cellId, stats]) => {
                // Format coordinates for display - keep as original format
                let cellIdAddress = stats.cellIdAddress;
                
                // Store original format in the table
                tableData.push([
                    stats.targetNo,
                    cellId,
                    cellIdAddress, // Use original format
                    stats.count,
                    this.formatDuration(stats.totalDuration),
                    stats.firstCall.date,
                    stats.firstCall.time,
                    stats.firstCall.bParty,
                    stats.lastCall.date,
                    stats.lastCall.time,
                    stats.lastCall.bParty
                ]);
            });

        // Load table with the processed data
        DataTable.loadData(tableData);
    }
    
    // New method to make coordinates clickable after table rendering
    makeCoordinatesClickable() {
        setTimeout(() => {
            // Find all cells in the First Cell ID Address column (column index 2)
            const cells = document.querySelectorAll('#table-body tr td:nth-child(3)');
            
            cells.forEach(cell => {
                const text = cell.textContent;
                // Check for lat/long format (28.58099/77.4395)
                const coordMatch = text.match(/(\d+\.\d+)\/(\d+\.\d+)/);
                
                if (coordMatch) {
                    const [_, lat, lng] = coordMatch;
                    const formattedCoords = `${lat}, ${lng}`;
                    
                    // Clear the cell
                    cell.innerHTML = '';
                    
                    // Create a new button element
                    const btn = document.createElement('button');
                    btn.textContent = formattedCoords;
                    btn.style.background = 'none';
                    btn.style.border = 'none';
                    btn.style.color = 'blue';
                    btn.style.textDecoration = 'underline';
                    btn.style.cursor = 'pointer';
                    btn.style.padding = '0';
                    btn.style.font = 'inherit';
                    
                    // Add click event
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation(); // Prevent row selection
                        window.open(`https://www.google.com/maps?q=${lat},${lng}`, '_blank');
                    });
                    
                    // Add button to cell
                    cell.appendChild(btn);
                }
            });
        }, 200); // Give table time to render
    }

    isTimeInRange(time) {
        // Day: 6:00 (360 minutes) to 18:00 (1080 minutes)
        const [hours, minutes] = time.split(':').map(Number);
        const totalMinutes = hours * 60 + (minutes || 0);
        return totalMinutes >= 360 && totalMinutes < 1080;
    }

    parseDuration(durationStr) {
        if (!durationStr) return 0;

        // Handle different duration formats
        // Format 1: "HH:MM:SS"
        const timeMatch = durationStr.match(/(\d+):(\d+):(\d+)/);
        if (timeMatch) {
            const [_, hours, minutes, seconds] = timeMatch;
            return (parseInt(hours) * 3600) + (parseInt(minutes) * 60) + parseInt(seconds);
        }

        // Format 2: Simple seconds
        const seconds = parseInt(durationStr);
        return isNaN(seconds) ? 0 : seconds;
    }

    formatDuration(totalSeconds) {
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    cleanup() {
        this.activeTab = null;
        this.data = null;
    }
}

class NightStayAnalysis {
    constructor() {
        this.activeTab = null;
        this.data = null;
    }

    async init(fileId) {
        this.activeTab = fileId;

        try {
            const file = await DB.getFileById(fileId);
            if (!file || !file.data) {
                throw new Error('File data not found');
            }

            this.data = file.data;
            await this.processStayData();
            
            // Add post-processing to make coordinates clickable
            this.makeCoordinatesClickable();
            
            return true;
        } catch (error) {
            console.error('Error in night stay analysis:', error);
            DataTable.showToast(`Error: ${error.message}`, 'error');
            return false;
        }
    }

    async processStayData() {
        // Get column indices
        const targetNoIndex = this.data[0].indexOf('Target No');
        const dateIndex = this.data[0].indexOf('Date');
        const timeIndex = this.data[0].indexOf('Time');
        const cellIdIndex = this.data[0].indexOf('First Cell ID');
        const cellIdAddressIndex = this.data[0].indexOf('First Cell ID Address');
        const bPartyIndex = this.data[0].indexOf('B Party');
        const durationIndex = this.data[0].indexOf('Duration');

        if (cellIdAddressIndex === -1) throw new Error('Cell ID Address column not found');
        if (timeIndex === -1) throw new Error('Time column not found');

        const stayStats = {};

        // Process each row
        for (let i = 1; i < this.data.length; i++) {
            const row = this.data[i];
            const time = row[timeIndex];
            
            // Skip if time is not in the desired range (night: 18:00-06:00)
            if (!this.isTimeInRange(time)) continue;
            
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const cellId = cellIdIndex !== -1 ? row[cellIdIndex] : '';
            const cellIdAddress = cellIdAddressIndex !== -1 ? row[cellIdAddressIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            const duration = durationIndex !== -1 ? this.parseDuration(row[durationIndex]) : 0;

            if (cellId && date && time) {
                if (!stayStats[cellId]) {
                    stayStats[cellId] = {
                        targetNo: targetNo,
                        cellIdAddress: cellIdAddress,
                        count: 0,
                        totalDuration: 0,
                        firstCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        },
                        lastCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        }
                    };
                }

                stayStats[cellId].count++;
                stayStats[cellId].totalDuration += duration;

                // Compare dates for first and last call
                const currentTimestamp = new Date(`${date.split('/').reverse().join('-')}T${time}`).getTime();
                const firstCallTimestamp = new Date(`${stayStats[cellId].firstCall.date.split('/').reverse().join('-')}T${stayStats[cellId].firstCall.time}`).getTime();
                const lastCallTimestamp = new Date(`${stayStats[cellId].lastCall.date.split('/').reverse().join('-')}T${stayStats[cellId].lastCall.time}`).getTime();

                if (currentTimestamp < firstCallTimestamp) {
                    stayStats[cellId].firstCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }

                if (currentTimestamp > lastCallTimestamp) {
                    stayStats[cellId].lastCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }
            }
        }

        // Create table data with required columns - DO NOT USE HTML, use plain text
        const tableData = [
            [
                'Target',
                'First Cell ID',
                'First Cell ID Address',
                'Total Count Cell ID',
                'Total Duration of calls',
                'First Date',
                'First Time',
                'First B Party',
                'Last Date',
                'Last Time',
                'Last B Party'
            ]
        ];

        Object.entries(stayStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([cellId, stats]) => {
                // Keep original format
                let cellIdAddress = stats.cellIdAddress;
                
                tableData.push([
                    stats.targetNo,
                    cellId,
                    cellIdAddress, // Use original format
                    stats.count,
                    this.formatDuration(stats.totalDuration),
                    stats.firstCall.date,
                    stats.firstCall.time,
                    stats.firstCall.bParty,
                    stats.lastCall.date,
                    stats.lastCall.time,
                    stats.lastCall.bParty
                ]);
            });

        // Load table with the processed data
        DataTable.loadData(tableData);
    }
    
    // New method to make coordinates clickable after table rendering
    makeCoordinatesClickable() {
        setTimeout(() => {
            // Find all cells in the First Cell ID Address column (column index 2)
            const cells = document.querySelectorAll('#table-body tr td:nth-child(3)');
            
            cells.forEach(cell => {
                const text = cell.textContent;
                // Check for lat/long format (28.58099/77.4395)
                const coordMatch = text.match(/(\d+\.\d+)\/(\d+\.\d+)/);
                
                if (coordMatch) {
                    const [_, lat, lng] = coordMatch;
                    const formattedCoords = `${lat}, ${lng}`;
                    
                    // Clear the cell
                    cell.innerHTML = '';
                    
                    // Create a new button element
                    const btn = document.createElement('button');
                    btn.textContent = formattedCoords;
                    btn.style.background = 'none';
                    btn.style.border = 'none';
                    btn.style.color = 'blue';
                    btn.style.textDecoration = 'underline';
                    btn.style.cursor = 'pointer';
                    btn.style.padding = '0';
                    btn.style.font = 'inherit';
                    
                    // Add click event
                    btn.addEventListener('click', (e) => {
                        e.stopPropagation(); // Prevent row selection
                        window.open(`https://www.google.com/maps?q=${lat},${lng}`, '_blank');
                    });
                    
                    // Add button to cell
                    cell.appendChild(btn);
                }
            });
        }, 200); // Give table time to render
    }

    isTimeInRange(time) {
        // Night: 18:00 (1080 minutes) to 6:00 (360 minutes)
        const [hours, minutes] = time.split(':').map(Number);
        const totalMinutes = hours * 60 + (minutes || 0);
        return totalMinutes >= 1080 || totalMinutes < 360;
    }

    parseDuration(durationStr) {
        if (!durationStr) return 0;

        // Handle different duration formats
        // Format 1: "HH:MM:SS"
        const timeMatch = durationStr.match(/(\d+):(\d+):(\d+)/);
        if (timeMatch) {
            const [_, hours, minutes, seconds] = timeMatch;
            return (parseInt(hours) * 3600) + (parseInt(minutes) * 60) + parseInt(seconds);
        }

        // Format 2: Simple seconds
        const seconds = parseInt(durationStr);
        return isNaN(seconds) ? 0 : seconds;
    }

    formatDuration(totalSeconds) {
        const hours = Math.floor(totalSeconds / 3600);
        const minutes = Math.floor((totalSeconds % 3600) / 60);
        const seconds = totalSeconds % 60;

        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    cleanup() {
        this.activeTab = null;
        this.data = null;
    }
}

// Create instances and expose to window object
const dayStayAnalysis = new DayStayAnalysis();
const nightStayAnalysis = new NightStayAnalysis();

window.dayStayAnalysis = dayStayAnalysis;
window.nightStayAnalysis = nightStayAnalysis;

moile-brief.js:
// mobile-brief.js - Mobile Number Brief analysis
class MobileBriefAnalysis {
  constructor() {
    this.commonColors = {};
    this.filesData = [];
    this.controlsAdded = false;
    this.activeExpandedBubble = null;
  }

  /**
   * Initialize mobile brief analysis with all active files
   */
  async init(fileIds) {
    try {
      // Clear any existing data
      this.filesData = [];

      // Use passed fileIds
      let activeFileIds = Array.isArray(fileIds) ? fileIds : [];

      // If no fileIds passed, get tabs directly from DOM
      if (activeFileIds.length === 0) {
        const tabs = document.querySelectorAll('#file-tabs-container .tab');
        activeFileIds = Array.from(tabs)
          .map(tab => parseInt(tab.getAttribute('data-file-id')))
          .filter(id => !isNaN(id));
      }

      if (activeFileIds.length === 0) {
        DataTable.showToast("No files selected for analysis", "warning");
        return false;
      }

      // Load all active files from DB
      for (const fileId of activeFileIds) {
        try {
          const file = await DB.getFileById(fileId);
          if (file && file.data && file.data.length > 0) {
            this.filesData.push(file);
          }
        } catch (err) {
          console.warn(`Could not load file ${fileId}:`, err);
        }
      }

      if (this.filesData.length === 0) {
        DataTable.showToast("No valid data found in selected files", "warning");
        return false;
      }

      this.addControlPanel();
      this.updateInvTblData();
      
      // Add scroll event listener to reposition expanded bubbles
      window.addEventListener('scroll', this.repositionExpandedBubbles.bind(this), { passive: true });
      document.addEventListener('scroll', this.repositionExpandedBubbles.bind(this), { passive: true });
      
      return true;
    } catch (error) {
      console.error("Error in mobile brief analysis:", error);
      DataTable.showToast(`Error: ${error.message}`, "error");
      return false;
    }
  }

  /**
   * Reposition any active expanded bubbles on scroll
   */
  repositionExpandedBubbles() {
    if (!this.activeExpandedBubble) return;
    
    const expandEl = document.getElementById(this.activeExpandedBubble);
    if (!expandEl) {
      this.activeExpandedBubble = null;
      return;
    }
    
    const bubbleId = expandEl.dataset.parentBubbleId;
    const bubble = document.getElementById(bubbleId);
    
    if (!bubble) {
      this.hideAllExpanded();
      return;
    }
    
    // Get real-time position of parent bubble
    const bubbleRect = bubble.getBoundingClientRect();
    
    // Update position of expanded element to follow parent bubble
    expandEl.style.top = `${window.scrollY + bubbleRect.top}px`;
    expandEl.style.left = `${window.scrollX + bubbleRect.right}px`;
  }

  /**
   * Add control panel for Mobile Brief
   */
  addControlPanel() {
    // Only add controls once
    if (this.controlsAdded) return;

    // Create controls div
    const controls = document.createElement('div');
    controls.id = 'mobile-brief-controls';
    controls.style.display = 'flex';
    controls.style.alignItems = 'center';
    controls.style.gap = '10px';
    controls.style.padding = '10px';
    controls.style.backgroundColor = '#f5f5f5';
    controls.style.borderRadius = '4px';
    controls.style.marginBottom = '10px';

    controls.innerHTML = `
      <div style="display: flex; align-items: center; margin-right: 15px;">
        <label for="bPartyCount" style="margin-right: 5px;">B Party Count:</label>
        <input type="number" id="bPartyCount" value="10" min="1" style="width: 60px; padding: 3px 5px;">
      </div>
      
      <div style="display: flex; align-items: center; margin-right: 15px;">
        <label for="cellIdCount" style="margin-right: 5px;">Cell ID Count:</label>
        <input type="number" id="cellIdCount" value="10" min="1" style="width: 60px; padding: 3px 5px;">
      </div>
      
      <div style="display: flex; align-items: center; margin-right: 15px;">
        <label for="imeiCount" style="margin-right: 5px;">IMEI Count:</label>
        <input type="number" id="imeiCount" value="10" min="1" style="width: 60px; padding: 3px 5px;">
      </div>
      
      <button id="update-mobile-brief-btn" style="padding: 4px 8px; background-color: #4a6cf7; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">Update</button>
      <button id="download-excel-mobile-brief-btn" style="padding: 4px 8px; background-color: #2ecc71; color: white; border: none; border-radius: 4px; cursor: pointer; margin-right: 10px;">📥 Download Excel</button>
      <button id="copy-table-mobile-brief-btn" style="padding: 4px 8px; background-color: #95a5a6; color: white; border: none; border-radius: 4px; cursor: pointer;">📋 Copy Table</button>
    `;

    // Add controls above the table
    const toolbar = document.querySelector('.toolbar');
    if (toolbar) {
      toolbar.parentNode.insertBefore(controls, toolbar.nextSibling);

      // Add event listeners
      document.getElementById('update-mobile-brief-btn').addEventListener('click', () => this.updateInvTblData());
      document.getElementById('download-excel-mobile-brief-btn').addEventListener('click', () => this.downloadTableAsExcel());
      document.getElementById('copy-table-mobile-brief-btn').addEventListener('click', () => this.copyTableToClipboard());

      this.controlsAdded = true;

      // Add bubble styles
      this.addBubbleStyles();
    }
  }

  /**
   * Update table data with counts from controls
   */
  updateInvTblData() {
    const bPartyCount = parseInt(document.getElementById("bPartyCount")?.value || "10");
    const cellIdCount = parseInt(document.getElementById("cellIdCount")?.value || "10");
    const imeiCount = parseInt(document.getElementById("imeiCount")?.value || "10");

    // Object to store common values and their occurrences
    const commonValues = { imei: {}, bParty: {}, cellId: {} };
    const tableData = [
      ['SNO', 'Mobile No', 'CAF', 'IMEI', 'B Party', 'Call Max Location', 'REFERENCE']
    ];

    let sno = 1;

    // Process each file from filesData
    this.filesData.forEach((file) => {
      const data = file.data;
      const targetNumberIndex = data[0].indexOf("Target No");
      const imeiIndex = data[0].indexOf("IMEI");
      const bPartyIndex = data[0].indexOf("B Party");
      const firstCellIdIndex = data[0].indexOf("First Cell ID");

      if (targetNumberIndex !== -1 && data.length > 1) {
        const targetNumber = data[1][targetNumberIndex];

        // Get IMEIs for the Target No
        const imeis = new Set();
        data.slice(1).forEach((row) => {
          if (row[imeiIndex]) {
            imeis.add(row[imeiIndex]);
          }
        });
        const imeiList = Array.from(imeis).slice(0, imeiCount);

        // Get top B Party mobile numbers
        const bPartyData = {};
        data.slice(1).forEach((row) => {
          const bParty = row[bPartyIndex];
          if (bParty && /^[6-9]\d{9}$/.test(bParty)) {
            bPartyData[bParty] = (bPartyData[bParty] || 0) + 1;
          }
        });
        const topBParty = Object.entries(bPartyData)
          .sort((a, b) => b[1] - a[1])
          .slice(0, bPartyCount)
          .map(([number]) => number);

        // Get top Cell IDs
        const cellIdData = {};
        data.slice(1).forEach((row) => {
          const cellId = row[firstCellIdIndex];
          if (cellId) {
            cellIdData[cellId] = (cellIdData[cellId] || 0) + 1;
          }
        });
        const topCellId = Object.entries(cellIdData)
          .sort((a, b) => b[1] - a[1])
          .slice(0, cellIdCount)
          .map(([cellId]) => cellId);

        // Add row to table data
        tableData.push([
          sno,
          targetNumber,
          "", // CAF column (empty)
          imeiList.join("\n"),
          topBParty.join("\n"),
          topCellId.join("\n"),
          "" // REFERENCE column (empty)
        ]);

        // Store common values for highlighting
        imeiList.forEach(imei => {
          if (!commonValues.imei[imei]) commonValues.imei[imei] = [];
          commonValues.imei[imei].push(sno);
        });

        topBParty.forEach(bParty => {
          if (!commonValues.bParty[bParty]) commonValues.bParty[bParty] = [];
          commonValues.bParty[bParty].push(sno);
        });

        topCellId.forEach(cellId => {
          if (!commonValues.cellId[cellId]) commonValues.cellId[cellId] = [];
          commonValues.cellId[cellId].push(sno);
        });

        sno++;
      }
    });

    // Load data into DataTable
    DataTable.loadData(tableData);

    // Add highlighting for common values after table is rendered
    setTimeout(() => this.highlightCommonValues(commonValues), 100);
  }

  /**
   * Highlight common values in the table
   */
  highlightCommonValues(commonValues) {
    const tableBody = document.getElementById('table-body');
    if (!tableBody) return;

    const rows = tableBody.querySelectorAll('tr');

    // For each row in the table
    for (let i = 0; i < rows.length; i++) {
      const cells = rows[i].querySelectorAll('td');
      if (cells.length < 7) continue;

      const sno = parseInt(cells[0].textContent);
      if (isNaN(sno)) continue;

      // Process IMEI cell (index 3)
      this.processCell(cells[3], 'imei', commonValues.imei, sno);

      // Process B Party cell (index 4)
      this.processCell(cells[4], 'bParty', commonValues.bParty, sno);

      // Process Cell ID cell (index 5)
      this.processCell(cells[5], 'cellId', commonValues.cellId, sno);
    }
  }

  /**
   * Process a cell to highlight common values
   */
  processCell(cell, type, valueMap, currentSno) {
    const values = cell.textContent.split('\n');
    if (values.length === 0) return;

    // Clear cell content
    cell.innerHTML = '';

    // Process each value
    values.forEach(value => {
      if (!value.trim()) return;

      const container = document.createElement('div');
      container.style.display = 'flex';
      container.style.alignItems = 'center';
      container.style.marginBottom = '2px';
      container.style.position = 'relative';
      container.dataset.value = value;
      container.className = 'value-container';

      const valueSpan = document.createElement('span');
      valueSpan.textContent = value;
      valueSpan.dataset.value = value;
      valueSpan.className = 'value-text';
      container.appendChild(valueSpan);

      // Check if this value is common across multiple rows
      const snoList = valueMap[value];
      if (snoList && snoList.length > 1) {
        const bubble = this.createBubble(value, type, snoList, currentSno);
        container.appendChild(bubble);
      }

      cell.appendChild(container);
    });
  }

  /**
   * Create indicator bubble for common values
   */
  createBubble(value, type, snoList, currentSNO) {
    const bubble = document.createElement("span");
    bubble.className = "common-bubble";
    bubble.dataset.value = value;
    bubble.id = `bubble-${value}-${currentSNO}`;

    const otherSNOs = snoList.filter((sno) => sno !== currentSNO);
    const commonCount = otherSNOs.length;
    
    // Get consistent color first - to be used for both single and multiple values
    const color = this.getColorForValue(value);
    bubble.style.backgroundColor = color;
    
    // Handle display based on count
    if (commonCount === 1) {
      // For single value, show the number directly
      bubble.textContent = otherSNOs[0];
      
      // Direct click to scroll to that row
      bubble.addEventListener("click", (e) => {
        e.stopPropagation();
        this.scrollToValue(otherSNOs[0], value);
      });
      
      return bubble;
    }
    
    // For multiple values, show + format
    if (commonCount > 100) {
      bubble.textContent = "+100";
    } else if (commonCount > 50) {
      bubble.textContent = "+50";
    } else if (commonCount > 20) {
      bubble.textContent = "+20";
    } else if (commonCount > 10) {
      bubble.textContent = "+10";
    } else if (commonCount > 5) {
      bubble.textContent = "+5";
    } else {
      bubble.textContent = "+1";
    }

    // Create expandable container that will be appended to document.body
    const expandableContainer = document.createElement("div");
    expandableContainer.className = "bubble-expand";
    expandableContainer.id = `expand-${value}-${currentSNO}`;
    expandableContainer.dataset.parentBubbleId = bubble.id;
    
    otherSNOs.forEach((sno) => {
      const snoSpan = document.createElement("span");
      snoSpan.textContent = sno;
      snoSpan.className = "bubble-sno";
      snoSpan.onclick = (e) => {
        e.stopPropagation();
        this.hideAllExpanded();
        this.scrollToValue(parseInt(sno), value);
      };
      expandableContainer.appendChild(snoSpan);
    });

    // Add expandable container to document body
    document.body.appendChild(expandableContainer);
    expandableContainer.style.backgroundColor = color;

    bubble.addEventListener("click", (e) => {
      e.stopPropagation();
      
      // Hide all other expanded bubbles
      this.hideAllExpanded();
      
      // Set this as the active expanded bubble
      this.activeExpandedBubble = `expand-${value}-${currentSNO}`;
      
      // Position expanded container relative to bubble
      this.positionExpandedBubble(bubble.id, this.activeExpandedBubble);
    });

    return bubble;
  }

  /**
   * Position expanded bubble relative to its parent bubble
   */
  positionExpandedBubble(bubbleId, expandedId) {
    const bubble = document.getElementById(bubbleId);
    const expandEl = document.getElementById(expandedId);
    
    if (!bubble || !expandEl) return;
    
    const bubbleRect = bubble.getBoundingClientRect();
    
    // Position relative to bubble
    expandEl.style.position = 'absolute';
    expandEl.style.top = `${window.scrollY + bubbleRect.top}px`;
    expandEl.style.left = `${window.scrollX + bubbleRect.right}px`;
    expandEl.classList.add('expanded');
    
    // Store original position to use for calculations during scroll
    expandEl.dataset.originalTop = bubbleRect.top;
    expandEl.dataset.originalLeft = bubbleRect.right;
    expandEl.dataset.scrollY = window.scrollY;
    expandEl.dataset.scrollX = window.scrollX;
  }

  /**
   * Hide all expanded bubble containers
   */
  hideAllExpanded() {
    const allExpanded = document.querySelectorAll('.bubble-expand');
    allExpanded.forEach(expanded => {
      expanded.classList.remove('expanded');
    });
    this.activeExpandedBubble = null;
  }

  /**
   * Clean up - remove all expanded containers from the DOM
   */
  cleanupExpanded() {
    const allExpanded = document.querySelectorAll('.bubble-expand');
    allExpanded.forEach(expanded => {
      expanded.remove();
    });
    this.activeExpandedBubble = null;
  }

  /**
   * Add styles for bubble indicators
   */
  addBubbleStyles() {
    if (document.getElementById("bubble-styles")) return;

    const style = document.createElement("style");
    style.id = "bubble-styles";
    style.textContent = `
        @keyframes bubble-pulse {
          0% { transform: scale(1); }
          50% { transform: scale(1.1); }
          100% { transform: scale(1); }
        }
        .common-bubble {
          display: inline-flex;
          align-items: center;
          justify-content: center;
          width: 24px;
          height: 24px;
          border-radius: 12px;
          color: white;
          font-size: 11px;
          font-weight: bold;
          margin-left: 5px;
          cursor: pointer;
          position: relative;
          transition: all 0.3s ease;
          box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          animation: bubble-pulse 2s infinite;
          z-index: 1;
        }
  
        .common-bubble:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
  
        /* Expandable bubble container */
        .bubble-expand {
          display: none;
          position: absolute; /* Changed from fixed to absolute for better scroll tracking */
          background-color: inherit;
          border-radius: 12px;
          padding: 0 10px 0 5px;
          height: 24px;
          white-space: nowrap;
          align-items: center;
          box-shadow: 0 3px 15px rgba(0,0,0,0.3);
          z-index: 99999;
          transform-origin: left center;
        }
        
        .bubble-expand.expanded {
          display: flex;
          animation: expandAnimation 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        
        @keyframes expandAnimation {
          0% { transform: scaleX(0); opacity: 0; }
          100% { transform: scaleX(1); opacity: 1; }
        }
  
        .bubble-sno {
          display: inline-block;
          margin: 0 3px;
          cursor: pointer;
          padding: 2px 5px;
          border-radius: 4px;
          transition: all 0.2s ease;
          font-size: 11px;
          background-color: rgba(255,255,255,0.2);
          color: white;
        }
  
        .bubble-sno:hover {
          background-color: rgba(255,255,255,0.4);
          transform: translateY(-2px);
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        
        /* Highlight specific value */
        .highlight-value {
          background-color: #fff9c4;
          padding: 2px 4px;
          border-radius: 3px;
          animation: valueHighlight 2s ease;
          box-shadow: 0 0 5px rgba(0,0,0,0.2);
        }
        
        @keyframes valueHighlight {
          0% { background-color: #fff9c4; box-shadow: 0 0 10px rgba(255, 235, 59, 0.7); }
          50% { background-color: #ffeb3b; box-shadow: 0 0 15px rgba(255, 235, 59, 0.9); }
          100% { background-color: #fff9c4; box-shadow: 0 0 10px rgba(255, 235, 59, 0.7); }
        }
    `;
    document.head.appendChild(style);
    
    // Add global click handler to close all expanded bubbles when clicking elsewhere
    document.addEventListener('click', () => {
      this.hideAllExpanded();
    });
  }

  /**
   * Get consistent color for a value
   */
  getColorForValue(value) {
    if (!this.commonColors[value]) {
      this.commonColors[value] = this.getRandomColor();
    }
    return this.commonColors[value];
  }

  /**
   * Generate a random color that's not too light
   */
  getRandomColor() {
    // Use predefined vibrant colors instead of completely random ones
    const vibrantColors = [
      "#3498db", // Blue
      "#e74c3c", // Red
      "#2ecc71", // Green
      "#9b59b6", // Purple
      "#f39c12", // Orange
      "#1abc9c", // Teal
      "#d35400", // Dark Orange
      "#c0392b", // Dark Red
      "#8e44ad", // Dark Purple
      "#27ae60", // Dark Green
      "#2980b9", // Dark Blue
      "#f1c40f", // Yellow
      "#16a085", // Dark Teal
      "#e67e22", // Light Orange
      "#34495e", // Navy Blue
      "#7f8c8d", // Gray
    ];
    
    return vibrantColors[Math.floor(Math.random() * vibrantColors.length)];
  }

  /**
   * Scroll to a specific row and highlight specific value
   */
  scrollToValue(sno, value) {
    const tableBody = document.getElementById('table-body');
    if (!tableBody) return;

    // Remove any existing highlights
    document.querySelectorAll('.highlight-value').forEach(el => {
      el.classList.remove('highlight-value');
    });

    const rows = tableBody.querySelectorAll('tr');
    for (let i = 0; i < rows.length; i++) {
      const firstCell = rows[i].querySelector('td');
      if (firstCell && parseInt(firstCell.textContent) === sno) {
        // Scroll to the row
        rows[i].scrollIntoView({ behavior: "smooth", block: "center" });
        
        // Find and highlight the specific value
        const valueElements = rows[i].querySelectorAll('.value-text');
        valueElements.forEach(el => {
          if (el.dataset.value === value) {
            el.classList.add('highlight-value');
            // Trigger reflow to restart animation
            void el.offsetWidth;
          }
        });
        
        break;
      }
    }
  }

  /**
   * Download table as Excel
   */
  downloadTableAsExcel() {
    // Get current table data
    const tableData = DataTable.getCurrentData();

    if (!tableData || !tableData.displayData || tableData.displayData.length <= 1) {
      DataTable.showToast("No data to export", "warning");
      return;
    }

    // Create a workbook
    const wb = XLSX.utils.book_new();
    const wsData = tableData.displayData;

    // Create worksheet
    const ws = XLSX.utils.aoa_to_sheet(wsData);

    // Add worksheet to workbook
    XLSX.utils.book_append_sheet(wb, ws, "Mobile_Brief");

    // Save workbook
    XLSX.writeFile(wb, "mobile_brief_data.xlsx");
    DataTable.showToast("Table exported to Excel", "success");
  }

  /**
   * Copy table to clipboard
   */
  copyTableToClipboard() {
    // Get current table data
    const tableData = DataTable.getCurrentData();

    if (!tableData || !tableData.displayData || tableData.displayData.length <= 1) {
      DataTable.showToast("No data to copy", "warning");
      return;
    }

    // Convert table data to text
    const textData = tableData.displayData.map(row => row.join('\t')).join('\n');

    // Copy to clipboard
    navigator.clipboard.writeText(textData)
      .then(() => {
        DataTable.showToast("Table copied to clipboard", "success");
      })
      .catch(err => {
        console.error('Error copying table:', err);
        DataTable.showToast("Failed to copy table", "error");
      });
  }

  /**
   * Clean up resources and reset state
   */
  cleanup() {
    // Clean up expandable containers first
    this.cleanupExpanded();
    
    // Remove scroll listener
    window.removeEventListener('scroll', this.repositionExpandedBubbles);
    document.removeEventListener('scroll', this.repositionExpandedBubbles);
    
    // Reset state
    this.commonColors = {};
    this.filesData = [];
    this.activeExpandedBubble = null;

    // Remove control panel
    const controls = document.getElementById('mobile-brief-controls');
    if (controls) {
      controls.remove();
      this.controlsAdded = false;
    }

    // Reload original data if possible
    if (window.activeTab) {
      DB.getFileById(window.activeTab)
        .then(file => {
          if (file && file.data) {
            DataTable.loadData(file.data, file.id);
          }
        })
        .catch(err => console.error('Error restoring data:', err));
    }
  }
}

// Export the module
const mobileBriefAnalysis = new MobileBriefAnalysis();

network-gaph.js:
// network-graph.js - Network Graph visualization
class NetworkGraph {
  constructor() {
    this.fileIds = [];
    this.fileData = {};
    this.networkData = {
      nodes: [],
      edges: []
    };
    this.network = null;
    this.colors = {};
    this.isInitialized = false;
  }

  /**
   * Initialize network graph with file data
   */
  async init(fileIds) {
    console.log('[NetworkGraph] init called with fileIds:', fileIds);

    // Check if vis.js is available
    if (typeof vis === 'undefined') {
      console.error('[NetworkGraph] ERROR: vis.js library is not loaded!');
      DataTable.showToast('vis.js library is not loaded. Please check dependencies.', 'error');
      return false;
    }

    // Important: If we're already initialized, don't re-initialize
    // Instead just make sure network is visible
    if (this.isInitialized && this.network) {
      console.log('[NetworkGraph] Already initialized, just showing container');
      this.showNetworkGraph();
      return true;
    }

    console.log('[NetworkGraph] vis.js version:', vis.version || 'unknown');

    this.fileIds = fileIds;
    this.fileData = {};
    this.isInitialized = false;

    try {
      // Load data for all files
      for (const fileId of fileIds) {
        const file = await DB.getFileById(fileId);
        if (file && file.data) {
          this.fileData[fileId] = {
            data: file.data,
            displayName: file.displayName || `File ${fileId}`
          };
        }
      }

      if (Object.keys(this.fileData).length === 0) {
        throw new Error('No valid file data found');
      }

      await this.processNetworkData();
      await this.renderGraph();
      this.isInitialized = true;
      return true;
    } catch (error) {
      console.error('[NetworkGraph] Error in network graph:', error);
      DataTable.showToast(`Error: ${error.message}`, 'error');
      return false;
    }
  }

  /**
   * Process data to create network graph
   */
  async processNetworkData() {
    console.log('[NetworkGraph] processNetworkData started');

    // Map to track all nodes and their connections
    const nodes = new Map();
    const edges = [];
    const targetNumbers = new Set();

    // Process each file
    for (const [fileId, { data, displayName }] of Object.entries(this.fileData)) {
      const targetNoIndex = data[0].indexOf('Target No');
      const bPartyIndex = data[0].indexOf('B Party');

      if (targetNoIndex === -1 || bPartyIndex === -1) {
        console.warn(`[NetworkGraph] Could not find Target No or B Party columns in file ${fileId}`);
        continue;
      }

      // Get Target No
      let loggedCount = 0; // Added counter for logging
      for (let i = 1; i < data.length; i++) {
        const targetNo = data[i][targetNoIndex];
        const bParty = data[i][bPartyIndex];

        // Log first 5 pairs for debugging
        if (loggedCount < 5) {
          console.log(`[NetworkGraph] Processing row ${i}: TargetNo=${targetNo}, BParty=${bParty}`);
          loggedCount++;
        }

        if (targetNo) {
          targetNumbers.add(targetNo);

          // Add target as node if not exists
          if (!nodes.has(targetNo)) {
            nodes.set(targetNo, {
              id: targetNo,
              label: targetNo,
              group: 'target',
              file: fileId,
              connections: 0
            });
          }

          // Process connection if B Party exists and looks like a phone number
          const isValidBParty = bParty && /^\d{5,15}$/.test(String(bParty).trim()); // Check if 5-15 digits

          if (isValidBParty && bParty !== targetNo) {
            // Add B Party as node if not exists
            if (!nodes.has(bParty)) {
              nodes.set(bParty, {
                id: bParty,
                label: bParty,
                group: 'contact',
                connections: 0
              });
            }

            // Increment connection counts
            nodes.get(targetNo).connections++;
            nodes.get(bParty).connections++;

            // Add edge
            edges.push({
              from: targetNo,
              to: bParty,
              file: fileId
            });
          }
        }
      }
    }

    // Process node sizes based on connection count
    const maxConnections = Math.max(...Array.from(nodes.values()).map(n => n.connections), 1);

    console.log(`[NetworkGraph] Processed data: ${nodes.size} nodes, ${edges.length} potential edges`);

    this.networkData = {
      nodes: Array.from(nodes.values()).map(node => {
        // Size based on connections (min 10, max 30)
        const size = 10 + (node.connections / maxConnections) * 20;
        // Color based on group
        const color = node.group === 'target' ? '#ff0000' : this.getNodeColor(node.id);

        return {
          ...node,
          size,
          color: {
            background: color,
            border: '#000000',
            highlight: { background: color, border: '#000000' }
          },
          font: {
            size: 12 + (node.connections / maxConnections) * 8,
            color: node.group === 'target' ? '#000000' : '#333333'
          }
        };
      }),
      edges: edges.map(edge => {
        // Check if both nodes are targets
        const isBothTargets = targetNumbers.has(edge.from) && targetNumbers.has(edge.to);

        return {
          ...edge,
          width: isBothTargets ? 2 : 1,
          color: isBothTargets ? '#ff0000' : '#999999'
        };
      })
    };
  }

  /**
   * Get a consistent color for a node
   */
  getNodeColor(nodeId) {
    if (this.colors[nodeId]) return this.colors[nodeId];

    // Generate a random color
    const hue = Math.floor(Math.random() * 360);
    const color = `hsl(${hue}, 70%, 75%)`;

    this.colors[nodeId] = color;
    return color;
  }

  /**
   * Render the network graph
   */
  async renderGraph() {
    console.log('[NetworkGraph] renderGraph started');

    // Get table wrapper
    const tableWrapper = document.getElementById('table-wrapper');
    if (!tableWrapper) {
      console.error('[NetworkGraph] Error: table-wrapper element not found!');
      return;
    }

    // Hide DataTable components
    this.hideDataTable();

    // SIMPLIFIED: Use only network-container without additional wrapper
    let container = document.getElementById('network-container');
    
    // If container doesn't exist, create it
    if (!container) {
      container = document.createElement('div');
      container.id = 'network-container';
      container.className = 'network-container';
      container.style.width = '100%';
      container.style.height = '600px';
      container.style.border = '1px solid #ddd';
      container.style.backgroundColor = '#f9f9f9';
      container.style.position = 'relative';
      container.style.overflow = 'hidden';
      container.style.display = 'block';

      // Add to table wrapper
      tableWrapper.appendChild(container);
    } else {
      // Clear any existing content
      container.innerHTML = '';
    }

    // Create loading overlay
    const loadingOverlay = document.createElement('div');
    loadingOverlay.id = 'network-loading-overlay';
    loadingOverlay.style.position = 'absolute';
    loadingOverlay.style.top = '0';
    loadingOverlay.style.left = '0';
    loadingOverlay.style.width = '100%';
    loadingOverlay.style.height = '100%';
    loadingOverlay.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
    loadingOverlay.style.display = 'flex';
    loadingOverlay.style.justifyContent = 'center';
    loadingOverlay.style.alignItems = 'center';
    loadingOverlay.style.zIndex = '100';
    loadingOverlay.innerHTML = '<div style="padding: 20px; background-color: white; border-radius: 4px; box-shadow: 0 2px 10px rgba(0,0,0,0.2);">Initializing network graph...</div>';
    container.appendChild(loadingOverlay);

    // Add debug info div
    const debugInfo = document.createElement('div');
    debugInfo.id = 'network-debug-info';
    debugInfo.style.position = 'absolute';
    debugInfo.style.bottom = '10px';
    debugInfo.style.right = '50%';
    debugInfo.style.backgroundColor = 'rgba(255,255,255,0.8)';
    debugInfo.style.padding = '5px';
    debugInfo.style.borderRadius = '4px';
    debugInfo.style.fontSize = '11px';
    debugInfo.style.zIndex = '25';
    debugInfo.style.display = 'none'; // Hide initially
    debugInfo.innerHTML = 'Network info will appear here';
    container.appendChild(debugInfo);

    // Create icons container for top-right corner
    const iconsContainer = document.createElement('div');
    iconsContainer.className = 'network-icons-container';
    iconsContainer.style.position = 'absolute';
    iconsContainer.style.top = '10px';
    iconsContainer.style.right = '10px';
    iconsContainer.style.display = 'flex';
    iconsContainer.style.gap = '10px';
    iconsContainer.style.zIndex = '30';
    iconsContainer.style.backgroundColor = 'rgba(255, 255, 255, 0.7)';
    iconsContainer.style.padding = '5px';
    iconsContainer.style.borderRadius = '4px';
    iconsContainer.style.boxShadow = '0 2px 5px rgba(0,0,0,0.1)';

    // Create fullscreen icon
    const fullscreenIcon = document.createElement('div');
    fullscreenIcon.className = 'network-icon';
    fullscreenIcon.title = 'Toggle Fullscreen';
    fullscreenIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M8 3H5a2 2 0 00-2 2v3m18 0V5a2 2 0 00-2-2h-3m0 18h3a2 2 0 002-2v-3M3 16v3a2 2 0 002 2h3"></path>
    </svg>`;
    fullscreenIcon.style.cursor = 'pointer';
    fullscreenIcon.addEventListener('click', () => this.toggleFullscreen());

    // Create physics icon
    const physicsIcon = document.createElement('div');
    physicsIcon.className = 'network-icon';
    physicsIcon.title = 'Toggle Physics';
    physicsIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="10"></circle>
      <path d="M12 6v12M6 12h12"></path>
    </svg>`;
    physicsIcon.style.cursor = 'pointer';
    physicsIcon.addEventListener('click', () => this.togglePhysics());

    // Create prune icon
    const pruneIcon = document.createElement('div');
    pruneIcon.className = 'network-icon';
    pruneIcon.title = 'Prune Single Connections';
    pruneIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M3 3l18 18M10.5 10.5L3 18M21 3l-7.5 7.5"></path>
    </svg>`;
    pruneIcon.style.cursor = 'pointer';
    pruneIcon.addEventListener('click', () => this.pruneSingleConnections());

    // Create refresh icon
    const refreshIcon = document.createElement('div');
    refreshIcon.className = 'network-icon';
    refreshIcon.title = 'Refresh Graph';
    refreshIcon.innerHTML = `<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M23 4v6h-6M1 20v-6h6M3.51 9a9 9 0 0114.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0020.49 15"></path>
    </svg>`;
    refreshIcon.style.cursor = 'pointer';
    refreshIcon.addEventListener('click', () => this.refreshGraph());

    // Add icons to container
    iconsContainer.appendChild(fullscreenIcon);
    iconsContainer.appendChild(physicsIcon);
    iconsContainer.appendChild(pruneIcon);
    iconsContainer.appendChild(refreshIcon);
    
    // Add icons to the network container
    container.appendChild(iconsContainer);

    try {
      // Prepare data for the visualization
      const nodes = new vis.DataSet(this.networkData.nodes);
      const edges = new vis.DataSet(this.networkData.edges);

      console.log(`[NetworkGraph] Prepared data: ${nodes.length} nodes, ${edges.length} edges`);

      // Update compatible options
      const options = {
        nodes: {
          shape: 'dot',
          shadow: {
            enabled: true,
            size: 5,
            x: 2,
            y: 2
          }
        },
        edges: {
          smooth: {
            type: 'continuous'
          },
          arrows: {
            to: false,
            from: false
          }
        },
        physics: {
          enabled: true,
          stabilization: {
            iterations: 100
          },
          barnesHut: {
            gravitationalConstant: -10000,
            centralGravity: 0.3,
            springLength: 140,
            springConstant: 0.04,
            damping: 0.09
          }
        },
        interaction: {
          navigationButtons: true,
          keyboard: true,
          tooltipDelay: 200
        }
      };

      // Create network - first destroy existing network if it exists
      if (this.network) {
        try {
          this.network.destroy();
          this.network = null;
        } catch (e) {
          console.warn('[NetworkGraph] Error destroying network:', e);
        }
      }

      // Create a temporary container for the vis network
      const visContainer = document.createElement('div');
      visContainer.style.width = '100%';
      visContainer.style.height = '100%';
      visContainer.style.position = 'absolute';
      visContainer.style.top = '0';
      visContainer.style.left = '0';
      container.appendChild(visContainer);

      // Create new network
      console.log('[NetworkGraph] Initializing vis.Network with container');
      this.network = new vis.Network(visContainer, { nodes, edges }, options);
      console.log('[NetworkGraph] vis.Network initialized');

      // Add event listeners
      this.setupNetworkEvents();

      // Wait for initialization and stabilization
      await new Promise(resolve => {
        // Wait for network to be ready
        setTimeout(() => {
          if (this.network) {
            try {
              // Force redraw and fit
              this.network.redraw();
              this.network.fit({
                animation: {
                  duration: 1000,
                  easingFunction: 'easeInOutQuad'
                }
              });

              // Show network stats
              debugInfo.innerHTML = `Nodes: ${nodes.length}, Edges: ${edges.length}`;
              debugInfo.style.display = 'block';

              console.log('[NetworkGraph] Network drawn and fitted to view');
            } catch (e) {
              console.error('[NetworkGraph] Error during post-initialization:', e);
            }

            // Remove loading overlay
            loadingOverlay.remove();

            resolve();
          }
        }, 1500); // Give sufficient time for initialization
      });

      return true;
    } catch (error) {
      console.error('[NetworkGraph] Error creating network:', error);
      loadingOverlay.innerHTML = `<div style="padding: 20px; background-color: white; border-radius: 4px; box-shadow: 0 2px 10px rgba(0,0,0,0.2); color: red;">Error: ${error.message}</div>`;
      return false;
    }
  }

  /**
   * Show the network graph
   */
  showNetworkGraph() {
    this.hideDataTable();
    const container = document.getElementById('network-container');
    if (container) {
      container.style.display = 'block';
    }
  }

  /**
   * Hide the network graph
   */
  hideNetworkGraph() {
    const container = document.getElementById('network-container');
    if (container) {
      container.style.display = 'none';
    }
    this.restoreDataTable();
  }

  /**
   * Refresh the network graph
   */
  async refreshGraph() {
    if (!this.network) return;

    try {
      // First try to redraw and fit
      this.network.redraw();
      this.network.fit({
        animation: {
          duration: 500,
          easingFunction: 'easeInOutQuad'
        }
      });
      DataTable.showToast('Graph refreshed', 'success');
    } catch (error) {
      console.error('[NetworkGraph] Error refreshing graph:', error);
      DataTable.showToast('Error refreshing graph. Reinitializing...', 'warning');

      // If redraw fails, completely reinitialize
      await this.renderGraph();
    }
  }

  /**
   * Hide standard DataTable components
   */
  hideDataTable() {
    const dataTable = document.getElementById('data-table');
    if (dataTable) dataTable.style.display = 'none';

    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) loadingIndicator.style.display = 'none';

    const noDataMessage = document.getElementById('no-data-message');
    if (noDataMessage) noDataMessage.style.display = 'none';
  }

  /**
   * Restore standard DataTable components
   */
  restoreDataTable() {
    const dataTable = document.getElementById('data-table');
    if (dataTable) dataTable.style.display = 'block'; // Explicitly set to block instead of empty string

    const loadingIndicator = document.getElementById('loading-indicator');
    if (loadingIndicator) loadingIndicator.style.display = '';

    const noDataMessage = document.getElementById('no-data-message');
    if (noDataMessage) noDataMessage.style.display = '';
  }

  /**
   * Set up network event handlers
   */
  setupNetworkEvents() {
    if (!this.network) return;

    // Double-click to focus on a node
    this.network.on('doubleClick', params => {
      if (params.nodes.length > 0) {
        const nodeId = params.nodes[0];
        this.network.focus(nodeId, {
          scale: 1.2,
          animation: true
        });
      }
    });

    // Triple-click to remove a node
    let clickCount = 0;
    let clickTimer = null;
    let clickedNodeId = null;

    this.network.on('click', params => {
      if (params.nodes.length === 0) {
        clickCount = 0;
        return;
      }

      const nodeId = params.nodes[0];

      if (nodeId !== clickedNodeId) {
        clickCount = 1;
        clickedNodeId = nodeId;
      } else {
        clickCount++;
      }

      clearTimeout(clickTimer);
      clickTimer = setTimeout(() => {
        clickCount = 0;
      }, 500);

      if (clickCount === 3) {
        this.removeNode(nodeId);
        clickCount = 0;
      }
    });

    // Stabilization complete event
    this.network.once('stabilizationIterationsDone', () => {
      console.log('[NetworkGraph] Stabilization iterations completed');

      // Force redraw and fit after stabilization
      setTimeout(() => {
        try {
          this.network.redraw();
          this.network.fit({
            animation: {
              duration: 1000,
              easingFunction: 'easeInOutQuad'
            }
          });
          console.log('[NetworkGraph] Network redrawn and fitted after stabilization');

          // Update debug info
          const debugInfo = document.getElementById('network-debug-info');
          if (debugInfo) {
            const numNodes = this.network.body.data.nodes.length;
            const numEdges = this.network.body.data.edges.length;
            debugInfo.innerHTML = `Nodes: ${numNodes}, Edges: ${numEdges}`;
            debugInfo.style.display = 'block';
          }
        } catch (e) {
          console.error('[NetworkGraph] Error during post-stabilization:', e);
        }
      }, 100);
    });
  }

  /**
   * Toggle fullscreen mode
   */
  toggleFullscreen() {
    const container = document.getElementById('network-container');
    if (!container) return;

    if (!document.fullscreenElement) {
      container.requestFullscreen().catch(err => {
        console.error(`[NetworkGraph] Error attempting to enable fullscreen: ${err.message}`);
        DataTable.showToast(`Fullscreen error: ${err.message}`, 'error');
      });
    } else {
      document.exitFullscreen();
    }
  }

  /**
   * Toggle physics simulation
   */
  togglePhysics() {
    if (!this.network) return;

    try {
      const physics = !this.network.physics.options.enabled;
      this.network.setOptions({ physics: { enabled: physics } });
      DataTable.showToast(`Physics ${physics ? 'enabled' : 'disabled'}`);
    } catch (error) {
      console.error('[NetworkGraph] Error toggling physics:', error);
      DataTable.showToast('Error toggling physics', 'error');
    }
  }

  /**
   * Remove nodes with only one connection
   */
  pruneSingleConnections() {
    if (!this.network) return;

    try {
      const nodes = this.network.body.data.nodes;
      const edges = this.network.body.data.edges;
      let pruned = 0;

      // Get nodes with only one connection
      const nodeIds = nodes.getIds();

      for (const nodeId of nodeIds) {
        const connectedEdges = this.network.getConnectedEdges(nodeId);
        if (connectedEdges.length === 1) {
          const node = nodes.get(nodeId);

          // Don't remove target nodes
          if (node && node.group === 'target') continue;

          // Remove node and its edge
          nodes.remove(nodeId);
          edges.remove(connectedEdges[0]);
          pruned++;
        }
      }

      DataTable.showToast(`Pruned ${pruned} nodes with single connections`);
    } catch (error) {
      console.error('[NetworkGraph] Error pruning connections:', error);
      DataTable.showToast('Error pruning connections', 'error');
    }
  }

  /**
   * Remove a specific node
   */
  removeNode(nodeId) {
    if (!this.network) return;

    try {
      // Get connected edges
      const connectedEdges = this.network.getConnectedEdges(nodeId);

      // Remove node and edges
      this.network.body.data.nodes.remove(nodeId);
      this.network.body.data.edges.remove(connectedEdges);

      DataTable.showToast(`Removed node ${nodeId} and ${connectedEdges.length} connections`);
    } catch (error) {
      console.error('[NetworkGraph] Error removing node:', error);
      DataTable.showToast('Error removing node', 'error');
    }
  }

  /**
   * Clean up resources and reset state
   * Called when switching away from network graph
   */
  cleanup() {
    console.log('[NetworkGraph] Cleanup called - hiding network graph and showing data table');
    
    // Don't destroy, just hide the container
    this.hideNetworkGraph();
    
    // Make sure we load the current tab's data
    if (window.appState && window.appState.activeTab) {
      DB.getFileById(window.appState.activeTab)
        .then(file => {
          if (file && file.data) {
            DataTable.loadData(file.data, file.id);
          }
        })
        .catch(err => console.error('[NetworkGraph] Error restoring data:', err));
    }
  }
}

// Create global instance
const networkGraph = new NetworkGraph();

// Add a bit of extra CSS for the icons
const style = document.createElement('style');
style.textContent = `
  .network-icon {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    transition: all 0.2s ease;
  }
  
  .network-icon:hover {
    background-color: #f0f0f0;
    transform: scale(1.05);
  }
  
  .network-icon svg {
    color: #333;
  }
`;
document.head.appendChild(style);

// Patch the AnalysisController.switchToAnalysis function to properly handle tab switching
document.addEventListener('DOMContentLoaded', function() {
  // Only patch if AnalysisController exists
  if (window.AnalysisController && window.AnalysisController.switchToAnalysis) {
    console.log('[NetworkGraph] Patching AnalysisController.switchToAnalysis');
    
    // Save the original function
    const originalSwitchToAnalysis = window.AnalysisController.switchToAnalysis;
    
    // Replace with our patched version
    window.AnalysisController.switchToAnalysis = function(analysisType, data) {
      console.log(`[NetworkGraph] Patched switchToAnalysis called with type: ${analysisType}`);
      
      // If we're switching to network graph
      if (analysisType === 'network-graph') {
        // Use the networkGraph object directly
        networkGraph.init(window.appState.activeFiles)
          .then(() => {
            window.AnalysisController.showLoadingIndicator(false);
          })
          .catch(err => {
            console.error('Error in network graph:', err);
            DataTable.showToast(`Error: ${err.message}`, 'error');
            window.AnalysisController.showLoadingIndicator(false);
          });
      } else {
        // For other tabs, make sure network graph is hidden first
        networkGraph.hideNetworkGraph();
        
        // Then call the original function
        originalSwitchToAnalysis.call(window.AnalysisController, analysisType, data);
      }
      
      // Update the active subtab state
      window.appState.activeSubtab = analysisType;
    };
    
    // Also patch the cleanupPreviousAnalysis function to avoid double cleanup
    const originalCleanupPreviousAnalysis = window.AnalysisController.cleanupPreviousAnalysis;
    
    window.AnalysisController.cleanupPreviousAnalysis = function() {
      console.log('[NetworkGraph] Patched cleanupPreviousAnalysis called');
      
      // Only cleanup other modules, not networkGraph - we'll handle that in switchToAnalysis
      const modules = [
        window.locationAnalysis, 
        window.basicAnalysis,
        window.smsAnalysis, 
        window.commonAnalysis, 
        window.mobileBriefAnalysis,
        window.dayStayAnalysis, 
        window.nightStayAnalysis
      ];
    
      modules.forEach(module => {
        if (module && typeof module.cleanup === 'function') {
          module.cleanup();
        }
      });
    };
  }
});

// Make networkGraph globally accessible
window.networkGraph = networkGraph;

sms.js:
// sms.js - SMS Analysis with enhanced pre-fetching and caching
class SMSAnalysis {
    constructor() {
        this.activeTab = null;
        this.data = null;
        this.entityCache = {};
        this.isProcessing = false;

        // Enhanced cache with localStorage persistence
        this.initializeCache();

        // Queue for API requests
        this.requestQueue = [];
        this.isProcessingQueue = false;
    }

    /**
     * Initialize the entity cache from localStorage if available
     */
    initializeCache() {
        try {
            const cachedData = localStorage.getItem('smsEntityCache');
            if (cachedData) {
                const parsedCache = JSON.parse(cachedData);
                // Only use cache if it's not too old (7 days)
                const cacheTime = localStorage.getItem('smsEntityCacheTime');
                const now = Date.now();
                if (cacheTime && (now - parseInt(cacheTime)) < 7 * 24 * 60 * 60 * 1000) {
                    this.entityCache = parsedCache;

                } else {

                    localStorage.removeItem('smsEntityCache');
                    localStorage.setItem('smsEntityCacheTime', now.toString());
                    this.entityCache = {};
                }
            } else {

                localStorage.setItem('smsEntityCacheTime', Date.now().toString());
                this.entityCache = {};
            }
        } catch (error) {
            console.error('Error initializing SMS entity cache:', error);
            this.entityCache = {};
        }
    }

    /**
     * Save the entity cache to localStorage
     */
    saveCache() {
        try {
            localStorage.setItem('smsEntityCache', JSON.stringify(this.entityCache));
        } catch (error) {
            console.error('Error saving SMS entity cache:', error);
        }
    }

    /**
     * Initialize SMS analysis with file data
     * @param {number} fileId - ID of the file to analyze
     * @returns {Promise<boolean>} - Success/failure indicator
     */
    async init(fileId) {
        this.activeTab = fileId;

        try {
            // Get file data from DB
            const file = await DB.getFileById(fileId);
            if (!file || !file.data) {
                throw new Error('File data not found');
            }

            this.data = file.data;
            await this.processSMSData();
            return true;
        } catch (error) {
            console.error('Error in SMS analysis:', error);
            DataTable.showToast(`Error: ${error.message}`, 'error');
            return false;
        }
    }

    /**
     * Process SMS data and display using DataTable
     */
    async processSMSData() {
        if (this.isProcessing) return;
        this.isProcessing = true;

        try {
            const bPartyIndex = this.data[0].indexOf('B Party');
            const serviceTypeIndex = this.data[0].indexOf('Service Type');

            if (bPartyIndex === -1) {
                throw new Error('B Party column not found');
            }

            // Filter SMS records and count by SMS code/header
            const smsHeaders = {};

            // Process each row
            for (let i = 1; i < this.data.length; i++) {
                const row = this.data[i];
                const bParty = row[bPartyIndex];
                const serviceType = serviceTypeIndex !== -1 ? row[serviceTypeIndex] : '';

                // Check if this is an SMS
                const isSMS = serviceType &&
                    (serviceType.toUpperCase().includes('SMS') ||
                        serviceType.toUpperCase().includes('MESSAGE'));

                // Process SMS headers (not 10-digit numbers)
                if (bParty && (bParty.length < 10 || /[^0-9]/.test(bParty))) {
                    const smsCode = this.parseSMSHeader(bParty);

                    if (smsCode) {
                        if (!smsHeaders[smsCode]) {
                            smsHeaders[smsCode] = {
                                count: 0,
                                entityName: 'Loading...',
                                purpose: 'Loading...'
                            };

                            // Use cached data if available
                            if (this.entityCache[smsCode]) {
                                smsHeaders[smsCode].entityName = this.entityCache[smsCode].entityName;
                                smsHeaders[smsCode].purpose = this.entityCache[smsCode].purpose;
                            }
                        }

                        smsHeaders[smsCode].count++;
                    }
                }
            }

            // Create SMS headers table data for DataTable
            const tableData = [
                ['SMS Code', 'Count', 'Entity Name', 'Purpose']
            ];

            // Add data rows
            Object.entries(smsHeaders)
                .sort((a, b) => b[1].count - a[1].count)
                .forEach(([code, info]) => {
                    tableData.push([
                        code,
                        info.count,
                        info.entityName,
                        info.purpose
                    ]);
                });

            // Use DataTable to display the data
            DataTable.loadData(tableData);

            // Fetch entity data for headers that aren't already in cache
            const headersToFetch = Object.keys(smsHeaders).filter(code =>
                !this.entityCache[code] ||
                this.entityCache[code].entityName === 'Loading...' ||
                this.entityCache[code].entityName === 'Error'
            );

            if (headersToFetch.length > 0) {
                this.fetchEntityBatch(headersToFetch, smsHeaders);
            }
        } finally {
            this.isProcessing = false;
        }
    }

    /**
     * Process batch of SMS codes to fetch entity information
     * @param {Array} headers - Array of SMS codes to process
     * @param {Object} smsHeaders - SMS headers data for updating the table
     * @param {number} startIndex - Starting index for processing
     * @param {number} batchSize - Batch size for processing
     */
    fetchEntityBatch(headers, smsHeaders, startIndex = 0, batchSize = 100) {
        if (startIndex >= headers.length) {
            // All headers processed
            this.saveCache();
            return;
        }

        // Get current batch
        const batch = headers.slice(startIndex, startIndex + batchSize);
        const promises = [];

        // Process each header in the batch
        for (const code of batch) {
            promises.push(
                this.fetchEntityInfo(code)
                    .then(info => {
                        // Update headers object with fetched data
                        if (smsHeaders && smsHeaders[code]) {
                            smsHeaders[code].entityName = info.entityName;
                            smsHeaders[code].purpose = info.purpose;
                        }

                        // Update the table
                        this.updateEntityInfoInTable(code, info);
                    })
                    .catch(err => {
                        console.warn(`Error fetching data for SMS code ${code}:`, err);
                    })
            );
        }

        // When all batch requests complete, process next batch
        Promise.all(promises)
            .then(() => {
                // Process next batch with a small delay to avoid UI blocking
                setTimeout(() => {
                    this.fetchEntityBatch(headers, smsHeaders, startIndex + batchSize, batchSize);
                }, 5);
            });
    }

    /**
     * Preload SMS data from multiple files (for background processing)
     * @param {Array} files - Array of file objects with data
     */
    preloadDataFromFiles(files) {
        // Check input validity
        if (!files || !files.length) return;

        const smsHeadersSet = new Set();

        // Extract SMS headers from all files
        files.forEach(file => {
            if (!file || !file.data || !file.data.length) return;

            const data = file.data;
            const headerRow = data[0];
            const bPartyIndex = headerRow.indexOf('B Party');

            // Skip if B Party column not found
            if (bPartyIndex === -1) return;

            // Extract SMS headers from each row
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (!row || !row[bPartyIndex]) continue;

                const bParty = row[bPartyIndex];

                // Filter SMS headers (less than 10 digits or non-numeric)
                if (bParty && (bParty.length < 10 || /[^0-9]/.test(bParty))) {
                    const smsCode = this.parseSMSHeader(bParty);
                    if (smsCode) {
                        smsHeadersSet.add(smsCode);
                    }
                }
            }
        });

        // Convert SMS headers to array
        const smsHeadersArray = Array.from(smsHeadersSet);



        // Filter headers that aren't already in cache
        const headersToFetch = smsHeadersArray.filter(code =>
            !this.entityCache[code] ||
            this.entityCache[code].entityName === 'Loading...' ||
            this.entityCache[code].entityName === 'Error'
        );

        // Fetch in background if there are headers to fetch
        if (headersToFetch.length > 0) {

            this.preloadEntityBatch(headersToFetch);
        }
    }

    /**
     * Preload entity batch in background (without UI updates)
     * @param {Array} headers - Array of SMS codes to process
     * @param {number} startIndex - Starting index for processing
     * @param {number} batchSize - Batch size for processing
     */
    preloadEntityBatch(headers, startIndex = 0, batchSize = 5) {
        if (startIndex >= headers.length) {

            this.saveCache(); // Save all preloaded data to cache
            return;
        }

        // Get current batch
        const batch = headers.slice(startIndex, startIndex + batchSize);
        const fetchPromises = [];

        // For each header in this batch
        for (const smsCode of batch) {
            // Skip if already in cache
            if (this.entityCache[smsCode] &&
                this.entityCache[smsCode].entityName !== 'Loading...' &&
                this.entityCache[smsCode].entityName !== 'Error') continue;

            // Otherwise fetch
            const promise = this.fetchEntityInfo(smsCode)
                .catch(err => {
                    console.warn(`Error prefetching data for SMS code ${smsCode}:`, err);
                });

            fetchPromises.push(promise);
        }

        // Process next batch after current batch completes
        Promise.all(fetchPromises)
            .then(() => {
                // Save cache at regular intervals
                if ((startIndex + batchSize) % 5 === 0) {
                    this.saveCache();
                }

                // Process next batch with a small delay
                setTimeout(() => {
                    this.preloadEntityBatch(headers, startIndex + batchSize, batchSize);
                }, 10);
            });
    }

    /**
     * Update entity info in the DataTable if it's still displayed
     * @param {string} smsCode - SMS code to update
     * @param {Object} info - Entity information object
     */
    updateEntityInfoInTable(smsCode, info) {
        // Get table rows from DataTable
        const tableRows = document.querySelectorAll('#table-body tr');

        // Look for row with this SMS code
        for (const row of tableRows) {
            const cells = row.querySelectorAll('td');
            if (cells.length >= 4 && cells[0].textContent === smsCode) {
                // Update entity name and purpose cells
                cells[2].textContent = info.entityName;
                cells[3].textContent = info.purpose;
                break;
            }
        }
    }

    /**
     * Parse SMS header to extract a valid code
     * @param {string} text - SMS header text
     * @returns {string} - Parsed SMS code
     */
    parseSMSHeader(text) {
        if (!text) return '';

        // Common formats: 'VK-VICARS', 'DOMINO', 'AD-FLIPKT', etc.
        if (text.length <= 6) return text;

        // If there's a dash, take the part after it if it's 6 chars or less
        if (text.includes('-')) {
            const parts = text.split('-');
            if (parts[1] && parts[1].length <= 6) {
                return parts[1];
            }
        }

        // Return first 6 chars as fallback
        return text.substring(0, 6);
    }

    /**
     * Fetch entity information from API
     * @param {string} smsCode - SMS code to fetch information for
     * @returns {Promise<Object>} - Entity information object
     */
    async fetchEntityInfo(smsCode) {
        // Return from cache if available with valid data
        if (this.entityCache[smsCode] &&
            this.entityCache[smsCode].entityName !== 'Loading...' &&
            this.entityCache[smsCode].entityName !== 'Error') {
            return this.entityCache[smsCode];
        }

        try {
            const response = await fetch(`https://investigationcamp.com/sms_header.php?header=${smsCode}`);
            const data = await response.json();

            let entityInfo = {
                entityName: 'Unknown',
                purpose: 'Unknown'
            };

            if (Array.isArray(data) && data.length > 0) {
                entityInfo = {
                    entityName: data[0].Entity_Name || 'Unknown',
                    purpose: data[0].Purpose || 'Unknown'
                };
            }

            // Cache the result
            this.entityCache[smsCode] = entityInfo;

            return entityInfo;
        } catch (error) {
            console.error(`Error fetching entity info for ${smsCode}:`, error);
            return { entityName: 'Error', purpose: 'Error fetching data' };
        }
    }

    /**
     * Clean up resources and reset state
     */
    cleanup() {
        // Save cache before cleanup
        this.saveCache();

        // Reset state
        this.activeTab = null;
        this.data = null;
        this.isProcessing = false;
        this.isProcessingQueue = false;
        this.requestQueue = [];

        // Reload original data if possible
        if (window.activeTab) {
            DB.getFileById(window.activeTab)
                .then(file => {
                    if (file && file.data) {
                        DataTable.loadData(file.data, file.id);
                    }
                })
                .catch(err => console.error('Error restoring data:', err));
        }
    }
}

// Export the module
const smsAnalysis = new SMSAnalysis();

cdr.html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CDR Analysis Tool</title>
    <link rel="stylesheet" href="styles.css" />
    <link rel="stylesheet" href="analysis.css" />
    <link rel="stylesheet" href="modern-cdr.css" />
    <script
      type="text/javascript"
      src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"
    ></script>
    <link
      rel="stylesheet"
      type="text/css"
      href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@zip.js/zip.js/dist/zip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-4HE0LMZ4LJ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-4HE0LMZ4LJ');
</script>
  </head>
  <body>
    <div class="app-container">
      <header class="app-header">
        <h1 class="app-title">Investigation Camp | CDR Processor</h1>
        <div class="header-actions">
          <!-- Upload dropdown will be added by JavaScript -->
          <!-- <div class="upload-dropdown" id="upload-dropdown-container">...</div> -->

          <div
            class="header-dropdown-container"
            id="case-file-dropdown-container"
          >
            <button id="case-file-dropdown-btn" class="btn btn-primary">
              Select Cases & Files
              <svg class="icon" viewBox="0 0 24 24">
                <path d="M7 10l5 5 5-5"></path>
              </svg>
            </button>
            <div class="header-dropdown-menu" id="case-file-dropdown-menu">
              <div class="dropdown-search">
                <input
                  type="text"
                  placeholder="Search cases and files..."
                  id="header-case-search"
                />
              </div>
              <div class="dropdown-items" id="header-case-items-container">
                <!-- Cases and files will be populated here -->
              </div>
              <div class="dropdown-footer">
                <button class="btn btn-success" id="header-load-btn" disabled>
                  Load Selected Files
                </button>
              </div>
            </div>
          </div>
          <button id="export-btn" class="btn btn-success">
            <svg class="icon" viewBox="0 0 24 24">
              <path
                d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4M7 10l5 5 5-5M12 15V3"
              ></path>
            </svg>
            Export
          </button>
          <button id="cdr-manager-btn" class="btn btn-secondary">
            <svg class="icon" viewBox="0 0 24 24">
              <path
                d="M3 6h18M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"
              ></path>
            </svg>
            CDR Manager
          </button>
          <button
            id="fullscreen-btn"
            class="btn-icon"
            title="Toggle Fullscreen"
          >
            <svg class="icon" viewBox="0 0 24 24">
              <path d="M4 4h16v16H4V4m2 4v10h12V8H6z" />
            </svg>
          </button>
        </div>
      </header>

      <div class="tabs-container" id="file-tabs-container">
        <!-- File tabs will be generated dynamically -->
      </div>

      <div class="subtabs-container" id="analysis-tabs-container">
        <!-- Analysis subtabs will be generated dynamically -->
      </div>

      <div class="main-content">
        <div class="data-table-container">
          <div class="toolbar">
            <div class="toolbar-title">Advanced Data Table</div>

            <div class="toolbar-actions">
              <div class="search-container">
                <div class="search-icon">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path
                      d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z"
                    ></path>
                  </svg>
                </div>
                <input
                  type="text"
                  class="search-input"
                  id="global-search"
                  placeholder="Search in table..."
                />
              </div>
              <button class="btn btn-outline" id="btn-columns">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M3 9H21M3 15H21M12 3V21"></path>
                </svg>
              </button>
              <button class="btn btn-outline" id="btn-copy">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path
                    d="M8 4V16C8 17.1046 8.89543 18 10 18H18C19.1046 18 20 17.1046 20 16V7.41421C20 6.88378 19.7893 6.37507 19.4142 6L16 2.58579C15.6249 2.21071 15.1162 2 14.5858 2H10C8.89543 2 8 2.89543 8 4Z"
                  ></path>
                  <path d="M16 2V6C16 6.55228 16.4477 7 17 7H20"></path>
                  <path
                    d="M16 18V20C16 21.1046 15.1046 22 14 22H6C4.89543 22 4 21.1046 4 20V8C4 6.89543 4.89543 6 6 6H8"
                  ></path>
                </svg>
              </button>
              <button
                class="btn btn-icon"
                id="btn-fullscreen-table"
                title="Toggle Table Fullscreen"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path
                    d="M8 3H5a2 2 0 00-2 2v3m18 0V5a2 2 0 00-2-2h-3m0 18h3a2 2 0 002-2v-3M3 16v3a2 2 0 002 2h3"
                  ></path>
                </svg>
              </button>
              <div class="navigation-controls">
                <button class="nav-btn" id="btn-first-page" title="First Page">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M19 12H5M12 19l-7-7 7-7"></path>
                  </svg>
                </button>
                <button class="nav-btn" id="btn-last-page" title="Last Page">
                  <svg
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  >
                    <path d="M5 12h14M12 5l7 7-7 7"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          <div class="table-wrapper" id="table-wrapper">
            <table id="data-table">
              <thead id="table-header">
                <!-- Table headers will be inserted here -->
              </thead>
              <tbody id="table-body">
                <!-- Table data will be inserted here -->
              </tbody>
            </table>
            <div class="loading-indicator" id="loading-indicator">
              Loading more data...
            </div>
            <div
              class="no-data-message"
              id="no-data-message"
              style="display: none"
            >
              No data available
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Column Visibility Menu -->
    <div class="column-visibility-menu" id="column-visibility-menu">
      <div class="dropdown-header">
        <div class="dropdown-title">Visible Columns</div>
        <button class="dropdown-close" id="close-visibility-menu">✕</button>
      </div>
      <div class="dropdown-content" id="visibility-menu-content">
        <!-- Column visibility options will be inserted here -->
      </div>
    </div>

    <!-- Context Menu -->
    <div class="context-menu" id="context-menu" style="display: none">
      <div class="context-menu-item" id="context-menu-copy">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path
            d="M8 4V16C8 17.1046 8.89543 18 10 18H18C19.1046 18 20 17.1046 20 16V7.41421C20 6.88378 19.7893 6.37507 19.4142 6L16 2.58579C15.6249 2.21071 15.1162 2 14.5858 2H10C8.89543 2 8 2.89543 8 4Z"
          ></path>
          <path d="M16 2V6C16 6.55228 16.4477 7 17 7H20"></path>
          <path
            d="M16 18V20C16 21.1046 15.1046 22 14 22H6C4.89543 22 4 21.1046 4 20V8C4 6.89543 4.89543 6 6 6H8"
          ></path>
        </svg>
        Copy Selection
      </div>
    </div>

    <!-- Simplified Upload Dialog -->
    <div class="overlay" id="simplified-upload-overlay">
      <div class="dialog">
        <div class="dialog-header">
          <div class="dialog-title">File Upload Options</div>
          <button class="dialog-close" id="simplified-close">&times;</button>
        </div>
        <div class="dialog-body">
          <div class="option-buttons">
            <label class="option-button" for="simplified-new-case">
              <input
                type="radio"
                id="simplified-new-case"
                name="simplified-case-option"
                value="new"
                checked
              />
              <span>Create New Case</span>
            </label>
            <label class="option-button" for="simplified-existing-case">
              <input
                type="radio"
                id="simplified-existing-case"
                name="simplified-case-option"
                value="existing"
              />
              <span>Add to Existing Case</span>
            </label>
          </div>

          <!-- New Case Form -->
          <div id="simplified-new-case-form">
            <div class="form-group">
              <label for="simplified-case-number">Case Number:</label>
              <input
                type="text"
                id="simplified-case-number"
                class="form-control"
                placeholder="Enter unique case number"
              />
            </div>
            <div class="form-group">
              <label for="simplified-victim-name">Victim Name:</label>
              <input
                type="text"
                id="simplified-victim-name"
                class="form-control"
                placeholder="Enter victim name"
              />
            </div>
            <div class="form-group">
              <label for="simplified-case-sections">Sections:</label>
              <input
                type="text"
                id="simplified-case-sections"
                class="form-control"
                placeholder="Enter applicable sections"
              />
            </div>
            <div class="form-group">
              <label for="simplified-case-description">Case Description:</label>
              <textarea
                id="simplified-case-description"
                class="form-control"
                placeholder="Enter case description"
              ></textarea>
            </div>
          </div>

          <!-- Existing Case Form -->
          <div id="simplified-existing-case-form" style="display: none">
            <div class="form-group">
              <label for="simplified-existing-case-select">Select Case:</label>
              <div class="dropdown-select-container">
                <select
                  id="simplified-existing-case-select"
                  class="dropdown-select"
                >
                  <option value="" disabled selected>Select a case</option>
                  <!-- Cases will be populated here -->
                </select>
              </div>
            </div>
          </div>
        </div>
        <div class="dialog-footer">
          <button class="btn btn-outline" id="simplified-cancel">Cancel</button>
          <button class="btn btn-success" id="simplified-continue">
            Continue
          </button>
        </div>
      </div>
    </div>

    <!-- Upload/Select Dialog -->
    <div class="overlay" id="upload-select-overlay">
      <div class="dialog">
        <div class="dialog-header">
          <div class="dialog-title">Upload/Select Files</div>
          <button class="dialog-close" id="close-upload-select-dialog">
            &times;
          </button>
        </div>
        <div class="dialog-body">
          <!-- Upload/Select Options -->
          <div class="option-buttons">
            <label class="option-button" for="option-upload">
              <input
                type="radio"
                id="option-upload"
                name="upload-option"
                value="upload"
              />
              <span>Upload New Files</span>
            </label>
            <label class="option-button" for="option-select">
              <input
                type="radio"
                id="option-select"
                name="upload-option"
                value="select"
              />
              <span>Select Existing Files</span>
            </label>
          </div>

          <!-- Upload New Files Content -->
          <div id="upload-option-content" style="display: none">
            <!-- File Selection Button -->
            <div class="file-upload-btn-container">
              <button
                id="select-files-btn"
                class="btn btn-primary btn-with-icon"
              >
                <svg class="icon" viewBox="0 0 24 24">
                  <path
                    d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4M17 8l-5-5-5 5M12 3v12"
                  ></path>
                </svg>
                Select Files
              </button>
              <div id="selected-files-count" class="selected-files-count">
                No files selected
              </div>
              <input
                type="file"
                id="file-input"
                multiple
                style="display: none"
              />
            </div>

            <!-- Case Options (displayed after files are selected) -->
            <div id="case-options" style="display: none; margin-top: 20px">
              <div class="option-buttons">
                <label class="option-button" for="new-case">
                  <input
                    type="radio"
                    id="new-case"
                    name="case-option"
                    value="new"
                  />
                  <span>Create New Case</span>
                </label>
                <label class="option-button" for="existing-case">
                  <input
                    type="radio"
                    id="existing-case"
                    name="case-option"
                    value="existing"
                  />
                  <span>Add to Existing Case</span>
                </label>
              </div>

              <!-- New Case Form -->
              <div id="new-case-form" style="display: none">
                <div class="form-group">
                  <label for="case-number">Case Number:</label>
                  <input
                    type="text"
                    id="case-number"
                    class="form-control"
                    placeholder="Enter unique case number"
                  />
                </div>
                <div class="form-group">
                  <label for="victim-name">Victim Name:</label>
                  <input
                    type="text"
                    id="victim-name"
                    class="form-control"
                    placeholder="Enter victim name"
                  />
                </div>
                <div class="form-group">
                  <label for="case-sections">Sections:</label>
                  <input
                    type="text"
                    id="case-sections"
                    class="form-control"
                    placeholder="Enter applicable sections"
                  />
                </div>
                <div class="form-group">
                  <label for="case-description">Case Description:</label>
                  <textarea
                    id="case-description"
                    class="form-control"
                    placeholder="Enter case description"
                  ></textarea>
                </div>
              </div>

              <!-- Existing Case Form -->
              <div id="existing-case-form" style="display: none">
                <div class="form-group">
                  <label for="existing-case-select">Select Case:</label>
                  <div class="dropdown-select-container">
                    <select id="existing-case-select" class="dropdown-select">
                      <option value="" disabled selected>Select a case</option>
                      <!-- Cases will be populated here -->
                    </select>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Select Existing Files Content -->
          <div id="select-option-content" style="display: none">
            <div class="form-group">
              <label for="select-cases-container">Select Cases:</label>
              <div
                class="custom-dropdown-container"
                id="select-cases-container"
              >
                <div class="custom-dropdown-header">
                  <span class="selected-count">No cases selected</span>
                  <span class="dropdown-arrow">▼</span>
                </div>
                <div class="custom-dropdown-menu">
                  <div class="dropdown-search">
                    <input
                      type="text"
                      placeholder="Search cases..."
                      id="case-search-input"
                    />
                  </div>
                  <div class="dropdown-items" id="case-items-container">
                    <!-- Cases will be populated here -->
                  </div>
                </div>
              </div>
            </div>

            <div class="form-group">
              <label for="select-files-container">Select Files:</label>
              <div
                class="custom-dropdown-container"
                id="select-files-container"
              >
                <div class="custom-dropdown-header">
                  <span class="selected-count">No files selected</span>
                  <span class="dropdown-arrow">▼</span>
                </div>
                <div class="custom-dropdown-menu">
                  <div class="dropdown-search">
                    <input
                      type="text"
                      placeholder="Search files..."
                      id="file-search-input"
                    />
                  </div>
                  <div class="dropdown-items" id="file-items-container">
                    <!-- Files will be populated here -->
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="dialog-footer">
          <button class="btn btn-outline" id="cancel-upload-select">
            Cancel
          </button>
          <button class="btn btn-success" id="confirm-upload-select" disabled>
            Continue
          </button>
        </div>
      </div>
    </div>

    <!-- Export Dialog -->
    <div class="overlay" id="export-overlay">
      <div class="dialog">
        <div class="dialog-header">
          <div class="dialog-title">Export Options</div>
          <button class="dialog-close" id="close-export-dialog">&times;</button>
        </div>
        <div class="dialog-body">
          <div class="option-group">
            <div class="option-group-title">Export Scope:</div>
            <div class="radio-options">
              <label class="radio-option">
                <input
                  type="radio"
                  name="export-scope"
                  value="current-file-current-analysis"
                  checked
                />
                <span>Current File, Current Analysis</span>
              </label>
              <label class="radio-option">
                <input
                  type="radio"
                  name="export-scope"
                  value="current-file-all-analysis"
                />
                <span>Current File, All Analysis</span>
              </label>
              <label class="radio-option">
                <input
                  type="radio"
                  name="export-scope"
                  value="all-files-current-analysis"
                />
                <span>All Selected Files, Current Analysis</span>
              </label>
              <label class="radio-option">
                <input
                  type="radio"
                  name="export-scope"
                  value="all-files-all-analysis"
                />
                <span>All Selected Files, All Analysis</span>
              </label>
            </div>
          </div>
          <div class="option-group">
            <div class="option-group-title">Export Format:</div>
            <div class="radio-options">
              <label class="radio-option">
                <input
                  type="radio"
                  name="export-format"
                  value="excel"
                  checked
                />
                <span>Excel (.xlsx)</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="export-format" value="pdf" />
                <span>PDF Document</span>
              </label>
            </div>
          </div>
        </div>
        <div class="dialog-footer">
          <button class="btn btn-outline" id="cancel-export">Cancel</button>
          <button class="btn btn-success" id="confirm-export">Export</button>
        </div>
      </div>
    </div>

    <!-- CDR Manager Dialog -->
    <div class="overlay" id="cdr-manager-overlay">
      <div class="dialog manager-dialog">
        <div class="dialog-header">
          <div class="dialog-title">CDR Manager</div>
          <button class="dialog-close" id="close-cdr-manager">&times;</button>
        </div>
        <div class="dialog-body">
          <div class="form-group">
            <label for="manager-case-select">Select Case:</label>
            <div class="custom-select">
              <select id="manager-case-select" class="dropdown-select">
                <option value="">All Cases</option>
                <!-- Cases will be populated here -->
              </select>
            </div>
          </div>

          <div class="table-wrapper">
            <table class="manager-table" id="cdr-manager-table">
              <thead>
                <tr>
                  <th>Case Number</th>
                  <th>Victim Name</th>
                  <th>File Name</th>
                  <th>Operator</th>
                  <th>Upload Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="cdr-manager-body">
                <!-- CDR files will be populated here -->
              </tbody>
            </table>
            <div id="manager-no-data" class="hidden">No CDR files found.</div>
          </div>
        </div>
        <div class="dialog-footer">
          <button class="btn btn-danger" id="delete-case-btn" disabled>
            Delete Selected Case
          </button>
          <button class="btn btn-outline" id="close-manager">Close</button>
        </div>
      </div>
    </div>

    <!-- Copy Selection Button Template -->
    <button
      id="copy-selection-btn"
      class="copy-selection-btn"
      style="display: none"
    >
      <svg
        width="14"
        height="14"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <path
          d="M8 4V16C8 17.1046 8.89543 18 10 18H18C19.1046 18 20 17.1046 20 16V7.41421C20 6.88378 19.7893 6.37507 19.4142 6L16 2.58579C15.6249 2.21071 15.1162 2 14.5858 2H10C8.89543 2 8 2.89543 8 4Z"
        ></path>
        <path d="M16 2V6C16 6.55228 16.4477 7 17 7H20"></path>
        <path
          d="M16 18V20C16 21.1046 15.1046 22 14 22H6C4.89543 22 4 21.1046 4 20V8C4 6.89543 4.89543 6 6 6H8"
        ></path>
      </svg>
    </button>

    <!-- Toast Container -->
    <div class="toast-container" id="toast-container">
      <!-- Toasts will be added here -->
    </div>

    <!-- Add new file inputs for uploads -->
    <input type="file" id="header-file-input" multiple style="display: none" />
    <input
      type="file"
      id="header-folder-input"
      webkitdirectory
      directory
      multiple
      style="display: none"
    />

    <!-- Core utility and database libraries -->
    <script src="constants.js"></script>
    <script src="db.js"></script>
    <script src="duplicate-detector.js"></script>
    <script src="jio_call_type_service_type.js"></script>
    <script src="cdr-processor.js"></script>
    <script src="table.js"></script>
    <script src="export.js"></script>
    <script src="tab-controller.js"></script>
    <script src="uiManager.js"></script>
    <script src="fileManager.js"></script>
    <script src="analysisController.js"></script>
    <script src="app.js"></script>
    <script src="utils/dateFormatter.js"></script>
    <script src="analysis/basic.js"></script>
    <script src="analysis/max-stay.js"></script>
    <script src="analysis/location.js"></script>
    <script src="analysis/sms.js"></script>
    <script src="analysis/common.js"></script>
    <script src="analysis/mobile-brief.js"></script>
    <script src="analysis/network-graph.js"></script>

    <!-- Additional script for modern UI initialization -->
    <script>
      // Initialize the modern UI components after DOM is loaded
      document.addEventListener("DOMContentLoaded", function () {
        // Setup upload dropdown
        if (typeof UIManager.setupUploadDropdown === "function") {
          UIManager.setupUploadDropdown();
        }

        // Update all button IDs to ensure they're properly styled
        document.querySelectorAll(".dialog-footer button").forEach((button) => {
          if (button.textContent.trim().toLowerCase().includes("delete")) {
            button.classList.add("btn", "btn-danger");
          } else if (
            button.textContent.trim().toLowerCase().includes("cancel")
          ) {
            button.classList.add("btn", "btn-outline");
          } else {
            button.classList.add("btn", "btn-success");
          }
        });

        // Make sure toast container exists
        if (!document.getElementById("toast-container")) {
          const toastContainer = document.createElement("div");
          toastContainer.id = "toast-container";
          toastContainer.className = "toast-container";
          document.body.appendChild(toastContainer);
        }

        // Show initial toast to confirm modernization is active
        if (
          typeof DataTable !== "undefined" &&
          typeof DataTable.showToast === "function"
        ) {
          setTimeout(() => {
            DataTable.showToast(
              "Modern UI initialized successfully",
              "success"
            );
          }, 1000);
        }
      });
    </script>
  </body>
</html>

analysiscontroller.js:
// analysisController.js - Analysis management and visualization
const AnalysisController = (() => {
    // Store filter states for different analysis types
    const filterStates = {};
    
    // Initialize analysis controller
    function init() {
        // Initial setup
        initAnalysisTabs();
    }

    // Initialize analysis tabs event listeners
    function initAnalysisTabs() {
        const analysisTabsContainer = document.getElementById('analysis-tabs-container');
        if (!analysisTabsContainer) return;

        analysisTabsContainer.addEventListener('click', (event) => {
            const tabElement = event.target.closest('.subtab');
            if (!tabElement) return;

            const tabId = tabElement.getAttribute('data-id');
            if (tabId) switchToAnalysis(tabId);
        });
    }

    // Switch to a specific analysis tab
    function switchToAnalysis(analysisType, data) {
        // Save current filter state before switching
        if (window.appState.activeSubtab && window.DataTable && typeof window.DataTable.saveFilterState === 'function') {
            window.DataTable.saveFilterState(window.appState.activeSubtab);
        }
        
        // Clean up previous analysis
        cleanupPreviousAnalysis();
        hideAnalysisContainers();

        if (analysisType !== 'cdr') {
            showLoadingIndicator(true);
        }

        window.appState.activeSubtab = analysisType;

        switch (analysisType) {
            case 'cdr':
                if (window.appState.activeTab) {
                    DB.getFileById(window.appState.activeTab)
                        .then(file => {
                            if (file) {
                                DataTable.loadData(file.data, file.id);
                                
                                // Restore filter state after loading data
                                if (typeof DataTable.restoreFilterState === 'function') {
                                    setTimeout(() => {
                                        DataTable.restoreFilterState(analysisType);
                                    }, 100);
                                }
                            }
                        })
                        .catch(err => {
                            console.error('Error loading file data:', err);
                            DataTable.showToast(`Error loading data: ${err.message}`, 'error');
                        });
                }
                break;

            case 'maximum-b-party': // Updated from 'b-party'
            case 'max-imei':
            case 'max-imsi':
                window.basicAnalysis.init(window.appState.activeTab, analysisType)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error(`Error in ${analysisType} analysis:`, err);
                        DataTable.showToast(`Error processing data: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;
                
            // Add new cases for day and night stay
            case 'max-day-stay':
                window.dayStayAnalysis.init(window.appState.activeTab)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in day stay analysis:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'max-night-stay':
                window.nightStayAnalysis.init(window.appState.activeTab)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in night stay analysis:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'call-max-location':
                locationAnalysis.init(window.appState.activeTab)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in location analysis:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'sms-analysis':
                smsAnalysis.init(window.appState.activeTab)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in SMS analysis:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'common-b-party':
            case 'common-imei':
                commonAnalysis.init(window.appState.activeFiles, analysisType)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error(`Error in ${analysisType} analysis:`, err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'mobile-brief':
                // activeFiles के सभी IDs पास करें
                mobileBriefAnalysis.init(window.appState.activeFiles)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in mobile brief analysis:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            case 'network-graph':
                createOrGetNetworkContainer();

                networkGraph.init(window.appState.activeFiles)
                    .then(() => {
                        showLoadingIndicator(false);
                        
                        // Restore filter state
                        if (typeof DataTable.restoreFilterState === 'function') {
                            setTimeout(() => {
                                DataTable.restoreFilterState(analysisType);
                            }, 100);
                        }
                    })
                    .catch(err => {
                        console.error('Error in network graph:', err);
                        DataTable.showToast(`Error: ${err.message}`, 'error');
                        showLoadingIndicator(false);
                    });
                break;

            default:
                DataTable.showToast(`${analysisType} analysis not implemented yet`, 'info');
                showLoadingIndicator(false);
        }
    }

    // Create or get the network container
    function createOrGetNetworkContainer() {
        let networkContainer = document.getElementById('network-container');
        if (!networkContainer) {
            networkContainer = document.createElement('div');
            networkContainer.id = 'network-container';
            networkContainer.style.width = '100%';
            networkContainer.style.height = '600px';
            document.getElementById('table-wrapper').appendChild(networkContainer);
        }
        networkContainer.style.display = 'block';
    }

    // Clean up previous analysis
    function cleanupPreviousAnalysis() {
        const modules = [locationAnalysis, networkGraph, window.basicAnalysis,
            smsAnalysis, commonAnalysis, mobileBriefAnalysis,
            window.dayStayAnalysis, window.nightStayAnalysis];
    
        modules.forEach(module => {
            if (module && typeof module.cleanup === 'function') {
                module.cleanup();
            }
        });
    }

    // Hide analysis containers
    function hideAnalysisContainers() {
        ['map-container', 'network-container'].forEach(id => {
            const container = document.getElementById(id);
            if (container) container.style.display = 'none';
        });
    }

    // Show/hide loading indicator
    function showLoadingIndicator(show) {
        const loadingIndicator = document.getElementById('loading-indicator');
        if (loadingIndicator) loadingIndicator.style.display = show ? 'block' : 'none';
    }

    // Export functionality
    function exportCurrentAnalysis(format) {
        const options = {
            scope: 'current-file-current-analysis',
            fileIds: window.appState.activeFiles,
            analysisTypes: [window.appState.activeSubtab],
            currentAnalysis: window.appState.activeSubtab,
            fileName: `cdr-export-${new Date().toISOString().split('T')[0]}.${format === 'excel' ? 'xlsx' : 'pdf'}`
        };

        if (format === 'excel') {
            ExportManager.exportToExcel(options);
        } else {
            ExportManager.exportToPDF(options);
        }
    }

    // Public API
    return {
        init,
        switchToAnalysis,
        cleanupPreviousAnalysis,
        showLoadingIndicator,
        hideAnalysisContainers,
        exportCurrentAnalysis
    };
})();

// Make it globally available
window.AnalysisController = AnalysisController;

app.js:
// app.js - Main application coordinator (restructured)
document.addEventListener('DOMContentLoaded', () => {
    // Initialize system components in sequence
    DB.init().then(() => {
        DataTable.init();
        // Initialize our managers in correct order
        FileManager.init();
        UIManager.init();
        AnalysisController.init();

        // Set up shared event listener
        setupGlobalEventListeners();
        setupUploadDropdown(); // <-- Add this line after setupGlobalEventListeners()
    }).catch(error => {
        console.error('Error initializing database:', error);
        alert('Failed to initialize database. Please try again.');
    });
});

// Global variables now shared via the window object for module access
window.appState = {
    activeTab: null,
    activeSubtab: 'cdr',
    activeFiles: [],
    selectedCaseIds: []
};

// Set up global event listeners
function setupGlobalEventListeners() {
    // Global document listeners
    document.addEventListener('click', handleOutsideClick);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);

    // Initialize feature buttons
    setupFeatureButtons();
}

// Handle clicks outside of dropdowns, etc.
function handleOutsideClick(e) {
    UIManager.handleOutsideClick(e);
}

// Handle keyboard shortcuts
function handleKeyDown(e) {
    if (e.key === 'Control') {
        window.isMultiSelecting = true;
    }
}

function handleKeyUp(e) {
    if (e.key === 'Control') {
        window.isMultiSelecting = false;
    }
}

// Set up main feature buttons
function setupFeatureButtons() {
    document.getElementById('cdr-manager-btn')?.addEventListener('click', UIManager.openCDRManager);
    document.getElementById('export-btn')?.addEventListener('click', UIManager.showExportDialog);
    document.getElementById('fullscreen-btn')?.addEventListener('click', toggleFullscreen);
}

// Toggle application fullscreen
function toggleFullscreen() {
    const appContainer = document.querySelector('.app-container');

    if (!document.fullscreenElement) {
        appContainer.requestFullscreen().catch(e => console.error(e));
    } else {
        document.exitFullscreen().catch(e => console.error(e));
    }
}

// Global handler for analysis tab switching - remains in app.js as central dispatcher
window.handleAnalysisTabSwitch = function (subtabId, data) {
    AnalysisController.switchToAnalysis(subtabId, data);
};

// Add this function at the end of the file
function setupUploadDropdown() {
    // This function will be implemented in uiManager.js for better separation.
    if (UIManager && typeof UIManager.setupUploadDropdown === 'function') {
        UIManager.setupUploadDropdown();
    }
}

cdr-processor.js:
// cdr-processor.js - CDR data processing functions
const CDRProcessor = (() => {
    // Use constants from global AppConstants object
    const headerMappings = AppConstants.HEADER_MAPPINGS;
    const operatorColors = AppConstants.OPERATOR_COLORS;
    const footerPatterns = AppConstants.FOOTER_PATTERNS;

    // Check if a line is a footer line
    const isFooterLine = (line, op) => {
        if (!op) return false;

        // Check for "CDR COUNT" pattern for all operators
        if (line.includes("CDR COUNT")) return true;

        // Check operator-specific patterns
        if (footerPatterns[op]) {
            return footerPatterns[op].some(pattern => line.includes(pattern));
        }

        return false;
    };

    // Process raw CDR data
    const cleanCDRData = (data, fileName) => {
        const lines = data.trim().split('\n');
        let cleanedData = [];
        let headerFound = false;
        let operator = null;
        let headerRow = null;
        let callingPartyIndex = -1;
        let calledPartyIndex = -1;
        let callTypeIndex = -1;
        let deleteNextLine = false;
        let blankRowFound = false;

        // Determine separator (tab or comma)
        const firstLine = lines[0];
        let separator = ',';

        if (firstLine.includes('\t')) {
            separator = '\t';
        }

        for (let i = 0; i < lines.length; i++) {
            let line = lines[i].trim();

            // Skip empty lines
            if (!line) continue;

            // Check for footer lines after header is found
            if (headerFound && isFooterLine(line, operator)) {
                continue;
            }

            let row;

            // Split line based on separator
            if (separator === '\t') {
                row = line.split('\t').map(cell => cell.trim());
            } else {
                // Better CSV parsing
                row = parseCSVLine(line);
            }

            // Remove empty last cell if present
            if (row[row.length - 1] === '') {
                row.pop();
            }

            if (!headerFound) {
                operator = identifyOperator(row);
                if (operator) {
                    headerRow = row;
                    headerFound = true;
                    if (operator === 'VI') {
                        deleteNextLine = true;
                    }

                    if (operator === 'Jio') {
                        callingPartyIndex = headerRow.findIndex(
                            header => header === 'Calling Party Telephone Number'
                        );
                        calledPartyIndex = headerRow.findIndex(
                            header => header === 'Called Party Telephone Number'
                        );
                        callTypeIndex = headerRow.findIndex(
                            header => header === 'Call Type'
                        );
                    }
                    continue;
                }
            } else {
                if (deleteNextLine) {
                    deleteNextLine = false;
                    continue;
                }

                // Skip if row is empty
                if (row.every(cell => cell.trim().length === 0)) {
                    blankRowFound = true;
                    continue;
                }

                // Stop processing after blank row (footer data)
                if (blankRowFound && row.length < headerRow.length) {
                    break;
                }

                // Clean each cell
                const cleanedRow = row.map((cell, index) => {
                    // Safety check for index out of bounds
                    if (index >= headerRow.length) {
                        return cell;
                    }

                    // First remove quotes and equal signs
                    let cleanedCell = cell.replace(/['"]/g, '');
                    if (operator === 'BSNL' && cleanedCell.startsWith('=')) {
                        cleanedCell = cleanedCell.substring(1);
                    }
                    // LRN handling - remove decimal points from LRN values
                    if (headerRow[index] === 'LRN No' && cleanedCell) {
                        // Convert to string, remove decimal part if it's zero
                        cleanedCell = String(cleanedCell).replace(/\.0+$/, '');
                    }

                    // Then format date if it's a date column
                    if (headerRow[index].toLowerCase().includes('date')) {
                        return formatDate(cleanedCell);
                    }

                    return cleanedCell;
                });

                // Clean phone numbers
                for (let j = 0; j < cleanedRow.length; j++) {
                    if (cleanedRow[j]) {
                        cleanedRow[j] = cleanedRow[j].replace(/['"]/g, '');

                        // Handle various phone number formats
                        if (cleanedRow[j].length === 13 && cleanedRow[j].startsWith('091')) {
                            cleanedRow[j] = cleanedRow[j].slice(3);
                        } else if (cleanedRow[j].length === 12 && cleanedRow[j].startsWith('91')) {
                            cleanedRow[j] = cleanedRow[j].slice(2);
                        } else if (cleanedRow[j].length === 11 && cleanedRow[j].startsWith('0')) {
                            cleanedRow[j] = cleanedRow[j].slice(1);
                        }
                    }
                }

                cleanedData.push(cleanedRow);
            }
        }

        if (headerRow) {
            // Special processing for VI files
            if (operator === 'VI') {
                let lastColumnIndex = cleanedData[0] ? cleanedData[0].length - 1 : -1;
                if (lastColumnIndex >= 0) {
                    cleanedData = cleanedData.filter(
                        row => row[lastColumnIndex] && row[lastColumnIndex].trim() !== ''
                    );
                }
            }

            // Apply header mapping before adding header to cleaned data
            if (operator in headerMappings) {
                const mapping = headerMappings[operator];
                headerRow = headerRow.map(header => mapping[header] || header);
            }

            // Add mapped header row to beginning of cleaned data
            cleanedData.unshift(headerRow);

            if (operator === 'Jio') {
                // Add Service Type column and update Call Type
                cleanedData = addServiceTypeColumn(cleanedData);

                // Get updated indices after adding Service Type
                callingPartyIndex = cleanedData[0].findIndex(
                    header => header === 'Target No'
                );
                calledPartyIndex = cleanedData[0].findIndex(
                    header => header === 'B Party'
                );
                callTypeIndex = cleanedData[0].findIndex(
                    header => header === 'Call Type'
                );

                // Handle number swapping for incoming calls and any call type containing 'frw'
                if (callingPartyIndex !== -1 && calledPartyIndex !== -1 && callTypeIndex !== -1) {
                    cleanedData = cleanedData.map((row, index) => {
                        if (index === 0) return row;

                        // Check if it's an incoming call or any call type containing 'frw'
                        if (row[callTypeIndex] && (
                            row[callTypeIndex].toLowerCase() === 'in' ||
                            row[callTypeIndex].toLowerCase().includes('frw')
                        )) {
                            const temp = row[callingPartyIndex];
                            row[callingPartyIndex] = row[calledPartyIndex];
                            row[calledPartyIndex] = temp;
                        }
                        return row;
                    });
                }
            }

            // Clean BSNL data (remove equal signs)
            if (operator === 'BSNL') {
                cleanedData = cleanedData.map(row =>
                    row.map(cell => {
                        if (typeof cell === 'string' && cell.startsWith('=')) {
                            return cell.substring(1);
                        }
                        return cell;
                    })
                );
            }

            // IMEI processing
            const imeiIndex = headerRow.findIndex(header => header === 'IMEI');
            if (imeiIndex !== -1) {
                for (let i = 1; i < cleanedData.length; i++) {
                    const imei = cleanedData[i][imeiIndex];
                    if (imei) {
                        if (imei.length === 15 && /^\d+$/.test(imei)) {
                            const imeiWithoutLastDigit = imei.slice(0, -1);
                            const luhnDigit = calculateLuhnDigit(imeiWithoutLastDigit);
                            cleanedData[i][imeiIndex] = imeiWithoutLastDigit + luhnDigit;
                        } else if (imei.length === 14 && /^\d+$/.test(imei)) {
                            const luhnDigit = calculateLuhnDigit(imei);
                            cleanedData[i][imeiIndex] = imei + luhnDigit;
                        }
                    }
                }
            }
        } else {
            return { cleanedData: [], operator: null };
        }

        return { cleanedData, operator };
    };

    // Helper function to parse CSV lines
    const parseCSVLine = (line) => {
        const result = [];
        let currentValue = '';
        let insideQuotes = false;

        for (let i = 0; i < line.length; i++) {
            const char = line.charAt(i);

            if (char === '"' || char === "'") {
                insideQuotes = !insideQuotes;
            } else if (char === ',' && !insideQuotes) {
                result.push(currentValue.trim());
                currentValue = '';
            } else {
                currentValue += char;
            }
        }

        // Add the last value
        result.push(currentValue.trim());

        return result;
    };

    // Identify operator from header row
    const identifyOperator = (row) => {
        if (!row || row.length === 0) return null;

        if (row.includes('Target /A PARTY NUMBER')) {
            return 'VI';
        } else if (row.includes('Target / A Party Number')) {
            return 'Jio22';
        } else if (row.some(header => header === 'Target / A Party Number' || header === 'Target /A Party Number')) {
            return 'Jio22';
        } else if (row.includes('Calling Party Telephone Number')) {
            return 'Jio';
        } else if (row.includes('Target No')) {
            return 'Airtel';
        } else if (row.includes('Target/A-Party Number')) {
            return 'BSNL';
        } else if (row.some(header => typeof header === 'string' && header.includes('BSNL'))) {
            return 'BSNL';
        }

        // Case-insensitive checks
        const lowercaseHeaders = row.map(header => typeof header === 'string' ? header.toLowerCase() : '');

        if (lowercaseHeaders.some(header => /target\s*\/\s*a\s*party\s*number/i.test(header))) {
            return 'Jio22';
        } else if (lowercaseHeaders.some(header => /bsnl|b\.s\.n\.l|target\/a-party number/i.test(header))) {
            return 'BSNL';
        }

        return null;
    };

    // Format date strings
    const formatDate = (dateStr) => {
        return DateFormatter.formatToStandard(dateStr);
    };

    // Calculate Luhn digit for IMEI
    const calculateLuhnDigit = (imei) => {
        imei = imei.replace(/[^0-9]/g, '');
        let sum = 0;
        let digit = 0;

        for (let i = 0; i < imei.length; i++) {
            digit = parseInt(imei.charAt(i));
            if (i % 2 !== 0) digit = digit * 2;
            if (digit > 9) digit = digit - 9;
            sum = sum + digit;
        }

        let luhnDigit = (10 - (sum % 10)) % 10;
        return luhnDigit.toString();
    };

    // Add depth parameter for recursive extraction (default 1, max 5)
    const processZipFile = async (file, depth = 1) => {
        const password = extractPasswordFromFilename(file.name);
        const fileBlob = file instanceof Blob ? file : new Blob([file]);
        let reader = null;

        try {
            reader = await openZipReader(fileBlob, password);
            const entries = await reader.getEntries();

            // Pass depth to processZipEntries
            const results = await processZipEntries(entries, depth);

            if (results.length === 0) {
                return [];
            }

            return results;
        } catch (error) {
            console.error('ZIP processing error:', error.message);
            throw new Error(`Failed to process ZIP file: ${error.message}`);
        } finally {
            if (reader) await reader.close().catch(() => { });
        }
    };

    // Helper function to open ZIP with password or without
    const openZipReader = async (blob, password) => {
        try {
            // First attempt with password if available
            return new zip.ZipReader(new zip.BlobReader(blob),
                password ? { password } : undefined);
        } catch (error) {
            if (!password) throw error; // No password was provided, so rethrow

            return new zip.ZipReader(new zip.BlobReader(blob));
        }
    };

    // Process all entries in the ZIP file
    // Add depth parameter for recursive extraction
    const processZipEntries = async (entries, depth = 1) => {
        const results = [];
        const entryProcessors = {
            '.zip': async (entry) => {
                if (depth >= 5) return []; // Limit to 5 levels
                const nestedZipBlob = await entry.getData(new zip.BlobWriter());
                const nestedZipFile = new File([nestedZipBlob], entry.filename);
                // Pass increased depth
                return processZipFile(nestedZipFile, depth + 1);
            },
            '.csv': processCsvEntry,
            '.xlsx': processExcelEntry,
            '.xls': processExcelEntry
        };

        for (const entry of entries) {
            if (entry.directory) continue;

            const extension = getFileExtension(entry.filename);
            const processor = entryProcessors[extension];

            if (processor) {
                try {
                    const entryResults = await processor(entry);
                    if (entryResults) {
                        Array.isArray(entryResults)
                            ? results.push(...entryResults)
                            : results.push(entryResults);
                    }
                } catch (err) {
                    console.error(`Error processing ${entry.filename}:`, err.message);
                }
            }
        }

        return results;
    };

    // Get lowercase file extension (including the dot)
    const getFileExtension = (filename) => {
        const lastDotIndex = filename.lastIndexOf('.');
        return lastDotIndex !== -1 ? filename.slice(lastDotIndex).toLowerCase() : '';
    };

    // Process a nested ZIP file
    const processNestedZip = async (entry) => {
        const nestedZipBlob = await entry.getData(new zip.BlobWriter());
        const nestedZipFile = new File([nestedZipBlob], entry.filename);
        return processZipFile(nestedZipFile);
    };

    // Process a CSV file
    const processCsvEntry = async (entry) => {
        const content = await entry.getData(new zip.TextWriter());
        const result = processFileContent(entry.filename, content);
        return result.cleanedData.length > 0 ? result : null;
    };

    // Process an Excel file
    const processExcelEntry = async (entry) => {
        const content = await entry.getData(new zip.Uint8ArrayWriter());
        const result = processExcelContent(entry.filename, content.buffer);
        return result.cleanedData.length > 0 ? result : null;
    };

    // Process CSV file
    const processCSVFile = async (file) => {
        try {
            const content = await file.text();
            const result = processFileContent(file.name, content);
            return [result];
        } catch (error) {
            console.error('Error processing CSV file:', error);
            throw new Error('Failed to process CSV file: ' + error.message);
        }
    };

    // Process Excel file
    const processExcelFile = async (file) => {
        try {
            const arrayBuffer = await file.arrayBuffer();
            const result = processExcelContent(file.name, arrayBuffer);
            return [result];
        } catch (error) {
            console.error('Error processing Excel file:', error);
            throw new Error('Failed to process Excel file: ' + error.message);
        }
    };

    // Process various file types - Main entry point
    const processFile = async (file) => {
        const fileName = file.name.toLowerCase();

        try {
            if (fileName.endsWith('.zip')) {
                return await processZipFile(file);
            } else if (fileName.endsWith('.csv')) {
                return await processCSVFile(file);
            } else if (fileName.endsWith('.xlsx') || fileName.endsWith('.xls')) {
                return await processExcelFile(file);
            } else {
                // Unsupported file type: silently drop
                return [];
            }
        } catch (error) {
            console.warn(`Error processing file ${file.name}:`, error);
            throw error;
        }
    };

    // Process Excel content
    const processExcelContent = (fileName, content) => {
        try {
            // Use SheetJS to parse Excel
            const workbook = XLSX.read(content, { type: 'array' });

            // Get first sheet
            const worksheet = workbook.Sheets[workbook.SheetNames[0]];

            // Convert to CSV
            const csvContent = XLSX.utils.sheet_to_csv(worksheet);

            // Process the CSV content
            return processFileContent(fileName, csvContent);
        } catch (error) {
            console.error('Error processing Excel content:', error);
            throw new Error('Failed to process Excel content: ' + error.message);
        }
    };

    const processFileContent = (fileName, content) => {
        // Clean and process the CDR data
        const { cleanedData, operator } = cleanCDRData(content, fileName);

        // अधिक सख्त चेक - हेडर के बाद कम से कम एक रो होनी चाहिए
        // और प्रमुख कॉलम में डेटा होना चाहिए
        const isEmptyOrNoDataFound = !cleanedData ||
            cleanedData.length <= 1 ||
            (cleanedData.length > 1 && cleanedData.slice(1).every(row => {
                if (!row || row.length === 0) return true;

                // महत्वपूर्ण कॉलम के लिए चेक
                const criticalColumns = ['Target No', 'B Party', 'Date', 'Time'];
                for (const colName of criticalColumns) {
                    const colIndex = cleanedData[0].indexOf(colName);
                    if (colIndex !== -1 && row[colIndex] && row[colIndex].trim() !== '') {
                        return false; // डेटा मिला
                    }
                }

                // "No Data Found" टेक्स्ट के लिए चेक
                return row.some(cell =>
                    typeof cell === 'string' &&
                    cell.toLowerCase().includes('no data') ||
                    cell.toLowerCase().includes('no record')
                );
            }));

        if (isEmptyOrNoDataFound) {
            return { fileName, cleanedData: [], operator: null, isEmpty: true };
        }

        // Extract mobile number from data or filename
        let mobileNumber = extractMobileNumber(fileName, cleanedData);

        return { fileName, cleanedData, operator, mobileNumber, isEmpty: false };
    };
    // Extract password from filename
    const extractPasswordFromFilename = (filename) => {
        const nameWithoutExtension = filename.replace(/\.[^/.]+$/, '');
        const parts = nameWithoutExtension.split(/[ _-]/);
        return parts[0];
    };

    // Extract mobile number from data or filename
    const extractMobileNumber = (fileName, data) => {
        // Remove extension
        const nameWithoutExtension = fileName.replace(/\.[^/.]+$/, '');

        // First, try to find IMEI after VVM_ pattern (this is a common format)
        const vvmPattern = /VVM_([1-9]\d{13,14})(?:_|$)/;
        const vvmMatch = nameWithoutExtension.match(vvmPattern);
        if (vvmMatch) {
            return vvmMatch[1];
        }

        // Second, try to find any valid IMEI (14-15 digits, not starting with 0)
        const imeiPattern = /(?:_|^)([1-9]\d{13,14})(?:_|$)/;
        const imeiMatch = nameWithoutExtension.match(imeiPattern);
        if (imeiMatch) {
            return imeiMatch[1];
        }

        // Check for ILD pattern (International Long Distance numbers)
        const ildPattern = /ILD_(\d{10,14})(?:_|$)/;
        const ildMatch = nameWithoutExtension.match(ildPattern);
        if (ildMatch) {
            return ildMatch[1];
        }

        // Standard mobile pattern as fallback
        const mobilePattern = /(\b(?:91)?\d{10}\b)/;
        const mobileMatch = nameWithoutExtension.match(mobilePattern);
        if (mobileMatch) {
            return mobileMatch[1];
        }

        // Try to extract from data
        if (data && data.length > 1 && data[0]) {
            const targetIndex = data[0].indexOf('Target No');
            if (targetIndex !== -1 && data[1] && data[1][targetIndex]) {
                return data[1][targetIndex];
            }
        }

        return null;
    };

    return {
        cleanCDRData,
        processFile,
        processFileContent,
        operatorColors,
        identifyOperator,
        extractMobileNumber,
        headerMappings
    };
})();

constants.js
// constants.js - Global constants for CDR Analysis Tool
const AppConstants = {
    // Header mappings for different operators
    HEADER_MAPPINGS: {
        VI: {
            "Target /A PARTY NUMBER": "Target No",
            "CALL_TYPE": "Call Type",
            "Type of Connection": "TOC",
            "B PARTY NUMBER": "B Party",
            "LRN- B Party Number": "LRN",
            "Translation of LRN": "LRN Operator LSA",
            "Call date": "Date",
            "Call Initiation Time": "Time",
            "Call Duration": "Duration",
            "First BTS Location": "First Cell ID Address",
            "First Cell Global Id": "First Cell ID",
            "Last BTS Location": "Last BTS",
            "Last Cell Global Id": "Last Cell ID Address",
            "SMS Centre Number": "SMS Center",
            "Service Type": "Service Type",
            "IMEI": "IMEI",
            "IMSI": "IMSI",
            "Call Forwarding Number": "Call FWD",
            "Roaming Network/Circle": "Roming",
            "MSC ID": "MSC ID",
            "In TG": "IN TG",
            "Out TG": "OUT TG"
        },
        Airtel: {
            "Target No": "Target No",
            "Call Type": "Call Type",
            "TOC": "TOC",
            "B Party No": "B Party",
            "LRN No": "LRN",
            "LRN TSP-LSA": "LRN Operator LSA",
            "Date": "Date",
            "Time": "Time",
            "Dur(s)": "Duration",
            "First CGI": "First Cell ID",
            "First CGI Lat/Long": "First Cell ID Address",
            "Last CGI": "Last Cell ID",
            "Last CGI Lat/Long": "Last Cell ID Address",
            "SMSC No": "SMS Center",
            "Service Type": "Service Type",
            "IMEI": "IMEI",
            "IMSI": "IMSI",
            "Call Fow No": "Call FWD",
            "Roam Nw": "Roming",
            "SW & MSC ID": "MSC ID",
            "IN TG": "IN TG",
            "OUT TG": "OUT TG",
            "Vowifi First UE IP": "VoWiFi First IP",
            "Port1": "Port1",
            "Vowifi Last UE IP": "VoWiFi Last IP",
            "Port2": "Port2"
        },
        BSNL: {
            "Target/A-Party Number": "Target No",
            "Call_Type": "Call Type",
            "Type_Of_Conn": "TOC",
            "B_Party Number": "B Party",
            "LRN_B_Party_No": "LRN",
            "LRN_DESCRIPTION": "LRN Operator LSA",
            "Call_Date": "Date",
            "Call_Initiation_Time(CIT)": "Time",
            "Call_Duration": "Duration",
            "First_Cell_Desc": "First Cell ID Address",
            "First_Cell_id": "First Cell ID",
            "Last_Cell_Desc": "Last Cell ID Address",
            "Last_Cell_ID": "Last Cell ID",
            "SMSC_No": "SMS Center",
            "Service_Type": "Service Type",
            "IMEI": "IMEI",
            "IMSI": "IMSI",
            "Call_FOW_No": "Call FWD",
            "Circle_NW": "Roming",
            "MSC_ID": "MSC ID",
            "IN_TG": "IN TG",
            "OUT_TG": "OUT TG"
        },
        Jio: {
            "Calling Party Telephone Number": "Target No",
            "Called Party Telephone Number": "B Party",
            "Call Forwarding": "Call FWD",
            "LRN Called No": "LRN",
            "Call Date": "Date",
            "Call Time": "Time",
            "Call Termination Time": "Call TT",
            "Call Duration": "Duration",
            "First Cell ID": "First Cell ID",
            "Last Cell ID": "Last Cell ID",
            "Call Type": "Call Type",
            "SMS Center Number": "SMS Center",
            "IMEI": "IMEI",
            "IMSI": "IMSI",
            "Roaming Circle Name": "Roming"
        },
        Jio22: {
            "Target / A Party Number": "Target No",
            "Call Type (In/Out)": "Call Type",
            "Type of Connection": "TOC",
            "B Party Number": "B Party",
            "LRN Called No": "LRN",
            "LRN Operator Name with LSA": "LRN Operator LSA",
            "Call Date": "Date",
            "Call Time": "Time",
            "Call Duration": "Duration",
            "First BTS Location-Address": "First Cell ID Address",
            "First Cell ID": "First Cell ID",
            "Last BTS Location-Address": "Last Cell ID Address",
            "Last Cell ID": "Last Cell ID",
            "SMS Center Number": "SMS Center",
            "Service Type (Voice/SMS)": "Service Type",
            "IMEI": "IMEI",
            "IMSI": "IMSI",
            "Call Forwarding Number": "Call FWD",
            "Roaming Circle Name": "Roming",
            "Switch ID / MSC ID": "MSC ID",
            "In TG": "IN TG",
            "Out TG": "OUT TG"
        }
    },

    // Operator colors for visualization
    OPERATOR_COLORS: {
        VI: "#e41c38",
        Airtel: "#ff1e1e",
        Jio: "#0f3cc9",
        Jio22: "#0f3cc9",
        BSNL: "#4baa4e",
        default: "#34495e"
    },

    // Footer patterns for different operators
    FOOTER_PATTERNS: {
        VI: [
            "CALL_FORWARD :- Call Forward",
            "LRN :-Local Routing Number",
            "Note :- This is a System generated Report"
        ],
        Airtel: [
            "This is System generated report and needs no signature"
        ],
        BSNL: [
            "*** END OF REPORT ***"
        ],
        Jio: [
            "Disclaimer : This is system generated data. Signature is not required"
        ],
        Jio22: [
            "Disclaimer : This is system generated data. Signature is not required"
        ]
    },

    // Call type mappings
    CALL_TYPE_MAPPING: {
        in: ["a_in", "a_in_wifi", "v_in", "a_in_vw", "a_in_wv", "p2p_smsin_wifi", "p2p_smsin", "a2p_smsin_wifi", "a2p_smsin"],
        out: ["a_out", "a_out_wifi", "v_out", "a_out_vw", "p2pout", "p2aout", "p2aout_wifi"]
    },

    // Service type mappings
    SERVICE_TYPE_MAPPING: {
        SMS: ["p2p_smsin_wifi", "p2p_smsin", "a2p_smsin_wifi", "a2p_smsin", "p2pout", "p2aout", "p2aout_wifi"],
        Call: ["a_in", "a_in_wifi", "v_in", "a_in_vw", "a_in_wv", "a_out", "a_out_wifi", "v_out", "a_out_vw"]
    },

    // LRN to Operator-Circle mappings
    LRN_MAPPINGS : {
        '2000': 'VI-AP',
        '2100': 'VI-BR',
        '2392': 'BSNL-AP',
        '2393': 'BSNL-AS',
        '2394': 'BSNL-BR',
        '2396': 'BSNL-GJ',
        '2397': 'BSNL-HR',
        '2398': 'BSNL-HP',
        '2399': 'BSNL-JK',
        '2490': 'BSNL-KA',
        '2491': 'BSNL-KL',
        '2492': 'BSNL-KO',
        '2493': 'BSNL-MP',
        '2494': 'BSNL-MH',
        '2495': 'BSNL-NE',
        '2496': 'BSNL-OR',
        '2497': 'BSNL-PB',
        '2498': 'BSNL-RJ',
        '2499': 'BSNL-TN',
        '2540': 'BSNL-UE',
        '2541': 'BSNL-UW',
        '2542': 'BSNL-WB',
        '2547': 'BSNL-GJ',
        '2724': 'Airtel-AP',
        '2725': 'Airtel-AS',
        '2726': 'Airtel-BR',
        '2727': 'Airtel-DL',
        '2728': 'Airtel-GJ',
        '2729': 'Airtel-HR',
        '3000': 'Airtel-HP',
        '3001': 'Airtel-JK',
        '3002': 'Airtel-KA',
        '3003': 'Airtel-KL',
        '3004': 'Airtel-KO',
        '3005': 'Airtel-MP',
        '3006': 'Airtel-MH',
        '3007': 'Airtel-MU',
        '3008': 'Airtel-OR',
        '3009': 'Airtel-PB',
        '3020': 'Airtel-TN',
        '3021': 'Airtel-UE',
        '3022': 'Airtel-UW',
        '3023': 'Airtel-WB',
        '3024': 'Airtel-NE',
        '3025': 'Airtel-RJ',
        '3044': 'Jio-WB',
        '3064': 'VI-AP',
        '3065': 'VI-AS',
        '3066': 'VI-DL',
        '3067': 'VI-GJ',
        '3068': 'VI-HR',
        '3069': 'VI-HP',
        '3070': 'VI-JK',
        '3072': 'VI-KL',
        '3073': 'VI-KO',
        '3074': 'VI-MP',
        '3075': 'VI-MH',
        '3076': 'VI-MU',
        '3078': 'VI-OR',
        '3080': 'VI-RJ',
        '3081': 'VI-TN',
        '3082': 'VI-UE',
        '3083': 'VI-UW',
        '3084': 'VI-WB',
        '3085': 'Jio-AP',
        '3086': 'Jio-AS',
        '3087': 'Jio-BR',
        '3088': 'Jio-GJ',
        '3089': 'Jio-HR',
        '3090': 'Jio-HP',
        '3091': 'Jio-JK',
        '3092': 'Jio-KA',
        '3093': 'Jio-KL',
        '3094': 'Jio-MP',
        '3095': 'Jio-MH',
        '3096': 'Jio-NE',
        '3097': 'Jio-OR',
        '3098': 'Jio-PB',
        '3099': 'Jio-RJ',
        '3100': 'Jio-TN',
        '3101': 'Jio-UW',
        '3102': 'Jio-UE',
        '3103': 'Jio-DL',
        '3104': 'Jio-KO',
        '3105': 'Jio-MU',
        '3106': 'BSNL-DL',
        '3107': 'BSNL-MU',
        '3205': 'VI-KA',
        '3207': 'VI-PB',
        '3281': 'Airtel-MH',
        '3282': 'Airtel-MU',
        '3283': 'Airtel-AP',
        '3285': 'Airtel-BR',
        '3287': 'Airtel-DL',
        '3288': 'Airtel-GJ',
        '3289': 'Airtel-HR',
        '3290': 'Airtel-HP',
        '3292': 'Airtel-KA',
        '3293': 'Airtel-KL',
        '3294': 'Airtel-KO',
        '3295': 'Airtel-MP',
        '3297': 'Airtel-OR',
        '3298': 'Airtel-PB',
        '3299': 'Airtel-RJ',
        '3400': 'Airtel-TN',
        '3401': 'Airtel-UE',
        '3402': 'Airtel-UW',
        '3403': 'Airtel-WB',
        '3404': 'Airtel-MH',
        '3405': 'Airtel-MU',
        '3406': 'Airtel-AP',
        '3408': 'Airtel-BR',
        '3440': 'Airtel-DL',
        '3441': 'Airtel-GJ',
        '3442': 'Airtel-HR',
        '3448': 'Airtel-MP',
        '3491': 'Airtel-PB',
        '3492': 'Airtel-RJ',
        '3493': 'Airtel-TN',
        '3495': 'Airtel-UW',
        '3496': 'Airtel-WB',
        '3499': 'Airtel-BR',
        '3502': 'Airtel-UE',
        '3571': 'Airtel-UW',
        '3572': 'Airtel-AP',
        '3576': 'Airtel-GJ',
        '3578': 'Airtel-MH',
        '3579': 'VI-KL',
        '4100': 'VI-MH',
        '4101': 'VI-TN',
        '4102': 'VI-HR',
        '4103': 'VI-RJ',
        '4104': 'VI-UE',
        '4105': 'VI-KO',
        '4106': 'VI-GJ',
        '4107': 'VI-MU',
        '4108': 'VI-DL',
        '4109': 'VI-AP',
        '4120': 'VI-TN',
        '4121': 'VI-KA',
        '4122': 'VI-PB',
        '4123': 'VI-UW',
        '4124': 'VI-WB',
        '4125': 'VI-AS',
        '4126': 'VI-BR',
        '4127': 'VI-HP',
        '4128': 'VI-JK',
        '4129': 'VI-MP',
        '4190': 'VI-NE',
        '4191': 'VI-OR',
    }


};
// Function to get operator-circle info from LRN
AppConstants.getOperatorCircle = function (lrn) {
    return this.LRN_MAPPINGS[lrn] || 'Unknown';
};

db.js:
// db.js - IndexedDB management
const DB = (() => {
    const DB_NAME = 'CDRAnalysisDB';
    const DB_VERSION = 1;
    const FILE_STORE = 'fileStore';
    const CASE_STORE = 'caseStore';

    let db = null;

    // Initialize the database
    const init = () => {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open(DB_NAME, DB_VERSION);

            request.onerror = (event) => {
                console.error('IndexedDB error:', event.target.error);
                reject('Could not open database');
            };

            request.onupgradeneeded = (event) => {
                const db = event.target.result;

                // Create file store
                if (!db.objectStoreNames.contains(FILE_STORE)) {
                    const fileStore = db.createObjectStore(FILE_STORE, { keyPath: 'id', autoIncrement: true });
                    fileStore.createIndex('byFileName', 'fileName', { unique: false });
                    fileStore.createIndex('byCaseId', 'caseId', { unique: false });
                    fileStore.createIndex('byMobileNumber', 'mobileNumber', { unique: false });  // इंडेक्स जोड़ें
                    fileStore.createIndex('byOperator', 'operator', { unique: false });
                }

                // Create case store
                if (!db.objectStoreNames.contains(CASE_STORE)) {
                    const caseStore = db.createObjectStore(CASE_STORE, { keyPath: 'caseNumber' });
                    caseStore.createIndex('byVictimName', 'victimName', { unique: false });
                    caseStore.createIndex('bySections', 'sections', { unique: false });
                    caseStore.createIndex('byDate', 'createdAt', { unique: false });
                }
            };

            request.onsuccess = (event) => {
                db = event.target.result;
                console.log('IndexedDB initialized successfully');
                resolve(db);
            };
        });
    };

    // Store a CDR file
    const storeFile = (fileName, data, caseId, options = {}) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readwrite');
            const store = transaction.objectStore(FILE_STORE);

            const fileData = {
                fileName: fileName,
                displayName: options.displayName || extractDisplayName(fileName),
                data: data,
                caseId: caseId,
                mobileNumber: options.mobileNumber || null,
                operator: options.operator || 'Unknown',
                uploadDate: new Date()
            };

            const request = store.add(fileData);

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error storing file:', event.target.error);
                reject('Error storing file data');
            };
        });
    };

    // Get file by ID
    const getFileById = (id) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const request = store.get(id);

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error getting file:', event.target.error);
                reject('Error retrieving file data');
            };
        });
    };

    // Get files by case ID
    const getFilesByCaseId = (caseId) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const index = store.index('byCaseId');
            const request = index.getAll(caseId);

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error getting files by case:', event.target.error);
                reject('Error retrieving files by case');
            };
        });
    };

    // Get files by multiple case IDs
    const getFilesByMultipleCaseIds = (caseIds) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            if (!caseIds || caseIds.length === 0) {
                resolve([]);
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const index = store.index('byCaseId');
            const allFiles = [];

            let completedRequests = 0;

            caseIds.forEach(caseId => {
                const request = index.getAll(caseId);

                request.onsuccess = () => {
                    allFiles.push(...request.result);
                    completedRequests++;

                    if (completedRequests === caseIds.length) {
                        // Remove duplicates (files may be in multiple cases)
                        const uniqueFiles = allFiles.filter((file, index, self) =>
                            index === self.findIndex(f => f.id === file.id)
                        );
                        resolve(uniqueFiles);
                    }
                };

                request.onerror = (event) => {
                    console.error('Error getting files for case:', event.target.error);
                    completedRequests++;

                    if (completedRequests === caseIds.length) {
                        resolve(allFiles);
                    }
                };
            });
        });
    };

    // Get all files
    const getAllFiles = () => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const request = store.getAll();

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error getting all files:', event.target.error);
                reject('Error retrieving all files');
            };
        });
    };

    // Delete file by ID
    const deleteFile = (id) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readwrite');
            const store = transaction.objectStore(FILE_STORE);
            const request = store.delete(id);

            request.onsuccess = () => {
                resolve(true);
            };

            request.onerror = (event) => {
                console.error('Error deleting file:', event.target.error);
                reject('Error deleting file');
            };
        });
    };

    // Create a new case
    const createCase = (caseData) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([CASE_STORE], 'readwrite');
            const store = transaction.objectStore(CASE_STORE);

            // Check if case number already exists
            const getRequest = store.get(caseData.caseNumber);

            getRequest.onsuccess = () => {
                if (getRequest.result) {
                    reject('Case number already exists');
                    return;
                }

                // Add created timestamp
                caseData.createdAt = new Date();

                const addRequest = store.add(caseData);

                addRequest.onsuccess = () => {
                    resolve(caseData.caseNumber);
                };

                addRequest.onerror = (event) => {
                    console.error('Error creating case:', event.target.error);
                    reject('Error creating case');
                };
            };

            getRequest.onerror = (event) => {
                console.error('Error checking case existence:', event.target.error);
                reject('Error checking if case exists');
            };
        });
    };

    // Get case by number
    const getCaseByNumber = (caseNumber) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([CASE_STORE], 'readonly');
            const store = transaction.objectStore(CASE_STORE);
            const request = store.get(caseNumber);

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error getting case:', event.target.error);
                reject('Error retrieving case data');
            };
        });
    };

    // Get all cases
    const getAllCases = () => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([CASE_STORE], 'readonly');
            const store = transaction.objectStore(CASE_STORE);
            const request = store.getAll();

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error getting all cases:', event.target.error);
                reject('Error retrieving all cases');
            };
        });
    };

    // Delete case and all associated files
    const deleteCase = (caseNumber) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            // First get all files for this case
            getFilesByCaseId(caseNumber)
                .then(files => {
                    // Start transaction to delete files and case
                    const transaction = db.transaction([FILE_STORE, CASE_STORE], 'readwrite');
                    const fileStore = transaction.objectStore(FILE_STORE);
                    const caseStore = transaction.objectStore(CASE_STORE);

                    // Delete all files
                    let fileDeletionPromises = files.map(file => {
                        return new Promise((resolve, reject) => {
                            const request = fileStore.delete(file.id);
                            request.onsuccess = () => resolve();
                            request.onerror = () => reject();
                        });
                    });

                    // After deleting files, delete the case
                    Promise.all(fileDeletionPromises)
                        .then(() => {
                            const request = caseStore.delete(caseNumber);

                            request.onsuccess = () => {
                                resolve(true);
                            };

                            request.onerror = (event) => {
                                console.error('Error deleting case:', event.target.error);
                                reject('Error deleting case');
                            };
                        })
                        .catch(() => {
                            reject('Error deleting associated files');
                        });
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Get unique values for a column from a specific file
    const getUniqueColumnValuesFromFile = (fileId, columnName) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve([]);
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve([]);
                        return;
                    }

                    const uniqueValues = new Set();

                    // Skip header row
                    for (let i = 1; i < file.data.length; i++) {
                        if (file.data[i][columnIndex]) {
                            uniqueValues.add(file.data[i][columnIndex]);
                        }
                    }

                    resolve(Array.from(uniqueValues));
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Get unique values for a column with counts from a specific file
    const getUniqueColumnValuesWithCountsFromFile = (fileId, columnName) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve([]);
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve([]);
                        return;
                    }

                    const valueCounts = {};

                    // Skip header row
                    for (let i = 1; i < file.data.length; i++) {
                        const value = file.data[i][columnIndex];
                        if (value) {
                            valueCounts[value] = (valueCounts[value] || 0) + 1;
                        }
                    }

                    // Convert to array of objects with value and count
                    const result = Object.entries(valueCounts).map(([value, count]) => ({
                        value,
                        count
                    }));

                    resolve(result);
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Get date hierarchy data from a specific file
    const getDateHierarchyFromFile = (fileId, columnName) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve({});
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve({});
                        return;
                    }

                    const hierarchy = {};

                    // Skip header row
                    for (let i = 1; i < file.data.length; i++) {
                        const dateStr = file.data[i][columnIndex];
                        if (!dateStr) continue;

                        try {
                            // Assuming date format is "DD/MM/YYYY"
                            const [day, month, year] = dateStr.split('/');

                            if (!hierarchy[year]) {
                                hierarchy[year] = { count: 0, months: {} };
                            }

                            hierarchy[year].count++;

                            if (!hierarchy[year].months[month]) {
                                hierarchy[year].months[month] = { count: 0, days: {} };
                            }

                            hierarchy[year].months[month].count++;

                            if (!hierarchy[year].months[month].days[day]) {
                                hierarchy[year].months[month].days[day] = { count: 0 };
                            }

                            hierarchy[year].months[month].days[day].count++;
                        } catch (e) {
                            console.error('Error parsing date:', dateStr, e);
                        }
                    }

                    resolve(hierarchy);
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Get time hierarchy data from a specific file
    const getTimeHierarchyFromFile = (fileId, columnName) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve({});
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve({});
                        return;
                    }

                    const hierarchy = {};

                    // Skip header row
                    for (let i = 1; i < file.data.length; i++) {
                        const timeStr = file.data[i][columnIndex];
                        if (!timeStr) continue;

                        try {
                            // Assuming time format is "HH:MM:SS" or "HH:MM"
                            const [hour, minute] = timeStr.split(':');

                            if (!hierarchy[hour]) {
                                hierarchy[hour] = { count: 0, minutes: {} };
                            }

                            hierarchy[hour].count++;

                            if (minute) {
                                if (!hierarchy[hour].minutes[minute]) {
                                    hierarchy[hour].minutes[minute] = { count: 0 };
                                }

                                hierarchy[hour].minutes[minute].count++;
                            }
                        } catch (e) {
                            console.error('Error parsing time:', timeStr, e);
                        }
                    }

                    resolve(hierarchy);
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Get case file count
    const getCaseFileCount = (caseNumber) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const index = store.index('byCaseId');
            const request = index.count(caseNumber);

            request.onsuccess = () => {
                resolve(request.result);
            };

            request.onerror = (event) => {
                console.error('Error counting files:', event.target.error);
                reject('Error counting files');
            };
        });
    };

    // Get cases with file counts
    const getCasesWithFileCounts = () => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getAllCases()
                .then(cases => {
                    const promises = cases.map(caseItem => {
                        return getCaseFileCount(caseItem.caseNumber)
                            .then(count => ({
                                ...caseItem,
                                fileCount: count
                            }));
                    });

                    Promise.all(promises)
                        .then(casesWithCounts => {
                            resolve(casesWithCounts);
                        })
                        .catch(error => {
                            reject(error);
                        });
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Helper function to extract display name from filename
    const extractDisplayName = (fileName) => {
        // Remove extension
        let name = fileName.replace(/\.[^/.]+$/, "");

        // First, try to find IMEI after VVM_ pattern (this is a common format)
        const vvmPattern = /VVM_([1-9]\d{13,14})(?:_|$)/;
        const vvmMatch = name.match(vvmPattern);
        if (vvmMatch) {
            return vvmMatch[1];
        }

        // Second, try to find any valid IMEI (14-15 digits, not starting with 0)
        const imeiPattern = /(?:_|^)([1-9]\d{13,14})(?:_|$)/;
        const imeiMatch = name.match(imeiPattern);
        if (imeiMatch) {
            return imeiMatch[1];
        }

        // Check for ILD pattern (International Long Distance numbers)
        const ildPattern = /ILD_(\d{10,14})(?:_|$)/;
        const ildMatch = name.match(ildPattern);
        if (ildMatch) {
            return ildMatch[1];
        }

        // Standard mobile pattern as fallback
        const mobilePattern = /(\b(?:91)?\d{10}\b)/;
        const mobileMatch = name.match(mobilePattern);
        if (mobileMatch) {
            return mobileMatch[1];
        }

        return name;
    };
    // मोबाइल नंबर के आधार पर फाइलें खोजना
    const getFilesByMobileNumber = (mobileNumber, caseId = null) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readonly');
            const store = transaction.objectStore(FILE_STORE);
            const index = store.index('byMobileNumber');
            const request = index.getAll(mobileNumber);

            request.onsuccess = () => {
                // यदि caseId दिया गया है, तो केवल उस केस की फाइलें फ़िल्टर करें
                const files = caseId
                    ? request.result.filter(file => file.caseId === caseId)
                    : request.result;
                resolve(files);
            };

            request.onerror = (event) => {
                console.error('Error getting files by mobile number:', event.target.error);
                reject('Error retrieving files by mobile number');
            };
        });
    };

    // मौजूदा फाइल अपडेट करना
    const updateFile = (fileId, newData) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            const transaction = db.transaction([FILE_STORE], 'readwrite');
            const store = transaction.objectStore(FILE_STORE);

            // पहले फाइल प्राप्त करें
            const getRequest = store.get(fileId);

            getRequest.onsuccess = () => {
                const file = getRequest.result;
                if (!file) {
                    reject(`File with ID ${fileId} not found`);
                    return;
                }

                // डेटा अपडेट करें
                file.data = newData;
                file.lastUpdated = new Date();

                // अपडेटेड फाइल सेव करें
                const updateRequest = store.put(file);

                updateRequest.onsuccess = () => {
                    resolve(fileId);
                };

                updateRequest.onerror = (event) => {
                    console.error('Error updating file:', event.target.error);
                    reject('Error updating file data');
                };
            };

            getRequest.onerror = (event) => {
                console.error('Error getting file for update:', event.target.error);
                reject('Error retrieving file for update');
            };
        });
    };

    // Add new function to get filtered values with counts
    const getUniqueColumnValuesWithCountsFromFilteredData = (fileId, columnName, activeFilters) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve([]);
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve([]);
                        return;
                    }

                    // First apply all active filters
                    let filteredData = [...file.data];
                    
                    // Apply each active filter except the current column's filter
                    for (const [columnId, filter] of Object.entries(activeFilters)) {
                        // Skip if this is the filter for the current column
                        if (filter.columnIndex === columnIndex) continue;

                        filteredData = filteredData.filter((row, rowIndex) => {
                            if (rowIndex === 0) return true; // Keep header row
                            
                            const value = row[filter.columnIndex];
                            
                            switch (filter.type) {
                                case 'date':
                                    return applyDateFilter(value, filter);
                                case 'time':
                                    return applyTimeFilter(value, filter);
                                default:
                                    return filter.values.includes(String(value));
                            }
                        });
                    }

                    const valueCounts = {};

                    // Skip header row
                    for (let i = 1; i < filteredData.length; i++) {
                        const value = filteredData[i][columnIndex];
                        if (value) {
                            valueCounts[value] = (valueCounts[value] || 0) + 1;
                        }
                    }

                    // Convert to array of objects with value and count
                    const result = Object.entries(valueCounts).map(([value, count]) => ({
                        value,
                        count
                    }));

                    resolve(result);
                })
                .catch(error => {
                    reject(error);
                });
        });
    };

    // Helper functions for date and time filters
    const applyDateFilter = (value, filter) => {
        if (!value) return false;
        
        try {
            const [day, month, year] = value.split('/');
            
            if (filter.values.years && !filter.values.years.includes(year)) return false;
            if (filter.values.months && !filter.values.months.includes(month)) return false;
            if (filter.values.days && !filter.values.days.includes(day)) return false;
            
            return true;
        } catch (e) {
            console.error('Error applying date filter:', e);
            return false;
        }
    };

    const applyTimeFilter = (value, filter) => {
        if (!value) return false;
        
        try {
            const [hour, minute] = value.split(':');
            
            if (filter.values.hours && !filter.values.hours.includes(hour)) return false;
            if (filter.values.minutes && !filter.values.minutes.includes(minute)) return false;
            
            return true;
        } catch (e) {
            console.error('Error applying time filter:', e);
            return false;
        }
    };

    // Add new function to get filtered hierarchies
    const getDateHierarchyFromFilteredData = (fileId, columnName, activeFilters) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve({});
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve({});
                        return;
                    }

                    // First apply all active filters except the current column's filter
                    let filteredData = [...file.data];
                    for (const [columnId, filter] of Object.entries(activeFilters)) {
                        if (filter.columnIndex === columnIndex) continue;

                        filteredData = filteredData.filter((row, rowIndex) => {
                            if (rowIndex === 0) return true;
                            const value = row[filter.columnIndex];
                            
                            switch (filter.type) {
                                case 'date':
                                    return applyDateFilter(value, filter);
                                case 'time':
                                    return applyTimeFilter(value, filter);
                                default:
                                    return filter.values.includes(String(value));
                            }
                        });
                    }

                    // Build date hierarchy from filtered data
                    const hierarchy = {};
                    
                    // Skip header row
                    for (let i = 1; i < filteredData.length; i++) {
                        const dateStr = filteredData[i][columnIndex];
                        if (!dateStr) continue;

                        try {
                            const [day, month, year] = dateStr.split('/');

                            if (!hierarchy[year]) {
                                hierarchy[year] = { count: 0, months: {} };
                            }
                            hierarchy[year].count++;

                            if (!hierarchy[year].months[month]) {
                                hierarchy[year].months[month] = { count: 0, days: {} };
                            }
                            hierarchy[year].months[month].count++;

                            if (!hierarchy[year].months[month].days[day]) {
                                hierarchy[year].months[month].days[day] = { count: 0 };
                            }
                            hierarchy[year].months[month].days[day].count++;
                        } catch (e) {
                            console.error('Error parsing date:', dateStr);
                        }
                    }

                    resolve(hierarchy);
                })
                .catch(reject);
        });
    };

    const getTimeHierarchyFromFilteredData = (fileId, columnName, activeFilters) => {
        return new Promise((resolve, reject) => {
            if (!db) {
                reject('Database not initialized');
                return;
            }

            getFileById(fileId)
                .then(file => {
                    if (!file || !file.data || !file.data[0]) {
                        resolve({});
                        return;
                    }

                    const columnIndex = file.data[0].indexOf(columnName);
                    if (columnIndex === -1) {
                        resolve({});
                        return;
                    }

                    // Apply all active filters except the current column's filter
                    let filteredData = [...file.data];
                    for (const [columnId, filter] of Object.entries(activeFilters)) {
                        if (filter.columnIndex === columnIndex) continue;

                        filteredData = filteredData.filter((row, rowIndex) => {
                            if (rowIndex === 0) return true;
                            const value = row[filter.columnIndex];
                            
                            switch (filter.type) {
                                case 'date':
                                    return applyDateFilter(value, filter);
                                case 'time':
                                    return applyTimeFilter(value, filter);
                                default:
                                    return filter.values.includes(String(value));
                            }
                        });
                    }

                    // Build time hierarchy from filtered data
                    const hierarchy = {};
                    
                    // Skip header row
                    for (let i = 1; i < filteredData.length; i++) {
                        const timeStr = filteredData[i][columnIndex];
                        if (!timeStr) continue;

                        try {
                            const [hour, minute] = timeStr.split(':');

                            if (!hierarchy[hour]) {
                                hierarchy[hour] = { count: 0, minutes: {} };
                            }
                            hierarchy[hour].count++;

                            if (minute) {
                                if (!hierarchy[hour].minutes[minute]) {
                                    hierarchy[hour].minutes[minute] = { count: 0 };
                                }
                                hierarchy[hour].minutes[minute].count++;
                            }
                        } catch (e) {
                            console.error('Error parsing time:', timeStr);
                        }
                    }

                    resolve(hierarchy);
                })
                .catch(reject);
        });
    };

    return {
        init,
        storeFile,
        getFileById,
        getFilesByCaseId,
        getFilesByMultipleCaseIds,
        getAllFiles,
        deleteFile,
        createCase,
        getCaseByNumber,
        getAllCases,
        deleteCase,
        getUniqueColumnValuesFromFile,
        getUniqueColumnValuesWithCountsFromFile,
        getDateHierarchyFromFile,
        getTimeHierarchyFromFile,
        getCaseFileCount,
        getCasesWithFileCounts,
        updateFile,
        getFilesByMobileNumber,
        getUniqueColumnValuesWithCountsFromFilteredData,
        getDateHierarchyFromFilteredData,
        getTimeHierarchyFromFilteredData
    };
})();

duplicate-detector.js:
// duplicate-detector.js - डुप्लिकेट फ़ाइल डिटेक्शन और मर्जिंग
const DuplicateDetector = (() => {
    /**
     * फाइल के डुप्लिकेट होने की जांच करें
     * @param {Array} cleanedData - प्रोसेस्ड फाइल डेटा
     * @param {string} caseId - केस आईडी
     * @param {string} mobileNumber - फाइल से निकाला गया मोबाइल नंबर
     * @param {string} fileName - फाइल का नाम
     * @returns {Promise<Object>} - डुप्लिकेट चेक का परिणाम
     */
    const checkForDuplicates = async (cleanedData, caseId, mobileNumber, fileName) => {
        let potentialDuplicates = [];
        
        // मोबाइल नंबर के आधार पर फाइलें खोजें
        if (mobileNumber) {
            try {
                potentialDuplicates = await DB.getFilesByMobileNumber(mobileNumber, caseId);
            } catch (error) {
                console.error('Error fetching files by mobile number:', error);
                // सिलेंट फेलिंग - हम एरर होने पर भी प्रोसेस जारी रखेंगे
            }
        }
        
        // यदि मोबाइल नंबर से मैच नहीं मिला, तो फाइलनेम के आधार पर जांचें
        if (potentialDuplicates.length === 0) {
            try {
                const filesInCase = await DB.getFilesByCaseId(caseId);
                
                // फाइलनेम क्लीन करें और समान नामों की तलाश करें
                const cleanFileName = fileName.replace(/\.[^/.]+$/, "").toLowerCase();
                
                potentialDuplicates = filesInCase.filter(file => {
                    const existingFileName = file.fileName.replace(/\.[^/.]+$/, "").toLowerCase();
                    return existingFileName === cleanFileName || 
                          existingFileName.includes(cleanFileName) ||
                          cleanFileName.includes(existingFileName);
                });
            } catch (error) {
                console.error('Error fetching files by case ID:', error);
            }
        }
        
        // यदि कोई संभावित डुप्लिकेट नहीं मिला
        if (potentialDuplicates.length === 0) {
            return { isDuplicate: false };
        }
        
        // प्रत्येक संभावित डुप्लिकेट के लिए कंटेंट कंपेअर करें
        for (const file of potentialDuplicates) {
            const duplicateCheck = compareFileContent(cleanedData, file.data);
            
            if (duplicateCheck.isDuplicate) {
                return {
                    isDuplicate: true,
                    originalFile: file,
                    newData: cleanedData,
                    matchPercentage: duplicateCheck.matchPercentage
                };
            }
        }
        
        // कोई कन्फर्म्ड डुप्लिकेट नहीं
        return { isDuplicate: false };
    };

    /**
     * दो फाइलों के कंटेंट की तुलना करें
     * @param {Array} newData - नई फाइल का डेटा
     * @param {Array} existingData - मौजूदा फाइल का डेटा
     * @returns {Object} - तुलना का परिणाम
     */
    const compareFileContent = (newData, existingData) => {
        // यदि हेडर्स मैच नहीं करते, तो डुप्लिकेट नहीं हो सकते
        if (!compareHeaders(newData[0], existingData[0])) {
            return { isDuplicate: false, matchPercentage: 0 };
        }
        
        // डेटा में कम से कम 2 पंक्तियां होनी चाहिए (हेडर + 1 डेटा पंक्ति)
        if (newData.length < 2 || existingData.length < 2) {
            return { isDuplicate: false, matchPercentage: 0 };
        }

        // पहली कुछ और आखिरी कुछ पंक्तियों की तुलना
        const samplesToCheck = Math.min(5, Math.min(newData.length - 1, existingData.length - 1));
        let matchingRows = 0;

        // शुरुआती पंक्तियां
        for (let i = 1; i <= samplesToCheck; i++) {
            if (compareDataRows(newData[0], newData[i], existingData[0], existingData[i])) {
                matchingRows++;
            }
        }

        // अंतिम पंक्तियां
        if (newData.length > 10 && existingData.length > 10) {
            for (let i = 1; i <= samplesToCheck; i++) {
                const newIndex = newData.length - i;
                const existingIndex = existingData.length - i;
                
                if (compareDataRows(newData[0], newData[newIndex], existingData[0], existingData[existingIndex])) {
                    matchingRows++;
                }
            }
        }

        // कुल तुलना की गई पंक्तियां
        const totalRowsCompared = samplesToCheck + (newData.length > 10 && existingData.length > 10 ? samplesToCheck : 0);
        const matchPercentage = (matchingRows / totalRowsCompared) * 100;

        // यदि 70% से अधिक पंक्तियां मैच करती हैं, तो डुप्लिकेट माना जाए
        return { 
            isDuplicate: matchPercentage >= 70,
            matchPercentage: matchPercentage
        };
    };

    /**
     * दो हेडर रो की तुलना करें
     * @param {Array} header1 - पहला हेडर
     * @param {Array} header2 - दूसरा हेडर
     * @returns {boolean} - क्या हेडर्स मैच करते हैं
     */
    const compareHeaders = (header1, header2) => {
        // महत्वपूर्ण कॉलम जिन्हें मैच करना चाहिए
        const criticalColumns = ['Target No', 'B Party', 'Date', 'Time', 'Duration', 'IMEI'];
        
        // गिनें कितने महत्वपूर्ण कॉलम मैच करते हैं
        let matchCount = 0;
        
        for (const column of criticalColumns) {
            const index1 = header1.indexOf(column);
            const index2 = header2.indexOf(column);
            
            if (index1 !== -1 && index2 !== -1) {
                matchCount++;
            }
        }
        
        // यदि अधिकांश महत्वपूर्ण कॉलम मैच करते हैं, तो हेडर्स समान माने जाएं
        return matchCount >= 3;
    };

    /**
     * दो डेटा पंक्तियों की तुलना करें
     * @param {Array} header1 - पहला हेडर
     * @param {Array} row1 - पहली पंक्ति
     * @param {Array} header2 - दूसरा हेडर
     * @param {Array} row2 - दूसरी पंक्ति
     * @returns {boolean} - क्या पंक्तियां मैच करती हैं
     */
    const compareDataRows = (header1, row1, header2, row2) => {
        // महत्वपूर्ण फील्ड्स जिनका मिलान करना है
        const matchFields = ['Target No', 'B Party', 'Date', 'Time', 'IMEI'];
        let matches = 0;
        let totalFields = 0;
        
        for (const field of matchFields) {
            const fieldIndex1 = header1.indexOf(field);
            const fieldIndex2 = header2.indexOf(field);
            
            // यदि दोनों हेडर्स में फील्ड मौजूद है
            if (fieldIndex1 !== -1 && fieldIndex2 !== -1) {
                totalFields++;
                
                // यदि फील्ड वैल्यू मैच करते हैं या दोनों अनडिफाइंड हैं
                if (row1[fieldIndex1] === row2[fieldIndex2]) {
                    matches++;
                }
            }
        }
        
        // पंक्तियों को मैच माना जाए यदि कम से कम 75% फील्ड्स मैच करते हैं
        return totalFields > 0 && (matches / totalFields) >= 0.75;
    };

    /**
     * डुप्लिकेट फाइल का प्रबंधन करें
     * @param {Object} duplicateCheckResult - डुप्लिकेट चेक का परिणाम
     * @returns {Promise<number|null>} - मर्ज की गई फाइल का आईडी या null
     */
    const handleDuplicate = async (duplicateCheckResult, displayName, operator, caseId) => {
        const { originalFile, newData, matchPercentage } = duplicateCheckResult;
        
        // यूजर-फ्रेंडली मैसेज तैयार करें
        const message = `डुप्लिकेट फाइल पाई गई: '${originalFile.fileName}' (${matchPercentage.toFixed(2)}% मैच)`;
        
        // यूजर को ऑप्शन्स दिखाएं
        return new Promise((resolve) => {
            if (confirm(`${message}\n\nक्या आप फाइलों को मर्ज करना चाहते हैं? मर्ज के लिए OK, फाइल को छोड़ने के लिए Cancel दबाएं।`)) {
                // यूजर ने मर्ज करना चुना
                mergeFiles(originalFile, newData)
                    .then(mergedFileId => {
                        DataTable.showToast('फाइलें सफलतापूर्वक मर्ज की गईं', 'success');
                        resolve(mergedFileId);
                    })
                    .catch(error => {
                        console.error('Error merging files:', error);
                        DataTable.showToast('फाइलें मर्ज करने में त्रुटि', 'error');
                        resolve(null);
                    });
            } else {
                // यूजर ने छोड़ना चुना
                DataTable.showToast('डुप्लिकेट फाइल छोड़ी गई', 'info');
                resolve({
                    action: 'skipped',
                    fileId: null
                });
            }
        });
    };

    /**
     * दो फाइलों को मर्ज करें
     * @param {Object} originalFile - मूल फाइल
     * @param {Array} newData - नए डेटा की पंक्तियां
     * @returns {Promise<number>} - मर्ज की गई फाइल का आईडी
     */
    const mergeFiles = async (originalFile, newData) => {
        // रणनीति: मूल फाइल की सभी पंक्तियां रखें, नई फाइल से नॉन-डुप्लिकेट पंक्तियां जोड़ें
        
        // त्वरित लुकअप के लिए मौजूदा पंक्तियों का मैप बनाएं
        const existingRowsMap = new Map();
        const keyColumns = ['Date', 'Time', 'B Party', 'Duration', 'IMEI'];
        
        // की कॉलम्स के इंडेक्स प्राप्त करें
        const keyIndices = keyColumns.map(col => originalFile.data[0].indexOf(col));
        
        // हेडर पंक्ति छोड़ें
        for (let i = 1; i < originalFile.data.length; i++) {
            const row = originalFile.data[i];
            
            // की कॉलम्स के आधार पर इस पंक्ति के लिए यूनिक की बनाएं
            const rowKey = keyIndices
                .filter(index => index !== -1)  // अवैध इंडेक्स हटाएं
                .map(index => row[index] || '')
                .join('|');
                
            existingRowsMap.set(rowKey, true);
        }
        
        // नई पंक्तियां जोड़ने के लिए एरे
        const rowsToAdd = [];
        
        // नए डेटा के लिए समान की इंडेक्स प्राप्त करें
        const newKeyIndices = keyColumns.map(col => newData[0].indexOf(col));
        
        // नए डेटा की प्रत्येक पंक्ति की जांच करें
        for (let i = 1; i < newData.length; i++) {
            const row = newData[i];
            
            // इस पंक्ति के लिए की बनाएं
            const rowKey = newKeyIndices
                .filter(index => index !== -1)  // अवैध इंडेक्स हटाएं
                .map(index => row[index] || '')
                .join('|');
                
            // यदि यह पंक्ति मूल डेटा में मौजूद नहीं है, तो इसे जोड़ें
            if (!existingRowsMap.has(rowKey)) {
                rowsToAdd.push(row);
            }
        }
        
        // यदि कोई नई पंक्ति नहीं है, तो अपडेट करने की आवश्यकता नहीं है
        if (rowsToAdd.length === 0) {
            return { 
                action: 'no_change',
                fileId: originalFile.id,
                message: 'कोई नई डेटा पंक्ति नहीं थी, फाइल अपरिवर्तित रही।'
            };
        }
        
        // मर्ज किया गया डेटा बनाएं - हेडर रखें और फिर पहले मूल पंक्तियां और फिर नई पंक्तियां जोड़ें
        const mergedData = [
            originalFile.data[0],  // हेडर पंक्ति
            ...originalFile.data.slice(1),  // मूल पंक्तियां
            ...rowsToAdd  // नई अद्वितीय पंक्तियां
        ];
        
        // डेटाबेस में फाइल अपडेट करें
        await DB.updateFile(originalFile.id, mergedData);
        return { 
            action: 'merged',
            fileId: originalFile.id,
            message: `${rowsToAdd.length} नई पंक्तियां मर्ज की गईं।`,
            addedRows: rowsToAdd.length
        };
    };

    return {
        checkForDuplicates,
        handleDuplicate,
        mergeFiles
    };
})();

export.js:
// export.js - Comprehensive export functionality for CDR Analysis Tool
const ExportManager = (() => {
    // Export to Excel format
    const exportToExcel = (options = {}) => {
        // Default options
        const defaultOptions = {
            scope: 'current-file-current-analysis',
            fileIds: [],
            analysisTypes: ['cdr', 'maximum-b-party', 'max-imei', 'max-imsi', 'call-max-location', 
                           'max-day-stay', 'max-night-stay', 'sms-analysis', 'common-b-party', 
                           'common-imei', 'mobile-brief', 'network-graph'],
            currentAnalysis: 'cdr',
            fileName: 'cdr-export.xlsx'
        };

        // Merge options
        const settings = { ...defaultOptions, ...options };
        DataTable.showToast('Preparing Excel export...', 'info');

        // Create a new workbook
        const wb = XLSX.utils.book_new();

        // Handle different export scopes
        if (settings.scope === 'current-file-current-analysis') {
            handleCurrentFileCurrentAnalysis(wb, settings);
        }
        else if (settings.scope === 'current-file-all-analysis') {
            handleCurrentFileAllAnalysis(wb, settings);
        }
        else if (settings.scope === 'all-files-current-analysis') {
            handleAllFilesCurrentAnalysis(wb, settings);
        }
        else if (settings.scope === 'all-files-all-analysis') {
            handleAllFilesAllAnalysis(wb, settings);
        }
        else {
            DataTable.showToast('Invalid export scope', 'error');
        }
    };

    // Export to PDF format
    const exportToPDF = (options = {}) => {
        // Default options
        const defaultOptions = {
            scope: 'current-file-current-analysis',
            fileIds: [],
            analysisTypes: ['cdr', 'maximum-b-party', 'max-imei', 'max-imsi', 'call-max-location', 
                           'max-day-stay', 'max-night-stay', 'sms-analysis', 'common-b-party', 
                           'common-imei', 'mobile-brief', 'network-graph'],
            currentAnalysis: 'cdr',
            fileName: 'cdr-export.pdf'
        };

        // Merge options
        const settings = { ...defaultOptions, ...options };
        DataTable.showToast('Preparing PDF export...', 'info');

        // Create a new PDF document
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({
            orientation: 'landscape',
            unit: 'pt'
        });

        // Set document properties
        doc.setProperties({
            title: 'CDR Data Export',
            subject: 'CDR Analysis Export',
            author: 'CDR Analysis Tool',
            keywords: 'CDR, data, export, analysis',
            creator: 'CDR Analysis Tool'
        });

        // Handle different export scopes
        if (settings.scope === 'current-file-current-analysis') {
            handleCurrentFileCurrentAnalysisPDF(doc, settings);
        }
        else if (settings.scope === 'current-file-all-analysis') {
            handleCurrentFileAllAnalysisPDF(doc, settings);
        }
        else if (settings.scope === 'all-files-current-analysis') {
            handleAllFilesCurrentAnalysisPDF(doc, settings);
        }
        else if (settings.scope === 'all-files-all-analysis') {
            handleAllFilesAllAnalysisPDF(doc, settings);
        }
        else {
            DataTable.showToast('Invalid export scope', 'error');
        }
    };

    // Handle current file, current analysis export (Excel)
    const handleCurrentFileCurrentAnalysis = (wb, settings) => {
        const tableData = DataTable.getCurrentData();
        const activeTab = DataTable.getactiveTab();

        if (!activeTab) {
            DataTable.showToast('No file data available to export', 'warning');
            return;
        }

        // Get current sheet data
        const wsData = prepareWorksheetData(tableData.displayData, tableData.visibleColumns, tableData.columns);

        // Add worksheet to workbook
        addWorksheetToWorkbook(wb, wsData, settings.currentAnalysis);
        
        // Finalize export
        finalizeExport(wb, settings.fileName);
    };

    // Handle current file, all analysis export (Excel)
    const handleCurrentFileAllAnalysis = (wb, settings) => {
        const tableData = DataTable.getCurrentData();
        const activeTab = DataTable.getactiveTab();

        if (!activeTab) {
            DataTable.showToast('No file data available to export', 'warning');
            return;
        }

        // Get current analysis data
        const currentData = prepareWorksheetData(tableData.displayData, tableData.visibleColumns, tableData.columns);

        // Add current analysis worksheet
        addWorksheetToWorkbook(wb, currentData, settings.currentAnalysis);

        // Load and add other analyses
        DB.getFileById(activeTab)
            .then(file => {
                if (!file || !file.data) {
                    finalizeExport(wb, settings.fileName);
                    return;
                }

                // We already added the current analysis, so we should skip it
                const otherAnalyses = settings.analysisTypes.filter(type => 
                    type !== settings.currentAnalysis);

                // If no other analyses, export what we have
                if (otherAnalyses.length === 0) {
                    finalizeExport(wb, settings.fileName);
                    return;
                }

                // For each analysis type, prepare data and add worksheet
                generateAnalysisWorksheets(wb, file.data, otherAnalyses)
                    .then(() => {
                        finalizeExport(wb, settings.fileName);
                    })
                    .catch(error => {
                        console.error('Error generating analysis worksheets:', error);
                        finalizeExport(wb, settings.fileName);
                    });
            })
            .catch(error => {
                console.error('Error getting file data:', error);
                finalizeExport(wb, settings.fileName);
            });
    };

    // Handle all files, current analysis export (Excel)
    const handleAllFilesCurrentAnalysis = (wb, settings) => {
        if (settings.fileIds.length === 0) {
            DataTable.showToast('No files selected for export', 'warning');
            return;
        }

        // Get active tab for current data
        const activeTab = DataTable.getactiveTab();
        const tableData = DataTable.getCurrentData();

        // Add current data first if available
        if (activeTab && tableData) {
            const currentData = prepareWorksheetData(tableData.displayData, tableData.visibleColumns, tableData.columns);
            addWorksheetToWorkbook(wb, currentData, `${settings.currentAnalysis}_current`);
        }

        // Filter out active tab to avoid duplication
        const filesToProcess = settings.fileIds.filter(id => id !== activeTab);
        
        if (filesToProcess.length === 0) {
            finalizeExport(wb, settings.fileName);
            return;
        }

        // Create an array of promises for all file processing
        const promises = filesToProcess.map(fileId => 
            DB.getFileById(fileId)
                .then(file => {
                    if (file && file.data) {
                        // Generate analysis data for this file
                        const analysisData = generateAnalysisData(file.data, settings.currentAnalysis);
                        
                        // Add to workbook with file name as suffix
                        const displayName = file.displayName || file.fileName || fileId.toString();
                        addWorksheetToWorkbook(wb, analysisData, `${settings.currentAnalysis}_${displayName}`);
                    }
                    return true;
                })
                .catch(error => {
                    console.error(`Error processing file ${fileId}:`, error);
                    return false;
                })
        );

        // Wait for all files to be processed
        Promise.all(promises)
            .then(() => {
                finalizeExport(wb, settings.fileName);
            })
            .catch(error => {
                console.error('Error processing files:', error);
                finalizeExport(wb, settings.fileName);
                DataTable.showToast('Some files could not be processed', 'warning');
            });
    };

    // Handle all files, all analysis export (Excel)
    const handleAllFilesAllAnalysis = (wb, settings) => {
        if (settings.fileIds.length === 0) {
            DataTable.showToast('No files selected for export', 'warning');
            return;
        }

        // Create an array of promises for all file processing
        const promises = settings.fileIds.map(fileId => 
            DB.getFileById(fileId)
                .then(file => {
                    if (file && file.data) {
                        return generateAnalysisWorksheets(wb, file.data, settings.analysisTypes, 
                                                         file.displayName || file.fileName || fileId.toString());
                    }
                    return false;
                })
                .catch(error => {
                    console.error(`Error processing file ${fileId}:`, error);
                    return false;
                })
        );

        // Wait for all files to be processed
        Promise.all(promises)
            .then(() => {
                finalizeExport(wb, settings.fileName);
            })
            .catch(error => {
                console.error('Error processing files:', error);
                finalizeExport(wb, settings.fileName);
                DataTable.showToast('Some files could not be processed', 'warning');
            });
    };

    // Handle PDF export for current file, current analysis
    const handleCurrentFileCurrentAnalysisPDF = (doc, settings) => {
        const tableData = DataTable.getCurrentData();
        const activeTab = DataTable.getactiveTab();

        if (!activeTab) {
            DataTable.showToast('No file data available to export', 'warning');
            return;
        }

        // Add title
        doc.setFontSize(18);
        doc.text('CDR Data Export', 40, 40);

        // Add date
        doc.setFontSize(10);
        doc.text(`Generated on: ${new Date().toLocaleString()}`, 40, 60);

        // Add data
        addDataToPDF(doc, tableData.displayData, tableData.visibleColumns, tableData.columns, 
                    settings.currentAnalysis, 80);

        // Save the PDF
        doc.save(settings.fileName);
        DataTable.showToast('Data exported to PDF', 'success');
    };

    // Handle PDF export for current file, all analysis
    const handleCurrentFileAllAnalysisPDF = (doc, settings) => {
        const tableData = DataTable.getCurrentData();
        const activeTab = DataTable.getactiveTab();

        if (!activeTab) {
            DataTable.showToast('No file data available to export', 'warning');
            return;
        }

        // Add title
        doc.setFontSize(18);
        doc.text('CDR Data Export', 40, 40);

        // Add date
        doc.setFontSize(10);
        doc.text(`Generated on: ${new Date().toLocaleString()}`, 40, 60);

        // Add current analysis first
        let yPosition = 80;
        yPosition = addDataToPDF(doc, tableData.displayData, tableData.visibleColumns, tableData.columns, 
                                settings.currentAnalysis, yPosition);

        // Load and add other analyses
        DB.getFileById(activeTab)
            .then(file => {
                if (!file || !file.data) {
                    doc.save(settings.fileName);
                    DataTable.showToast('Data exported to PDF', 'success');
                    return;
                }

                // Skip current analysis
                const otherAnalyses = settings.analysisTypes.filter(type => 
                    type !== settings.currentAnalysis);

                if (otherAnalyses.length === 0) {
                    doc.save(settings.fileName);
                    DataTable.showToast('Data exported to PDF', 'success');
                    return;
                }

                // For each analysis type, prepare data and add to PDF
                generateAnalysisPDFSections(doc, file.data, otherAnalyses, yPosition)
                    .then(() => {
                        doc.save(settings.fileName);
                        DataTable.showToast('Data exported to PDF', 'success');
                    })
                    .catch(error => {
                        console.error('Error generating analysis PDF sections:', error);
                        doc.save(settings.fileName);
                        DataTable.showToast('Data exported to PDF (partial)', 'warning');
                    });
            })
            .catch(error => {
                console.error('Error getting file data:', error);
                doc.save(settings.fileName);
                DataTable.showToast('Data exported to PDF (partial)', 'warning');
            });
    };

    // Handle PDF export for all files, current analysis
    const handleAllFilesCurrentAnalysisPDF = (doc, settings) => {
        if (settings.fileIds.length === 0) {
            DataTable.showToast('No files selected for export', 'warning');
            return;
        }

        // Add title
        doc.setFontSize(18);
        doc.text('CDR Data Export - All Files', 40, 40);

        // Add date
        doc.setFontSize(10);
        doc.text(`Generated on: ${new Date().toLocaleString()}`, 40, 60);

        // Process each file sequentially to maintain PDF structure
        const processFiles = async (fileIds, index = 0, yPos = 80) => {
            if (index >= fileIds.length) {
                // All files processed, save the PDF
                doc.save(settings.fileName);
                DataTable.showToast('Data exported to PDF', 'success');
                return;
            }

            try {
                const file = await DB.getFileById(fileIds[index]);
                
                if (file && file.data) {
                    // Add page for each file except first
                    if (index > 0) {
                        doc.addPage();
                        yPos = 80;
                        
                        // Add header for the new page
                        doc.setFontSize(14);
                        doc.text(`File: ${file.displayName || file.fileName || fileIds[index]}`, 40, 40);
                        doc.setFontSize(10);
                        doc.text(`Analysis: ${settings.currentAnalysis}`, 40, 60);
                    } else {
                        // For first file, add header on first page
                        doc.setFontSize(14);
                        doc.text(`File: ${file.displayName || file.fileName || fileIds[index]}`, 40, yPos);
                        yPos += 20;
                    }
                    
                    // Generate analysis data
                    const analysisData = generateAnalysisData(file.data, settings.currentAnalysis);
                    
                    // Add to PDF
                    yPos = addDataToPDF(doc, analysisData, null, null, settings.currentAnalysis, yPos);
                }
                
                // Process next file
                await processFiles(fileIds, index + 1, yPos);
            } catch (error) {
                console.error(`Error processing file ${fileIds[index]}:`, error);
                // Continue with next file
                await processFiles(fileIds, index + 1, yPos);
            }
        };

        // Start processing files
        processFiles(settings.fileIds);
    };

    // Handle PDF export for all files, all analysis
    const handleAllFilesAllAnalysisPDF = (doc, settings) => {
        if (settings.fileIds.length === 0) {
            DataTable.showToast('No files selected for export', 'warning');
            return;
        }

        // Add title
        doc.setFontSize(18);
        doc.text('CDR Data Export - Complete Report', 40, 40);

        // Add date
        doc.setFontSize(10);
        doc.text(`Generated on: ${new Date().toLocaleString()}`, 40, 60);

        // Create a table of contents
        doc.setFontSize(14);
        doc.text('Table of Contents', 40, 80);
        
        let yPos = 100;
        let pageNum = 1;
        const toc = [];

        // Add TOC entries for each file and analysis
        settings.fileIds.forEach(fileId => {
            settings.analysisTypes.forEach(analysisType => {
                pageNum++;
                toc.push({ fileId, analysisType, page: pageNum });
                doc.setFontSize(10);
                doc.text(`File ${fileId} - ${analysisType}`, 60, yPos);
                doc.text(`Page ${pageNum}`, 400, yPos);
                yPos += 20;
                
                if (yPos > 700) {
                    doc.addPage();
                    yPos = 80;
                }
            });
        });

        // Process all files and analyses
        const processFilesAndAnalyses = async () => {
            for (const { fileId, analysisType, page } of toc) {
                try {
                    const file = await DB.getFileById(fileId);
                    
                    if (file && file.data) {
                        // Add new page for each analysis
                        doc.addPage();
                        
                        // Add header
                        doc.setFontSize(14);
                        doc.text(`File: ${file.displayName || file.fileName || fileId}`, 40, 40);
                        doc.text(`Analysis: ${analysisType}`, 40, 60);
                        
                        // Generate analysis data
                        const analysisData = generateAnalysisData(file.data, analysisType);
                        
                        // Add to PDF
                        addDataToPDF(doc, analysisData, null, null, analysisType, 80);
                    }
                } catch (error) {
                    console.error(`Error processing file ${fileId} analysis ${analysisType}:`, error);
                    // Continue with next item
                }
            }
            
            // Save the PDF
            doc.save(settings.fileName);
            DataTable.showToast('Complete report exported to PDF', 'success');
        };

        // Start processing
        processFilesAndAnalyses();
    };

    // Prepare worksheet data from table data
    const prepareWorksheetData = (data, visibleColumns = null, columns = null) => {
        if (!data || data.length === 0) {
            return [[]];
        }

        let wsData = [];

        // If visibleColumns and columns provided, filter data to show only visible columns
        if (visibleColumns && columns) {
            const visibleIndices = visibleColumns.map(colId =>
                columns.findIndex(col => col.id === colId)
            ).filter(idx => idx !== -1);

            // Add header row
            const headerRow = visibleIndices.map(i => columns[i].name);
            wsData.push(headerRow);

            // Add data rows (skip header in original data)
            for (let i = 1; i < data.length; i++) {
                const row = data[i];
                if (!row) continue;
                
                const rowValues = visibleIndices.map(colIndex => 
                    (colIndex < row.length) ? (row[colIndex] || '') : '');
                wsData.push(rowValues);
            }
        } else {
            // Use full data
            wsData = [...data];
        }

        return wsData;
    };

    // Add worksheet to workbook
    const addWorksheetToWorkbook = (wb, data, sheetName) => {
        if (!data || !data[0]) {
            console.warn(`No data for worksheet: ${sheetName}`);
            return;
        }
        
        // Sanitize sheet name (Excel has a 31 character limit and disallows certain characters)
        const safeName = sheetName.replace(/[\[\]\*\/\\\?:]/g, '_').substring(0, 31);

        // Create worksheet
        const ws = XLSX.utils.aoa_to_sheet(data);

        // Add basic styling
        if (!ws['!cols']) ws['!cols'] = [];

        // Auto-size columns based on content
        for (let i = 0; i < data[0].length; i++) {
            let maxWidth = 10; // Minimum width

            for (let j = 0; j < data.length; j++) {
                if (data[j] && data[j][i]) {
                    const cellValue = String(data[j][i] || '');
                    const cellWidth = cellValue.length * 1.2; // Approximate width

                    if (cellWidth > maxWidth) {
                        maxWidth = cellWidth;
                    }
                }
            }

            ws['!cols'][i] = { wch: Math.min(maxWidth, 50) }; // Max width of 50
        }

        // Format header row
        const range = XLSX.utils.decode_range(ws['!ref']);
        for (let i = range.s.c; i <= range.e.c; i++) {
            const cellRef = XLSX.utils.encode_cell({ r: 0, c: i });
            if (!ws[cellRef]) continue;

            ws[cellRef].s = {
                fill: { fgColor: { rgb: '4A6CF7' } },
                font: { color: { rgb: 'FFFFFF' }, bold: true },
                alignment: { vertical: 'center', horizontal: 'center' }
            };
        }

        // Add worksheet to workbook
        try {
            XLSX.utils.book_append_sheet(wb, ws, safeName);
        } catch (error) {
            console.error(`Error adding worksheet ${safeName}:`, error);
            // Try with default name if there's an error
            try {
                XLSX.utils.book_append_sheet(wb, ws, 'Sheet' + (wb.SheetNames.length + 1));
            } catch (e) {
                console.error('Failed to add worksheet with default name:', e);
            }
        }
    };

    // Generate analysis worksheets for a file
    const generateAnalysisWorksheets = async (wb, fileData, analysisTypes, filePrefix = '') => {
        const total = analysisTypes.length;
        let processed = 0;
        
        try {
            // Process each analysis type
            for (const analysisType of analysisTypes) {
                try {
                    // Generate analysis data
                    const analysisData = generateAnalysisData(fileData, analysisType);

                    // Add worksheet to workbook
                    const sheetName = filePrefix ?
                        `${analysisType}_${filePrefix}` :
                        analysisType;

                    addWorksheetToWorkbook(wb, analysisData, sheetName);
                    
                    processed++;
                    if (processed % 5 === 0 || processed === total) {
                        DataTable.showToast(`Processing: ${processed}/${total} analyses...`, 'info');
                    }
                } catch (error) {
                    console.error(`Error generating worksheet for ${analysisType}:`, error);
                }
            }
            return true;
        } catch (error) {
            console.error('Error in generateAnalysisWorksheets:', error);
            throw error;
        }
    };

    // Generate PDF sections for each analysis
    const generateAnalysisPDFSections = async (doc, fileData, analysisTypes, startY) => {
        try {
            let yPosition = startY;
            let currentPage = doc.getCurrentPageInfo().pageNumber;

            // Process each analysis type
            for (const analysisType of analysisTypes) {
                // Check if we need a new page
                if (yPosition > 700 || doc.getCurrentPageInfo().pageNumber !== currentPage) {
                    doc.addPage();
                    yPosition = 80;
                    currentPage = doc.getCurrentPageInfo().pageNumber;
                }

                try {
                    // Generate analysis data
                    const analysisData = generateAnalysisData(fileData, analysisType);

                    // Add section title
                    doc.setFontSize(14);
                    doc.text(`CDR Analysis: ${analysisType}`, 40, yPosition);
                    yPosition += 30;

                    // Add data to PDF
                    yPosition = addDataToPDF(doc, analysisData, null, null, analysisType, yPosition);
                    
                    // Add extra spacing after each analysis
                    yPosition += 20;
                } catch (error) {
                    console.error(`Error generating PDF section for ${analysisType}:`, error);
                    yPosition += 30;
                }
            }

            return true;
        } catch (error) {
            console.error('Error in generateAnalysisPDFSections:', error);
            throw error;
        }
    };

    // Generate analysis data based on type
    const generateAnalysisData = (fileData, analysisType) => {
        // Extract header row
        const headerRow = [...fileData[0]];

        switch (analysisType) {
            case 'cdr':
                // Original data with no processing
                return fileData;

            case 'maximum-b-party':
                return generateMaximumBPartyAnalysis(fileData, headerRow);

            case 'max-imei':
                return generateMaxIMEIAnalysis(fileData, headerRow);

            case 'max-imsi':
                return generateMaxIMSIAnalysis(fileData, headerRow);

            case 'call-max-location':
                return generateCallMaxLocationAnalysis(fileData, headerRow);
                
            case 'max-day-stay':
                return generateMaxDayStayAnalysis(fileData, headerRow);
                
            case 'max-night-stay':
                return generateMaxNightStayAnalysis(fileData, headerRow);

            case 'sms-analysis':
                return generateSMSAnalysis(fileData, headerRow);

            case 'common-b-party':
                return generateCommonBPartyAnalysis(fileData, headerRow);

            case 'common-imei':
                return generateCommonIMEIAnalysis(fileData, headerRow);

            case 'mobile-brief':
                return generateMobileBriefAnalysis(fileData, headerRow);
                
            case 'network-graph':
                return generateNetworkGraphAnalysis(fileData, headerRow);

            default:
                // For unknown analysis types, return empty data with header
                return [headerRow];
        }
    };

    // Generate Maximum B Party Analysis
    const generateMaximumBPartyAnalysis = (fileData, headerRow) => {
        const bPartyIndex = headerRow.indexOf('B Party');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        const durationIndex = headerRow.indexOf('Duration');
        const targetNoIndex = headerRow.indexOf('Target No');
        const lrnIndex = headerRow.indexOf('LRN'); // Add LRN column index

        if (bPartyIndex === -1) {
            return [['Target No', 'B Party', 'B Party Operator & Circle', 'Maximum Calls', 'Maximum Call Duration', 'First Call', 'Last Call']];
        }

        const bPartyStats = {};
        const mobilePattern = /^[6-9]\d{9}$/;

        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            let bParty = row[bPartyIndex];
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : '-';
            const duration = parseInt(row[durationIndex]) || 0;
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const time = timeIndex !== -1 ? row[timeIndex] : '';
            const lrn = lrnIndex !== -1 ? row[lrnIndex] : ''; // Get LRN value

            if (bParty) {
                bParty = formatMobileNumber(bParty);
                if (mobilePattern.test(bParty)) {
                    if (!bPartyStats[bParty]) {
                        bPartyStats[bParty] = {
                            targetNo,
                            count: 0,
                            totalDuration: 0,
                            firstCall: { date, time },
                            lastCall: { date, time },
                            lrn: lrn // Store LRN
                        };
                    } else {
                        if (date && compareDate(date, time, bPartyStats[bParty].firstCall.date, bPartyStats[bParty].firstCall.time) < 0) {
                            bPartyStats[bParty].firstCall = { date, time };
                        }
                        if (date && compareDate(date, time, bPartyStats[bParty].lastCall.date, bPartyStats[bParty].lastCall.time) > 0) {
                            bPartyStats[bParty].lastCall = { date, time };
                        }
                    }
                    bPartyStats[bParty].count++;
                    bPartyStats[bParty].totalDuration += duration;
                }
            }
        }

        const result = [
            ['Target No', 'B Party', 'B Party Operator & Circle', 'Maximum Calls', 'Maximum Call Duration', 'First Call', 'Last Call']
        ];
        
        Object.entries(bPartyStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([bParty, stats]) => {
                const operatorCircle = stats.lrn ? getOperatorCircleFromLRN(stats.lrn) : '';
                
                result.push([
                    stats.targetNo,
                    bParty,
                    operatorCircle,
                    stats.count,
                    formatDuration(stats.totalDuration),
                    `${stats.firstCall.date} ${stats.firstCall.time}`,
                    `${stats.lastCall.date} ${stats.lastCall.time}`
                ]);
            });

        return result;
    };

    // Generate Max IMEI Analysis - UPDATED VERSION
    const generateMaxIMEIAnalysis = (fileData, headerRow) => {
        // Get column indices
        const indices = {
            imei: headerRow.indexOf('IMEI'),
            date: headerRow.indexOf('Date'),
            time: headerRow.indexOf('Time'),
            targetNo: headerRow.indexOf('Target No'),
            bParty: headerRow.indexOf('B Party'),
            duration: headerRow.indexOf('Duration')
        };

        if (indices.imei === -1) {
            return [['Target No', 'IMEI', 'Call Count', 'Total Duration', 
                    'First Call Date Time', 'First Call B Party', 
                    'Last Call Date Time', 'Last Call B Party', 
                    'Marketing Name', 'Brand Name', 'Model Name']];
        }

        // Data structure to store IMEI information
        const imeiStats = {};

        // First pass: gather unique target numbers per IMEI
        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const imei = row[indices.imei];
            const targetNo = indices.targetNo !== -1 ? row[indices.targetNo] : '-';

            if (!imei || imei.length === 0) continue;

            if (!imeiStats[imei]) {
                imeiStats[imei] = {
                    targetNumbers: new Set(),
                    deviceInfo: {
                        marketingName: 'Unknown',
                        brandName: 'Unknown',
                        modelName: 'Unknown'
                    },
                    targetStats: {}
                };
            }

            if (targetNo) imeiStats[imei].targetNumbers.add(targetNo);
        }

        // Second pass: collect call statistics per target number
        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const imei = row[indices.imei];
            const targetNo = indices.targetNo !== -1 ? row[indices.targetNo] : '-';
            
            if (!imei || imei.length === 0 || !targetNo) continue;
            
            const date = indices.date !== -1 ? formatDate(row[indices.date], row[indices.time]) || '' : '';
            const time = indices.time !== -1 ? row[indices.time] : '';
            const bParty = indices.bParty !== -1 ? row[indices.bParty] : '-';
            const duration = indices.duration !== -1 ? parseInt(row[indices.duration]) || 0 : 0;

            // Initialize target stats if not exists
            if (!imeiStats[imei].targetStats[targetNo]) {
                imeiStats[imei].targetStats[targetNo] = {
                    count: 0,
                    totalDuration: 0,
                    firstCall: { date, time, bParty },
                    lastCall: { date, time, bParty }
                };
            }

            // Update statistics
            const stats = imeiStats[imei].targetStats[targetNo];
            stats.count++;
            stats.totalDuration += duration;

            // Update first call if current date/time is earlier
            if (date && compareDateTime(date, stats.firstCall.date) < 0) {
                stats.firstCall = { date, time, bParty };
            }

            // Update last call if current date/time is later
            if (date && compareDateTime(date, stats.lastCall.date) > 0) {
                stats.lastCall = { date, time, bParty };
            }
        }

        // Create result table
        const result = [
            ['Target No', 'IMEI', 'Call Count', 'Total Duration', 
             'First Call Date Time', 'First Call B Party', 
             'Last Call Date Time', 'Last Call B Party',
             'Marketing Name', 'Brand Name', 'Model Name']
        ];

        // Add rows to result - For Excel export, we create separate rows for each target
        Object.entries(imeiStats)
            .sort((a, b) => {
                // Sort by total call count across all targets
                const sumA = Object.values(a[1].targetStats).reduce((sum, stat) => sum + stat.count, 0);
                const sumB = Object.values(b[1].targetStats).reduce((sum, stat) => sum + stat.count, 0);
                return sumB - sumA;
            })
            .forEach(([imei, stats]) => {
                const targetNumbers = Array.from(stats.targetNumbers);

                targetNumbers.forEach(targetNo => {
                    const targetStats = stats.targetStats[targetNo] || {
                        count: 0,
                        totalDuration: 0,
                        firstCall: { date: '', time: '', bParty: '-' },
                        lastCall: { date: '', time: '', bParty: '-' }
                    };

                    result.push([
                        targetNo,
                        imei,
                        targetStats.count,
                        formatDuration(targetStats.totalDuration),
                        `${targetStats.firstCall.date} ${targetStats.firstCall.time}`,
                        targetStats.firstCall.bParty,
                        `${targetStats.lastCall.date} ${targetStats.lastCall.time}`,
                        targetStats.lastCall.bParty,
                        stats.deviceInfo.marketingName,
                        stats.deviceInfo.brandName,
                        stats.deviceInfo.modelName
                    ]);
                });
            });

        return result;
    };

    // Generate Max IMSI Analysis
    const generateMaxIMSIAnalysis = (fileData, headerRow) => {
        const imsiIndex = headerRow.indexOf('IMSI');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        const targetNoIndex = headerRow.indexOf('Target No');

        if (imsiIndex === -1) {
            return [['Target No', 'IMSI', 'Count', 'First Usage', 'Last Usage']];
        }

        const imsiStats = {};

        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const imsi = row[imsiIndex];
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : '-';

            if (imsi && imsi.length > 0) {
                if (!imsiStats[imsi]) {
                    imsiStats[imsi] = {
                        count: 0,
                        firstDate: formatDate(row[dateIndex], row[timeIndex]) || '',
                        lastDate: '',
                        targetNumbers: new Set()
                    };
                }

                imsiStats[imsi].count++;
                if (targetNo) imsiStats[imsi].targetNumbers.add(targetNo);

                if (dateIndex !== -1) {
                    const currentDate = formatDate(row[dateIndex], row[timeIndex]) || '';
                    if (!imsiStats[imsi].lastDate || currentDate > imsiStats[imsi].lastDate) {
                        imsiStats[imsi].lastDate = currentDate;
                    }
                }
            }
        }

        const result = [
            ['Target No', 'IMSI', 'Count', 'First Usage', 'Last Usage']
        ];

        Object.entries(imsiStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([imsi, stats]) => {
                result.push([
                    Array.from(stats.targetNumbers).join(', ') || '-',
                    imsi,
                    stats.count,
                    stats.firstDate,
                    stats.lastDate
                ]);
            });

        return result;
    };

    // Generate Call Max Location Analysis
    const generateCallMaxLocationAnalysis = (fileData, headerRow) => {
        const targetNoIndex = headerRow.indexOf('Target No');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        const cellIdIndex = headerRow.indexOf('First Cell ID');
        const cellAddressIndex = headerRow.indexOf('First Cell ID Address');
        const bPartyIndex = headerRow.indexOf('B Party');
        const durationIndex = headerRow.indexOf('Duration');

        if (cellIdIndex === -1 && cellAddressIndex === -1) {
            return [['Target No', 'Cell ID', 'Cell ID Address', 'Call Count', 'Total Duration', 
                   'First Call Date Time', 'First Call B Party', 'Last Call Date Time', 'Last Call B Party']];
        }

        const locationStats = {};

        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const cellId = cellIdIndex !== -1 ? row[cellIdIndex] : '';
            const cellAddress = cellAddressIndex !== -1 ? row[cellAddressIndex] : '';
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const time = timeIndex !== -1 ? row[timeIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const duration = durationIndex !== -1 ? parseDuration(row[durationIndex]) : 0;

            const locationKey = cellId || cellAddress;
            if (locationKey && date && time) {
                const currentDateTime = `${date} ${time}`;

                if (!locationStats[locationKey]) {
                    locationStats[locationKey] = {
                        cellId: cellId,
                        cellAddress: cellAddress,
                        targetNo: targetNo,
                        targetNumbers: new Set([targetNo]),
                        callCount: 0,
                        totalDuration: 0,
                        firstCall: {
                            dateTime: currentDateTime,
                            bParty: bParty
                        },
                        lastCall: {
                            dateTime: currentDateTime,
                            bParty: bParty
                        }
                    };
                } else {
                    locationStats[locationKey].targetNumbers.add(targetNo);
                }

                locationStats[locationKey].callCount++;
                locationStats[locationKey].totalDuration += duration;

                // Compare dates for first and last call
                if (compareDateTime(currentDateTime, locationStats[locationKey].firstCall.dateTime) < 0) {
                    locationStats[locationKey].firstCall = {
                        dateTime: currentDateTime,
                        bParty: bParty
                    };
                }

                if (compareDateTime(currentDateTime, locationStats[locationKey].lastCall.dateTime) > 0) {
                    locationStats[locationKey].lastCall = {
                        dateTime: currentDateTime,
                        bParty: bParty
                    };
                }
            }
        }

        const result = [
            ['Target No', 'Cell ID', 'Cell ID Address', 'Call Count', 'Total Duration', 
             'First Call Date Time', 'First Call B Party', 'Last Call Date Time', 'Last Call B Party']
        ];

        Object.entries(locationStats)
            .sort((a, b) => b[1].callCount - a[1].callCount)
            .forEach(([key, stats]) => {
                result.push([
                    Array.from(stats.targetNumbers).join(', '),
                    stats.cellId,
                    stats.cellAddress,
                    stats.callCount,
                    formatDuration(stats.totalDuration),
                    stats.firstCall.dateTime,
                    stats.firstCall.bParty,
                    stats.lastCall.dateTime,
                    stats.lastCall.bParty
                ]);
            });

        return result;
    };

    // Generate Max Day Stay Analysis
    const generateMaxDayStayAnalysis = (fileData, headerRow) => {
        const targetNoIndex = headerRow.indexOf('Target No');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        const cellIdIndex = headerRow.indexOf('First Cell ID');
        const cellIdAddressIndex = headerRow.indexOf('First Cell ID Address');
        const bPartyIndex = headerRow.indexOf('B Party');
        const durationIndex = headerRow.indexOf('Duration');

        if (cellIdAddressIndex === -1 || timeIndex === -1) {
            return [['Target', 'First Cell ID', 'First Cell ID Address', 'Total Count Cell ID', 
                    'Total Duration of calls', 'First Date', 'First Time', 'First B Party', 
                    'Last Date', 'Last Time', 'Last B Party']];
        }

        const stayStats = {};

        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const time = row[timeIndex];
            
            // Skip if time is not in the desired range (day: 06:00-18:00)
            if (!isDayTime(time)) continue;
            
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const cellId = cellIdIndex !== -1 ? row[cellIdIndex] : '';
            const cellIdAddress = cellIdAddressIndex !== -1 ? row[cellIdAddressIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            const duration = durationIndex !== -1 ? parseDuration(row[durationIndex]) : 0;

            if (cellId && date && time) {
                if (!stayStats[cellId]) {
                    stayStats[cellId] = {
                        targetNo: targetNo,
                        cellIdAddress: cellIdAddress,
                        count: 0,
                        totalDuration: 0,
                        firstCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        },
                        lastCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        }
                    };
                }

                stayStats[cellId].count++;
                stayStats[cellId].totalDuration += duration;

                // Compare dates for first and last call
                if (compareDate(date, time, stayStats[cellId].firstCall.date, stayStats[cellId].firstCall.time) < 0) {
                    stayStats[cellId].firstCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }

                if (compareDate(date, time, stayStats[cellId].lastCall.date, stayStats[cellId].lastCall.time) > 0) {
                    stayStats[cellId].lastCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }
            }
        }

        const result = [
            ['Target', 'First Cell ID', 'First Cell ID Address', 'Total Count Cell ID', 
             'Total Duration of calls', 'First Date', 'First Time', 'First B Party', 
             'Last Date', 'Last Time', 'Last B Party']
        ];

        Object.entries(stayStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([cellId, stats]) => {
                result.push([
                    stats.targetNo,
                    cellId,
                    stats.cellIdAddress,
                    stats.count,
                    formatDuration(stats.totalDuration),
                    stats.firstCall.date,
                    stats.firstCall.time,
                    stats.firstCall.bParty,
                    stats.lastCall.date,
                    stats.lastCall.time,
                    stats.lastCall.bParty
                ]);
            });

        return result;
    };

    // Generate Max Night Stay Analysis
    const generateMaxNightStayAnalysis = (fileData, headerRow) => {
        const targetNoIndex = headerRow.indexOf('Target No');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        const cellIdIndex = headerRow.indexOf('First Cell ID');
        const cellIdAddressIndex = headerRow.indexOf('First Cell ID Address');
        const bPartyIndex = headerRow.indexOf('B Party');
        const durationIndex = headerRow.indexOf('Duration');

        if (cellIdAddressIndex === -1 || timeIndex === -1) {
            return [['Target', 'First Cell ID', 'First Cell ID Address', 'Total Count Cell ID', 
                    'Total Duration of calls', 'First Date', 'First Time', 'First B Party', 
                    'Last Date', 'Last Time', 'Last B Party']];
        }

        const stayStats = {};

        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const time = row[timeIndex];
            
            // Skip if time is not in the desired range (night: 18:00-06:00)
            if (isDayTime(time)) continue;
            
            const targetNo = targetNoIndex !== -1 ? row[targetNoIndex] : 'Unknown';
            const date = dateIndex !== -1 ? row[dateIndex] : '';
            const cellId = cellIdIndex !== -1 ? row[cellIdIndex] : '';
            const cellIdAddress = cellIdAddressIndex !== -1 ? row[cellIdAddressIndex] : '';
            const bParty = bPartyIndex !== -1 ? row[bPartyIndex] : '';
            const duration = durationIndex !== -1 ? parseDuration(row[durationIndex]) : 0;

            if (cellId && date && time) {
                if (!stayStats[cellId]) {
                    stayStats[cellId] = {
                        targetNo: targetNo,
                        cellIdAddress: cellIdAddress,
                        count: 0,
                        totalDuration: 0,
                        firstCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        },
                        lastCall: {
                            date: date,
                            time: time,
                            bParty: bParty
                        }
                    };
                }

                stayStats[cellId].count++;
                stayStats[cellId].totalDuration += duration;

                // Compare dates for first and last call
                if (compareDate(date, time, stayStats[cellId].firstCall.date, stayStats[cellId].firstCall.time) < 0) {
                    stayStats[cellId].firstCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }

                if (compareDate(date, time, stayStats[cellId].lastCall.date, stayStats[cellId].lastCall.time) > 0) {
                    stayStats[cellId].lastCall = {
                        date: date,
                        time: time,
                        bParty: bParty
                    };
                }
            }
        }

        const result = [
            ['Target', 'First Cell ID', 'First Cell ID Address', 'Total Count Cell ID', 
             'Total Duration of calls', 'First Date', 'First Time', 'First B Party', 
             'Last Date', 'Last Time', 'Last B Party']
        ];

        Object.entries(stayStats)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([cellId, stats]) => {
                result.push([
                    stats.targetNo,
                    cellId,
                    stats.cellIdAddress,
                    stats.count,
                    formatDuration(stats.totalDuration),
                    stats.firstCall.date,
                    stats.firstCall.time,
                    stats.firstCall.bParty,
                    stats.lastCall.date,
                    stats.lastCall.time,
                    stats.lastCall.bParty
                ]);
            });

        return result;
    };

    // Generate SMS Analysis
    const generateSMSAnalysis = (fileData, headerRow) => {
        const bPartyIndex = headerRow.indexOf('B Party');
        const serviceTypeIndex = headerRow.indexOf('Service Type');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');

        if (bPartyIndex === -1) {
            return [['SMS Code', 'Count', 'Entity Name', 'Purpose']];
        }

        // Filter SMS records and count by SMS code/header
        const smsHeaders = {};

        // Process each row
        for (let i = 1; i < fileData.length; i++) {
            const row = fileData[i];
            const bParty = row[bPartyIndex];
            const serviceType = serviceTypeIndex !== -1 ? row[serviceTypeIndex] : '';

            // Check if this is an SMS
            const isSMS = serviceType &&
                (serviceType.toUpperCase().includes('SMS') ||
                serviceType.toUpperCase().includes('MESSAGE'));

            // Process SMS headers (not 10-digit numbers)
            if (bParty && (bParty.length < 10 || /[^0-9]/.test(bParty))) {
                const smsCode = parseSMSHeader(bParty);

                if (smsCode) {
                    if (!smsHeaders[smsCode]) {
                        smsHeaders[smsCode] = {
                            count: 0,
                            entityName: 'Unknown',
                            purpose: 'Unknown'
                        };
                    }

                    smsHeaders[smsCode].count++;
                }
            }
        }

        const result = [
            ['SMS Code', 'Count', 'Entity Name', 'Purpose']
        ];

        // Add data rows
        Object.entries(smsHeaders)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([code, info]) => {
                result.push([
                    code,
                    info.count,
                    info.entityName,
                    info.purpose
                ]);
            });

        return result;
    };

    // Generate Common B Party Analysis
    const generateCommonBPartyAnalysis = (fileData, headerRow) => {
        // Note: Common analysis requires multiple files, but for export we can only show data from one file
        // We'll include a message in the header row to indicate this
        const bPartyIndex = headerRow.indexOf('B Party');
        
        if (bPartyIndex === -1) {
            return [['B Party', 'Found In Files', 'Count']];
        }
        
        // Count occurrences of B Party numbers
        const bPartyOccurrences = {};
        const mobilePattern = /^[6-9]\d{9}$/;

        for (let i = 1; i < fileData.length; i++) {
            let bParty = fileData[i][bPartyIndex];

            if (bParty) {
                // Clean and format number
                bParty = formatMobileNumber(bParty);

                // Only include 10-digit mobile numbers
                if (mobilePattern.test(bParty)) {
                    bPartyOccurrences[bParty] = (bPartyOccurrences[bParty] || 0) + 1;
                }
            }
        }

        const result = [
            ['B Party', 'Found In Files', 'Count', 'Note: Common analysis requires multiple files']
        ];

        // Sort by count (descending)
        Object.entries(bPartyOccurrences)
            .sort((a, b) => b[1] - a[1])
            .forEach(([bParty, count]) => {
                result.push([bParty, 'Current file', count]);
            });

        return result;
    };

    // Generate Common IMEI Analysis
    const generateCommonIMEIAnalysis = (fileData, headerRow) => {
        // Note: Common analysis requires multiple files, but for export we can only show data from one file
        const imeiIndex = headerRow.indexOf('IMEI');
        const targetNoIndex = headerRow.indexOf('Target No');
        
        if (imeiIndex === -1) {
            return [['IMEI', 'Target Nos', 'Found In Files', 'Files Count']];
        }
        
        // Map to store IMEI occurrences
        const imeiOccurrences = {};

        // Process IMEI numbers
        for (let i = 1; i < fileData.length; i++) {
            const imei = fileData[i][imeiIndex];
            const targetNo = targetNoIndex !== -1 ? fileData[i][targetNoIndex] : 'Unknown';

            if (imei && imei.length >= 14 && imei.length <= 16) { // Valid IMEI length check
                if (!imeiOccurrences[imei]) {
                    imeiOccurrences[imei] = {
                        count: 0,
                        targetNumbers: new Set()
                    };
                }
                
                imeiOccurrences[imei].count++;
                if (targetNo) {
                    imeiOccurrences[imei].targetNumbers.add(targetNo);
                }
            }
        }

        const result = [
            ['IMEI', 'Target Nos', 'Found In Files', 'Files Count', 'Note: Common analysis requires multiple files']
        ];

        // Sort by count (descending)
        Object.entries(imeiOccurrences)
            .sort((a, b) => b[1].count - a[1].count)
            .forEach(([imei, data]) => {
                result.push([
                    imei, 
                    Array.from(data.targetNumbers).join(', '), 
                    'Current file', 
                    1
                ]);
            });

        return result;
    };

    // Generate Mobile Brief Analysis
    const generateMobileBriefAnalysis = (fileData, headerRow) => {
        const targetNumberIndex = headerRow.indexOf("Target No");
        const imeiIndex = headerRow.indexOf("IMEI");
        const bPartyIndex = headerRow.indexOf("B Party");
        const firstCellIdIndex = headerRow.indexOf("First Cell ID");
        
        if (targetNumberIndex === -1) {
            return [['SNO', 'Mobile No', 'CAF', 'IMEI', 'B Party', 'Call Max Location', 'REFERENCE']];
        }
        
        // Get target number
        let targetNumber = '';
        for (let i = 1; i < fileData.length; i++) {
            if (fileData[i][targetNumberIndex]) {
                targetNumber = fileData[i][targetNumberIndex];
                break;
            }
        }
        
        // Get top IMEIs
        const imeis = new Set();
        if (imeiIndex !== -1) {
            for (let i = 1; i < fileData.length; i++) {
                const imei = fileData[i][imeiIndex];
                if (imei) {
                    imeis.add(imei);
                }
            }
        }
        const topImeis = Array.from(imeis).slice(0, 10);
        
        // Get top B Party numbers
        const bPartyData = {};
        if (bPartyIndex !== -1) {
            for (let i = 1; i < fileData.length; i++) {
                const bParty = fileData[i][bPartyIndex];
                if (bParty && /^[6-9]\d{9}$/.test(formatMobileNumber(bParty))) {
                    const formattedBParty = formatMobileNumber(bParty);
                    bPartyData[formattedBParty] = (bPartyData[formattedBParty] || 0) + 1;
                }
            }
        }
        const topBParties = Object.entries(bPartyData)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .map(([number]) => number);
        
        // Get top Cell IDs
        const cellIdData = {};
        if (firstCellIdIndex !== -1) {
            for (let i = 1; i < fileData.length; i++) {
                const cellId = fileData[i][firstCellIdIndex];
                if (cellId) {
                    cellIdData[cellId] = (cellIdData[cellId] || 0) + 1;
                }
            }
        }
        const topCellIds = Object.entries(cellIdData)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .map(([cellId]) => cellId);
        
        const result = [
            ['SNO', 'Mobile No', 'CAF', 'IMEI', 'B Party', 'Call Max Location', 'REFERENCE']
        ];
        
        result.push([
            1,
            targetNumber,
            '',
            topImeis.join('\n'),
            topBParties.join('\n'),
            topCellIds.join('\n'),
            ''
        ]);
        
        return result;
    };

    // Generate Network Graph Analysis
    const generateNetworkGraphAnalysis = (fileData, headerRow) => {
        // Network Graph is primarily a visualization, so we'll export a table of connections
        const targetNoIndex = headerRow.indexOf('Target No');
        const bPartyIndex = headerRow.indexOf('B Party');
        const dateIndex = headerRow.indexOf('Date');
        const timeIndex = headerRow.indexOf('Time');
        
        if (targetNoIndex === -1 || bPartyIndex === -1) {
            return [['From', 'To', 'Number of Calls', 'First Contact', 'Last Contact']];
        }
        
        // Track all connections
        const connections = {};
        
        for (let i = 1; i < fileData.length; i++) {
            const targetNo = fileData[i][targetNoIndex];
            const bParty = fileData[i][bPartyIndex];
            
            if (targetNo && bParty && targetNo !== bParty) {
                const key = `${targetNo}-${bParty}`;
                const date = dateIndex !== -1 ? fileData[i][dateIndex] : '';
                const time = timeIndex !== -1 ? fileData[i][timeIndex] : '';
                const dateTime = formatDate(date, time);
                
                if (!connections[key]) {
                    connections[key] = {
                        from: targetNo,
                        to: bParty,
                        count: 0,
                        firstContact: dateTime,
                        lastContact: dateTime
                    };
                }
                
                connections[key].count++;
                
                if (dateTime) {
                    if (dateTime < connections[key].firstContact) {
                        connections[key].firstContact = dateTime;
                    }
                    if (dateTime > connections[key].lastContact) {
                        connections[key].lastContact = dateTime;
                    }
                }
            }
        }
        
        const result = [
            ['From', 'To', 'Number of Calls', 'First Contact', 'Last Contact']
        ];
        
        // Add all connections
        Object.values(connections)
            .sort((a, b) => b.count - a.count)
            .forEach(conn => {
                result.push([
                    conn.from,
                    conn.to,
                    conn.count,
                    conn.firstContact,
                    conn.lastContact
                ]);
            });
        
        return result;
    };

    // Add data to PDF
    const addDataToPDF = (doc, data, visibleColumns = null, columns = null, title = 'Data', startY = 80) => {
        if (!data || data.length <= 1) {
            return startY + 20; // Return next Y position
        }

        let tableData = [];
        let tableHeaders = [];

        // If visibleColumns and columns provided, filter data to show only visible columns
        if (visibleColumns && columns) {
            const visibleIndices = visibleColumns.map(colId =>
                columns.findIndex(col => col.id === colId)
            ).filter(idx => idx !== -1);

            // Get header row
            tableHeaders = visibleIndices.map(i => columns[i].name);

            // Get data rows (skip header in original data)
            for (let i = 1; i < data.length; i++) {
                const rowValues = visibleIndices.map(colIndex => 
                    (colIndex < data[i].length) ? (data[i][colIndex] || '') : '');
                tableData.push(rowValues);
            }
        } else {
            // Use full data
            tableHeaders = data[0];
            tableData = data.slice(1);
        }

        // Add table to PDF
        doc.autoTable({
            head: [tableHeaders],
            body: tableData,
            startY: startY,
            margin: { top: startY, right: 40, bottom: 40, left: 40 },
            styles: {
                fontSize: 8,
                cellPadding: 3,
                overflow: 'linebreak',
                halign: 'left'
            },
            headStyles: {
                fillColor: [74, 108, 247],
                textColor: [255, 255, 255],
                fontStyle: 'bold'
            },
            alternateRowStyles: {
                fillColor: [240, 240, 240]
            },
            didDrawPage: (data) => {
                // Add page number
                doc.setFontSize(10);
                doc.text(
                    `Page ${doc.internal.getNumberOfPages()}`,
                    data.settings.margin.left,
                    doc.internal.pageSize.height - 10
                );
            }
        });

        // Return the Y position after the table
        return doc.autoTable.previous.finalY + 20;
    };

    // Finalize Excel export
    const finalizeExport = (wb, fileName) => {
        try {
            // Write Excel file
            XLSX.writeFile(wb, fileName);
            DataTable.showToast('Data exported to Excel successfully', 'success');
        } catch (error) {
            console.error('Error finalizing export:', error);
            DataTable.showToast('Error exporting data: ' + error.message, 'error');
        }
    };

    // Helper function: Format mobile number to 10 digits (remove country code and non-digits)
    const formatMobileNumber = (number) => {
        if (!number) return '';
        
        number = String(number).replace(/\D/g, '');
        if (number.startsWith('91') && number.length > 10) number = number.slice(2);
        else if (number.startsWith('0')) number = number.slice(1);
        return number;
    };

    // Helper function: Convert seconds to HH:mm:ss format
    const formatDuration = (seconds) => {
        seconds = parseInt(seconds) || 0;
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const remainingSeconds = seconds % 60;
        
        return [
            hours.toString().padStart(2, '0'),
            minutes.toString().padStart(2, '0'),
            remainingSeconds.toString().padStart(2, '0')
        ].join(':');
    };

    // Helper function: Format date and time for consistent display
    const formatDate = (date, time) => {
        if (!date) return '';
        
        // Standardize date format (DD/MM/YYYY)
        let formattedDate = date;
        if (typeof DateFormatter !== 'undefined' && DateFormatter.formatToStandard) {
            formattedDate = DateFormatter.formatToStandard(date);
        }
        
        if (time) {
            return `${formattedDate} ${time}`;
        }
        
        return formattedDate;
    };

    // Helper function: Simple date comparison
    const compareDate = (date1, time1, date2, time2) => {
        const d1 = formatDate(date1, time1);
        const d2 = formatDate(date2, time2);
        
        if (d1 < d2) return -1;
        if (d1 > d2) return 1;
        return 0;
    };

    // Helper function: DateTime comparison
    const compareDateTime = (dateTime1, dateTime2) => {
        if (dateTime1 < dateTime2) return -1;
        if (dateTime1 > dateTime2) return 1;
        return 0;
    };

    // Helper function: Parse duration from string
    const parseDuration = (durationStr) => {
        if (!durationStr) return 0;

        // Handle different duration formats
        // Format 1: "HH:MM:SS"
        const timeMatch = String(durationStr).match(/(\d+):(\d+):(\d+)/);
        if (timeMatch) {
            const [_, hours, minutes, seconds] = timeMatch;
            return (parseInt(hours) * 3600) + (parseInt(minutes) * 60) + parseInt(seconds);
        }

        // Format 2: Simple seconds
        const seconds = parseInt(durationStr);
        return isNaN(seconds) ? 0 : seconds;
    };

    // Helper function: Check if time is in day hours (6:00-18:00)
    const isDayTime = (time) => {
        if (!time) return false;
        
        const [hours, minutes] = time.split(':').map(Number);
        const totalMinutes = hours * 60 + (minutes || 0);
        return totalMinutes >= 360 && totalMinutes < 1080;
    };

    // Helper function: Parse SMS header
    const parseSMSHeader = (text) => {
        if (!text) return '';

        // Common formats: 'VK-VICARS', 'DOMINO', 'AD-FLIPKT', etc.
        if (text.length <= 6) return text;

        // If there's a dash, take the part after it if it's 6 chars or less
        if (text.includes('-')) {
            const parts = text.split('-');
            if (parts[1] && parts[1].length <= 6) {
                return parts[1];
            }
        }

        // Return first 6 chars as fallback
        return text.substring(0, 6);
    };

    // Helper function: Get operator & circle from LRN
    const getOperatorCircleFromLRN = (lrn) => {
        // Try to use the global AppConstants function if available
        if (typeof AppConstants !== 'undefined' && AppConstants.getOperatorCircle) {
            return AppConstants.getOperatorCircle(lrn);
        }
        
        // Fallback to simple lookup
        const lrnMappings = {
            '2100': 'IDEA-BR',
            '2393': 'BSNL-AS',
            '2394': 'BSNL-BR',
            '3000': 'AIR-HP',
            '3088': 'RJIL-GJ',
            '3100': 'RJIL-TN',
            '3286': 'VODA-KA',
            '4100': 'VODA-MH',
            '4121': 'VODA-KA'
        };
        
        return lrnMappings[lrn] || 'Unknown';
    };

    // Public API
    return {
        exportToExcel,
        exportToPDF
    };
})();

filemanager.js:
// fileManager.js - File upload, processing and management
const FileManager = (() => {
    // Private variables
    let filesSelected = false;

    // Initialize the file manager
    function init() {
        setupFileInputListeners();
    }

    // Set up file input listeners
    function setupFileInputListeners() {
        const fileInput = document.getElementById('file-input');
        if (fileInput) {
            fileInput.addEventListener('change', handleFileInputChange);
        }

        document.getElementById('select-files-btn')?.addEventListener('click', () => {
            document.getElementById('file-input')?.click();
        });

        // Add listener for header file input
        const headerFileInput = document.getElementById('header-file-input');
        if (headerFileInput) {
            headerFileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    UIManager.showSimplifiedUploadDialog();
                }
            });
        }
    }

    // Handle file input change
    function handleFileInputChange() {
        const fileInput = document.getElementById('file-input');
        const filesCount = fileInput.files.length;
        document.getElementById('selected-files-count').textContent =
            filesCount === 0 ? 'No files selected' :
                filesCount === 1 ? '1 file selected' :
                    `${filesCount} files selected`;

        filesSelected = filesCount > 0;
        const caseOptions = document.getElementById('case-options');
        const confirmBtn = document.getElementById('confirm-upload-select');

        if (filesSelected) {
            caseOptions.style.display = 'block';
            document.getElementById('new-case').checked = true;
            document.getElementById('new-case-form').style.display = 'block';
            document.getElementById('existing-case-form').style.display = 'none';
            confirmBtn.disabled = false;
        } else {
            caseOptions.style.display = 'none';
            confirmBtn.disabled = true;
        }
    }

    // Debug and fix dropdowns
    function debugAndFixDropdowns() {
        console.log('Debugging dropdowns...');
        DB.init()
            .then(() => DB.getAllCases())
            .then(cases => {
                if (cases.length > 0) {
                    updateDropdownsWithCases(cases);
                } else {
                    console.log("No cases found in database");
                    DataTable.showToast("No cases found. Create a case first.", "info");
                }
            })
            .catch(error => {
                console.error("Error in dropdown debugging:", error);
                DataTable.showToast("Error loading cases from database", "error");
            });
    }

    // Update dropdowns with cases
    function updateDropdownsWithCases(cases) {
        const caseItemsContainer = document.getElementById('case-items-container');
        const casesSelectedCount = document.querySelector('#select-cases-container .selected-count');

        if (caseItemsContainer) {
            caseItemsContainer.innerHTML = '';

            cases.forEach(async (caseItem) => {
                const files = await DB.getFilesByCaseId(caseItem.caseNumber);
                const fileCount = files ? files.length : 0;

                const item = document.createElement('div');
                item.className = 'dropdown-item';
                item.dataset.value = caseItem.caseNumber;
                item.innerHTML = `
                    <input type="checkbox" id="case-${caseItem.caseNumber}" data-case-id="${caseItem.caseNumber}">
                    <span class="item-text">${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown'}</span>
                    <span class="item-badge">${fileCount}</span>
                `;

                item.addEventListener('click', async (e) => {
                    const checkbox = item.querySelector('input[type="checkbox"]');
                    if (e.target !== checkbox) {
                        checkbox.checked = !checkbox.checked;
                    }

                    if (checkbox.checked) {
                        item.classList.add('selected');
                        // Add this case ID to selectedCaseIds
                        window.appState.selectedCaseIds = [caseItem.caseNumber];
                        // Load files for this case
                        loadFilesForCase(caseItem.caseNumber);
                    } else {
                        item.classList.remove('selected');
                        // Remove this case ID from selectedCaseIds
                        window.appState.selectedCaseIds = window.appState.selectedCaseIds.filter(id => id !== caseItem.caseNumber);
                        // Clear files container
                        document.getElementById('file-items-container').innerHTML = '';
                    }

                    // Update selected cases count
                    const selectedCases = document.querySelectorAll('.dropdown-item input[type="checkbox"]:checked');
                    const selectedCount = selectedCases.length;
                    casesSelectedCount.textContent = selectedCount === 0 ? 'No cases selected' :
                        selectedCount === 1 ? '1 case selected' :
                            `${selectedCount} cases selected`;

                    // Update continue button state
                    const confirmBtn = document.getElementById('confirm-upload-select');
                    if (confirmBtn) {
                        confirmBtn.disabled = selectedCount === 0;
                    }
                });

                caseItemsContainer.appendChild(item);
            });
        }
    }

    async function loadFilesForCase(caseId) {
        try {
            const files = await DB.getFilesByCaseId(caseId);
            const fileItemsContainer = document.getElementById('file-items-container');

            if (!files || !fileItemsContainer) return;

            // Group files by operator
            const filesByOperator = {};
            files.forEach(file => {
                const operator = file.operator || 'Unknown';
                if (!filesByOperator[operator]) {
                    filesByOperator[operator] = [];
                }
                filesByOperator[operator].push(file);
            });

            fileItemsContainer.innerHTML = '';

            // Add "Select All Files" option
            const selectAllDiv = document.createElement('div');
            selectAllDiv.className = 'select-all-files-option';
            selectAllDiv.innerHTML = `
                <label class="checkbox-container">
                    <input type="checkbox" id="select-all-files">
                    <span class="checkbox-label">Select All Files</span>
                </label>
            `;

            // Handle select all files functionality
            selectAllDiv.querySelector('#select-all-files').addEventListener('change', (e) => {
                const allCheckboxes = fileItemsContainer.querySelectorAll('input[type="checkbox"]');
                allCheckboxes.forEach(checkbox => {
                    checkbox.checked = e.target.checked;
                });
                updateFileSelectionUI();
            });

            fileItemsContainer.appendChild(selectAllDiv);

            // Add operator groups
            Object.entries(filesByOperator).forEach(([operator, operatorFiles]) => {
                const operatorGroup = document.createElement('div');
                operatorGroup.className = 'operator-group';
                operatorGroup.innerHTML = `
                <div class="operator-header">
                    <input type="checkbox" class="operator-checkbox">
                    <span class="operator-name">► ${operator}</span>
                    <span class="operator-count">${operatorFiles.length}</span>
                </div>
                <div class="operator-files" style="display: none;">
                    ${operatorFiles.map(file => `
                        <div class="file-item">
                            <input type="checkbox" data-file-id="${file.id}">
                            <span>${file.displayName || file.id}</span>
                        </div>
                    `).join('')}
                </div>
            `;

                // Add click handler for operator header
                const header = operatorGroup.querySelector('.operator-header');
                const filesContainer = operatorGroup.querySelector('.operator-files');
                header.addEventListener('click', (e) => {
                    if (!e.target.matches('input')) {
                        operatorGroup.classList.toggle('collapsed');
                        filesContainer.style.display = filesContainer.style.display === 'none' ? 'block' : 'none';
                        const arrow = header.querySelector('.operator-name');
                        arrow.textContent = arrow.textContent.startsWith('►') ? '▼' : '►';
                    }
                });

                fileItemsContainer.appendChild(operatorGroup);
            });
        } catch (error) {
            console.error('Error loading files for case:', error);
            DataTable.showToast('Error loading files', 'error');
        }
    }

    // Handle the upload process
    function handleUpload() {
        const files = document.getElementById('file-input').files;
        if (files.length === 0) {
            DataTable.showToast('Please select files to upload', 'warning');
            return;
        }

        const isNewCase = document.getElementById('new-case').checked;
        const isExistingCase = document.getElementById('existing-case').checked;

        if (!isNewCase && !isExistingCase) {
            DataTable.showToast('Please select whether to create a new case or add to existing case', 'warning');
            return;
        }

        if (isNewCase) {
            const caseNumber = document.getElementById('case-number').value.trim();
            if (!caseNumber) {
                DataTable.showToast('Please enter a case number', 'warning');
                return;
            }

            const caseData = {
                caseNumber,
                victimName: document.getElementById('victim-name').value.trim(),
                sections: document.getElementById('case-sections').value.trim(),
                description: document.getElementById('case-description').value.trim()
            };

            DB.createCase(caseData)
                .then(caseId => {
                    document.getElementById('upload-select-overlay').classList.remove('active');
                    processFiles(files, caseId);
                })
                .catch(error => DataTable.showToast(error, 'error'));
        } else if (isExistingCase) {
            const caseId = document.getElementById('existing-case-select').value;
            if (!caseId) {
                DataTable.showToast('Please select a case', 'warning');
                return;
            }

            document.getElementById('upload-select-overlay').classList.remove('active');
            processFiles(files, caseId);
        }
    }

    // Handle file selection
    function handleSelect() {
        const selectedFileIds = Array.from(
            document.querySelectorAll('#file-items-container .file-checkbox:checked')
        ).map(cb => parseInt(cb.dataset.fileId));

        // Make file selection optional
        document.getElementById('upload-select-overlay').classList.remove('active');
        if (selectedFileIds.length > 0) {
            loadSelectedFiles(selectedFileIds);
        } else {
            // Even if no file is selected, proceed with selected cases
            const selectedCaseIds = window.appState.selectedCaseIds;
            if (selectedCaseIds && selectedCaseIds.length > 0) {
                // Load data based on case
                loadDataForCase(selectedCaseIds[0]);
            }
        }
    }

    // Load data for case
    function loadDataForCase(caseId) {
        // Load files and data for case
        Promise.all([
            DB.getCaseByNumber(caseId),
            DB.getFilesByCaseId(caseId)
        ])
            .then(([caseData, files]) => {
                // If there are files, load the first file's data
                if (files && files.length > 0) {
                    DataTable.loadData(files[0].data, files[0].id);
                    // Create file tabs
                    files.forEach(file => UIManager.createFileTab(file));
                    window.appState.activeFiles = files.map(f => f.id);
                    window.appState.activeTab = files[0].id;
                } else {
                    // If no files, show empty table
                    DataTable.clearTable();
                    document.getElementById('file-tabs-container').innerHTML = '';
                    window.appState.activeFiles = [];
                    window.appState.activeTab = null;
                }

                // Update case data
                if (caseData) {
                    window.appState.currentCase = caseData;
                    document.getElementById('case-number').textContent = caseData.caseNumber;
                    document.getElementById('victim-name').textContent = caseData.victimName || 'Unknown';
                }

                // Remove overlay
                document.getElementById('upload-select-overlay').classList.remove('active');
            })
            .catch(error => {
                console.error('Error loading case data:', error);
                DataTable.showToast('Error loading case data', 'error');
            });
    }

    // Process files after upload
    function processFiles(files, caseId) {
        DataTable.showToast('Processing files...', 'info');
        const processPromises = [];

        for (let i = 0; i < files.length; i++) {
            const promise = CDRProcessor.processFile(files[i])
                .then(results => {
                    // Skip if results is empty (unsupported file type)
                    if (!results || results.length === 0) return [];
                    const storePromises = [];
                    results.forEach(result => {
                        if (result.cleanedData && result.cleanedData.length > 1 && !result.isEmpty) {
                            const hasRealData = result.cleanedData.slice(1).some(row => {
                                if (!row || row.length === 0) return false;
                                const criticalColumns = ['Target No', 'B Party', 'Date', 'Time'];
                                for (const colName of criticalColumns) {
                                    const colIndex = result.cleanedData[0].indexOf(colName);
                                    if (colIndex !== -1 && row[colIndex] && row[colIndex].trim() !== '') {
                                        return true;
                                    }
                                }
                                return false;
                            });

                            const hasNoDataText = result.cleanedData.some(row =>
                                row.some(cell =>
                                    typeof cell === 'string' &&
                                    (cell.toLowerCase().includes('no data') ||
                                        cell.toLowerCase().includes('no record'))
                                )
                            );

                            if (hasRealData && !hasNoDataText) {
                                let displayName = extractDisplayName(result.fileName);

                                // Add duplicate check process
                                const storePromise = DuplicateDetector.checkForDuplicates(
                                    result.cleanedData,
                                    caseId,
                                    result.mobileNumber,
                                    result.fileName
                                ).then(duplicateCheckResult => {
                                    if (duplicateCheckResult.isDuplicate) {
                                        // Duplicate found, call handling function
                                        return DuplicateDetector.handleDuplicate(
                                            duplicateCheckResult,
                                            displayName,
                                            result.operator,
                                            caseId
                                        );
                                    } else {
                                        // Not a duplicate, store normally
                                        return DB.storeFile(
                                            result.fileName,
                                            result.cleanedData,
                                            caseId,
                                            {
                                                operator: result.operator,
                                                mobileNumber: result.mobileNumber,
                                                displayName: displayName
                                            }
                                        ).then(fileId => {
                                            return {
                                                action: 'stored',
                                                fileId,
                                                message: 'New file stored.'
                                            };
                                        });
                                    }
                                });
                                storePromises.push(storePromise);
                            }
                        }
                    });
                    return Promise.all(storePromises);
                });
            processPromises.push(promise);
        }

        Promise.all(processPromises)
            .then(results => {
                // Collect all store/merge operation results
                const flatResults = results.flat();

                // Show appropriate messages based on results
                const storedCount = flatResults.filter(r => r && r.action === 'stored').length;
                const mergedCount = flatResults.filter(r => r && r.action === 'merged').length;
                const skippedCount = flatResults.filter(r => r && r.action === 'skipped').length;

                let message = '';
                if (storedCount > 0) {
                    message += `${storedCount} files successfully stored. `;
                }
                if (mergedCount > 0) {
                    message += `${mergedCount} duplicate files merged. `;
                }
                if (skippedCount > 0) {
                    message += `${skippedCount} duplicate files skipped. `;
                }

                if (message) {
                    DataTable.showToast(message, 'success');
                } else {
                    DataTable.showToast('No valid files processed', 'warning');
                }

                // Reload cases
                loadCases();

                // Refresh header dropdown
                if (typeof UIManager.refreshHeaderDropdown === 'function') {
                    UIManager.refreshHeaderDropdown();
                }

                // Load files based on valid file IDs
                const fileIds = flatResults
                    .filter(r => r && (r.action === 'stored' || r.action === 'merged'))
                    .map(r => r.fileId)
                    .filter(id => id !== null);

                if (fileIds.length > 0) {
                    loadSelectedFiles(fileIds);
                    preloadSMSDataFromFiles(fileIds);
                }
            })
            .catch(error => {
                console.error('Error processing files:', error);
                DataTable.showToast('Error processing files', 'error');
            });
    }

    // Extract display name from file name
    function extractDisplayName(fileName) {
        let name = fileName.replace(/\.[^/.]+$/, ""); // Remove file extension

        // Try to extract IMEI from VVM pattern: VVM_XXXXXXXXXXXX or VVM_XXXXXXXXXXXXX
        let vvmImeiPattern = /VVM_([1-9]\d{13,14})(?:_|$)/;
        let vvmImeiMatch = name.match(vvmImeiPattern);
        if (vvmImeiMatch && vvmImeiMatch[1]) {
            let imei = vvmImeiMatch[1];
            return processIMEI(imei);
        }

        // Try to extract mobile from VVM pattern: VVM_XXXXXXXXXX
        let vvmMobilePattern = /VVM_([6-9]\d{9})(?:_|$)/;
        let vvmMobileMatch = name.match(vvmMobilePattern);
        if (vvmMobileMatch && vvmMobileMatch[1]) {
            return vvmMobileMatch[1];
        }

        // Try to extract IMEI (14 or 15 digits, not starting with 0) at the beginning of filename or after underscore
        let imeiPattern = /(?:^|_)([1-9]\d{13,14})(?:_|$)/;
        let imeiMatch = name.match(imeiPattern);
        if (imeiMatch && imeiMatch[1]) {
            let imei = imeiMatch[1];
            return processIMEI(imei);
        }

        // Check for 12 digit mobile number starting with 91
        let mobilePattern12 = /(?:^|_)(91([6-9]\d{9}))(?:_|$)/;
        let mobileMatch12 = name.match(mobilePattern12);
        if (mobileMatch12 && mobileMatch12[2]) {
            return mobileMatch12[2]; // Return the 10 digit number without the 91 prefix
        }

        // Check for 10 digit mobile number
        let mobilePattern10 = /(?:^|_)([6-9]\d{9})(?:_|$)/;
        let mobileMatch10 = name.match(mobilePattern10);
        if (mobileMatch10 && mobileMatch10[1]) {
            return mobileMatch10[1];
        }

        // Fallback - return original name without extension
        return name;
    }

    // Helper function to process IMEI numbers
    function processIMEI(imei) {
        // For 15-digit IMEIs
        if (imei.length === 15) {
            // Extract first 14 digits
            const imei14 = imei.substring(0, 14);
            // Calculate correct Luhn digit
            const correctLuhn = calculateLuhnDigit(imei14);
            // Replace last digit with correct Luhn digit if needed
            if (imei.charAt(14) !== correctLuhn) {
                return imei14 + correctLuhn;
            }
            return imei;
        }
        // For 14-digit IMEIs
        else if (imei.length === 14) {
            // Calculate and append Luhn digit
            const luhnDigit = calculateLuhnDigit(imei);
            return imei + luhnDigit;
        }

        return imei;
    }

    // Luhn digit calculation for IMEI
    function calculateLuhnDigit(imei) {
        // Remove non-numeric characters
        imei = imei.replace(/[^0-9]/g, '');
        let sum = 0;

        // Process each digit according to Luhn algorithm
        for (let i = 0; i < imei.length; i++) {
            let digit = parseInt(imei.charAt(i));

            // Double digits at even positions (when using 1-based indexing)
            if ((i + 1) % 2 === 0) {
                digit = digit * 2;
                // If doubled value is greater than 9, subtract 9
                if (digit > 9) digit = digit - 9;
            }

            sum += digit;
        }

        // Calculate check digit (the value that makes the sum divisible by 10)
        let luhnDigit = (10 - (sum % 10)) % 10;
        return luhnDigit.toString();
    }
    // Load selected files
    function loadSelectedFiles(fileIds) {
        if (!fileIds || fileIds.length === 0) return;

        document.getElementById('file-tabs-container').innerHTML = '';
        window.appState.activeFiles = fileIds;

        const loadPromises = fileIds.map(fileId =>
            DB.getFileById(fileId)
                .then(file => file && UIManager.createFileTab(file))
                .catch(error => console.error(`Error loading file ${fileId}:`, error))
        );

        Promise.all(loadPromises)
            .then(files => {
                const validFiles = files.filter(Boolean);
                if (validFiles.length > 0) {
                    // Set first tab as active if no active tab exists
                    if (!window.appState.activeTab || !window.appState.activeFiles.includes(window.appState.activeTab)) {
                        const firstFile = validFiles[0];
                        window.appState.activeTab = firstFile.id;

                        // Update UI to reflect active tab
                        const firstTab = document.querySelector(`.tab[data-file-id="${window.appState.activeTab}"]`);
                        if (firstTab) {
                            firstTab.classList.add('active');
                            firstTab.style.borderBottom = '3px solid red';
                            firstTab.style.fontWeight = 'bold';

                            // Load data for the first tab
                            DataTable.loadData(firstFile.data, firstFile.id);
                            UIManager.createAnalysisSubtabs(firstFile.data);
                        }
                    } else {
                        // If active tab is in the loaded files, highlight it
                        const activeTabElement = document.querySelector(`.tab[data-file-id="${window.appState.activeTab}"]`);
                        if (activeTabElement) {
                            activeTabElement.classList.add('active');
                            activeTabElement.style.borderBottom = '3px solid red';
                            activeTabElement.style.fontWeight = 'bold';
                        }
                    }

                    // Make sure analysis tabs are correctly set up
                    setTimeout(() => {
                        if (window.tabController) {
                            window.tabController.switchToAnalysisTab('cdr');
                        } else {
                            const cdrTab = document.querySelector('.subtab[data-id="cdr"]');
                            if (cdrTab) {
                                document.querySelectorAll('.subtab').forEach(t => t.classList.remove('active'));
                                cdrTab.classList.add('active');
                                window.handleAnalysisTabSwitch('cdr', files[0].data);
                            }
                        }
                    }, 100);
                }

                // Refresh header dropdown
                if (typeof UIManager.refreshHeaderDropdown === 'function') {
                    UIManager.refreshHeaderDropdown();
                }
            });
    }

    // Load cases from DB
    function loadCases() {
        DB.getCasesWithFileCounts()
            .then(cases => UIManager.populateCaseOptions(cases))
            .catch(error => {
                console.error('Error loading cases:', error);
                DataTable.showToast('Error loading cases', 'error');
            });
    }

    // Preload SMS data from files
    function preloadSMSDataFromFiles(fileIds) {
        if (!window.smsAnalysis) return;

        Promise.all(fileIds.map(fileId => DB.getFileById(fileId)))
            .then(files => {
                window.smsAnalysis.preloadDataFromFiles(files);
            })
            .catch(err => {
                console.warn("Error preloading SMS data:", err);
            });
    }

    // Setup checkbox handlers
    function setupCheckboxHandlers() {
        // Select all files handler
        const selectAllCheckbox = document.getElementById('select-all-files');
        const allFileCheckboxes = document.querySelectorAll('.file-checkbox');

        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', () => {
                allFileCheckboxes.forEach(checkbox => {
                    checkbox.checked = selectAllCheckbox.checked;
                });
                updateContinueButtonState();
            });
        }

        // Individual file checkbox handlers
        allFileCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                updateContinueButtonState();
            });
        });
    }

    // Update continue button state
    function updateContinueButtonState() {
        const selectedFiles = document.querySelectorAll('.file-checkbox:checked').length;
        const confirmBtn = document.getElementById('confirm-upload-select');
        if (confirmBtn) {
            confirmBtn.disabled = selectedFiles === 0;
        }
    }

    // Update file selection UI
    function updateFileSelectionUI() {
        const fileContainer = document.getElementById('file-items-container');
        if (!fileContainer) return;

        const allFiles = fileContainer.querySelectorAll('.file-item input[type="checkbox"]');
        const selectedFiles = fileContainer.querySelectorAll('.file-item input[type="checkbox"]:checked');

        // Update select all checkbox
        const selectAllCheckbox = document.getElementById('select-all-files');
        if (selectAllCheckbox) {
            selectAllCheckbox.checked = selectedFiles.length === allFiles.length;
            selectAllCheckbox.indeterminate = selectedFiles.length > 0 && selectedFiles.length < allFiles.length;
        }

        // Update operator group checkboxes
        document.querySelectorAll('.operator-group').forEach(group => {
            const groupCheckbox = group.querySelector('.operator-checkbox');
            const groupFiles = group.querySelectorAll('.file-item input[type="checkbox"]');
            const selectedGroupFiles = group.querySelectorAll('.file-item input[type="checkbox"]:checked');

            groupCheckbox.checked = selectedGroupFiles.length === groupFiles.length;
            groupCheckbox.indeterminate = selectedGroupFiles.length > 0 && selectedGroupFiles.length < groupFiles.length;
        });

        // Update continue button
        updateContinueButtonState();
    }

    // Setup select all functionality
    function setupSelectAllFunctionality() {
        const selectAllCheckbox = document.querySelector('#select-all-cases');
        if (!selectAllCheckbox) return;

        const caseItemsContainer = document.getElementById('case-items-container');
        const casesSelectedCount = document.querySelector('#select-cases-container .selected-count');

        selectAllCheckbox.addEventListener('change', () => {
            const isChecked = selectAllCheckbox.checked;
            const caseCheckboxes = caseItemsContainer.querySelectorAll('.dropdown-item input[type="checkbox"]');

            caseCheckboxes.forEach(checkbox => {
                checkbox.checked = isChecked;
                const item = checkbox.closest('.dropdown-item');
                if (isChecked) {
                    item.classList.add('selected');
                } else {
                    item.classList.remove('selected');
                }
            });

            // Update selected case IDs
            window.appState.selectedCaseIds = Array.from(
                caseItemsContainer.querySelectorAll('.dropdown-item input[type="checkbox"]:checked')
            ).map(cb => cb.dataset.caseId);

            // Update selected count text
            UIManager.updateSelectedCountText(caseItemsContainer, casesSelectedCount, 'case', 'cases');

            // Update file options
            updateFileOptions();

            // Update continue button state
            updateContinueButtonForSelection();
        });
    }

    // Update file options based on selected cases
    function updateFileOptions() {
        if (window.appState.selectedCaseIds.length === 0) {
            document.getElementById('file-items-container').innerHTML = '';
            return;
        }

        DB.getFilesByMultipleCaseIds(window.appState.selectedCaseIds)
            .then(files => {
                const fileItemsContainer = document.getElementById('file-items-container');
                fileItemsContainer.innerHTML = '';

                // Group files by operator
                const filesByOperator = {};
                files.forEach(file => {
                    const operator = file.operator || 'Unknown';
                    if (!filesByOperator[operator]) {
                        filesByOperator[operator] = [];
                    }
                    filesByOperator[operator].push(file);
                });

                // Create select all option
                const selectAllDiv = document.createElement('div');
                selectAllDiv.className = 'select-all-option';
                selectAllDiv.innerHTML = `
                    <input type="checkbox" id="select-all-files">
                    <label for="select-all-files">Select All Files</label>
                `;
                fileItemsContainer.appendChild(selectAllDiv);

                // Add operator groups
                Object.entries(filesByOperator).forEach(([operator, operatorFiles]) => {
                    const groupDiv = document.createElement('div');
                    groupDiv.className = 'operator-group';

                    const groupHeader = document.createElement('div');
                    groupHeader.className = 'operator-header collapsed';
                    groupHeader.innerHTML = `
                        <span class="toggle-icon">▶</span>
                        <input type="checkbox" class="operator-checkbox">
                        <span class="operator-name">${operator}</span>
                        <span class="file-count">(${operatorFiles.length})</span>
                    `;

                    const filesContainer = document.createElement('div');
                    filesContainer.className = 'operator-files';
                    filesContainer.style.display = 'none';

                    operatorFiles.forEach(file => {
                        const fileDiv = document.createElement('div');
                        fileDiv.className = 'file-item';
                        fileDiv.innerHTML = `
                            <input type="checkbox" class="file-checkbox" data-file-id="${file.id}">
                            <span>${file.name}</span>
                        `;
                        filesContainer.appendChild(fileDiv);
                    });

                    groupDiv.appendChild(groupHeader);
                    groupDiv.appendChild(filesContainer);
                    fileItemsContainer.appendChild(groupDiv);

                    // Add click handler for group header
                    groupHeader.addEventListener('click', (e) => {
                        if (!e.target.matches('input')) {
                            const icon = groupHeader.querySelector('.toggle-icon');
                            const filesContainer = groupHeader.nextElementSibling;
                            const isCollapsed = icon.textContent === '▶';

                            icon.textContent = isCollapsed ? '▼' : '▶';
                            filesContainer.style.display = isCollapsed ? 'block' : 'none';
                            groupHeader.classList.toggle('collapsed');
                        }
                    });
                });

                // Add checkbox event listeners
                setupCheckboxHandlers();
            })
            .catch(error => {
                console.error('Error loading files:', error);
                DataTable.showToast('Error loading files', 'error');
            });
    }

    // Update continue button for selection
    function updateContinueButtonForSelection() {
        const fileCheckboxes = document.querySelectorAll('#file-items-container .file-checkbox:checked');
        document.getElementById('confirm-upload-select').disabled = fileCheckboxes.length === 0;
    }

    // Handle folder upload
    async function handleFolderUpload(fileList) {
        // fileList: FileList from <input type="file" webkitdirectory>
        // Convert FileList to array and sort by path
        const files = Array.from(fileList);
        // Filter only files (not directories)
        const onlyFiles = files.filter(f => f.size > 0);

        // Recursively group files by folder structure up to 10 levels
        // (webkitRelativePath gives the full path inside the folder)
        const groupedFiles = [];
        for (const file of onlyFiles) {
            // Limit recursion to 10 levels
            const levels = file.webkitRelativePath.split('/').length - 1;
            if (levels <= 10) {
                groupedFiles.push(file);
            }
        }

        // Now, recursively extract zip files up to 5 levels
        const allFiles = [];
        for (const file of groupedFiles) {
            if (file.name.toLowerCase().endsWith('.zip')) {
                // Recursively extract zip files up to 5 levels
                const extracted = await extractZipRecursively(file, 5);
                allFiles.push(...extracted);
            } else {
                allFiles.push(file);
            }
        }

        // Show simplified upload dialog with these files
        // We'll use a custom property to pass these files
        window.__folderUploadFiles = allFiles;
        UIManager.showSimplifiedUploadDialog();

        // Patch: When simplified upload dialog continues, use these files if present
        const continueBtn = document.getElementById('simplified-continue');
        if (continueBtn && !continueBtn.__patched) {
            continueBtn.__patched = true;
            continueBtn.addEventListener('click', function patchFolderFiles() {
                if (window.__folderUploadFiles) {
                    const files = window.__folderUploadFiles;
                    window.__folderUploadFiles = null;
                    // Find caseId as per dialog
                    const isNewCase = document.getElementById('simplified-new-case').checked;
                    if (isNewCase) {
                        const caseNumber = document.getElementById('simplified-case-number').value.trim();
                        if (!caseNumber) return;
                        const caseData = {
                            caseNumber,
                            victimName: document.getElementById('simplified-victim-name').value.trim(),
                            sections: document.getElementById('simplified-case-sections').value.trim(),
                            description: document.getElementById('simplified-case-description').value.trim()
                        };
                        DB.createCase(caseData)
                            .then(caseId => {
                                document.getElementById('simplified-upload-overlay').classList.remove('active');
                                FileManager.processFiles(files, caseId);
                            })
                            .catch(error => {
                                DataTable.showToast(error, 'error');
                            });
                    } else {
                        const caseId = document.getElementById('simplified-existing-case-select').value;
                        if (!caseId) return;
                        document.getElementById('simplified-upload-overlay').classList.remove('active');
                        FileManager.processFiles(files, caseId);
                    }
                }
            });
        }
    }

    // Helper: Recursively extract zip files up to maxDepth
    async function extractZipRecursively(file, maxDepth, currentDepth = 1) {
        if (currentDepth > maxDepth) return [];
        let results = [];
        try {
            const zipResults = await CDRProcessor.processFile(file);
            for (const result of zipResults) {
                // If result is a file object (from nested zip), check extension
                if (result instanceof File && result.name.toLowerCase().endsWith('.zip')) {
                    const nested = await extractZipRecursively(result, maxDepth, currentDepth + 1);
                    results.push(...nested);
                } else if (result instanceof File) {
                    results.push(result);
                } else if (result.fileName && result.cleanedData) {
                    // Already processed data, skip
                }
            }
        } catch (e) {
            // Silently drop unsupported/empty ZIPs
        }
        return results;
    }

    // Extract mobile number from data or filename
    function extractMobileNumber(fileName, data) {
        // Remove extension
        const nameWithoutExtension = fileName.replace(/\.[^/.]+$/, '');

        // First, try to find IMEI after VVM_ pattern (this is a common format)
        const vvmPattern = /VVM_([1-9]\d{13,14})(?:_|$)/;
        const vvmMatch = nameWithoutExtension.match(vvmPattern);
        if (vvmMatch) {
            return vvmMatch[1];
        }

        // Second, try to find any valid IMEI (14-15 digits, not starting with 0)
        const imeiPattern = /(?:_|^)([1-9]\d{13,14})(?:_|$)/;
        const imeiMatch = nameWithoutExtension.match(imeiPattern);
        if (imeiMatch) {
            return imeiMatch[1];
        }

        // Check for ILD pattern (International Long Distance numbers)
        const ildPattern = /ILD_(\d{10,14})(?:_|$)/;
        const ildMatch = nameWithoutExtension.match(ildPattern);
        if (ildMatch) {
            return ildMatch[1];
        }

        // Standard mobile pattern as fallback
        const mobilePattern = /(\b(?:91)?\d{10}\b)/;
        const mobileMatch = nameWithoutExtension.match(mobilePattern);
        if (mobileMatch) {
            return mobileMatch[1];
        }

        // Try to extract from data
        if (data && data.length > 1 && data[0]) {
            const targetIndex = data[0].indexOf('Target No');
            if (targetIndex !== -1 && data[1] && data[1][targetIndex]) {
                return data[1][targetIndex];
            }
        }

        return null;
    }

    // Process file content
    const processFileContent = (fileName, content) => {
        // Clean and process the CDR data
        const { cleanedData, operator } = cleanCDRData(content, fileName);

        // Check for empty or no data
        const isEmptyOrNoDataFound = !cleanedData ||
            cleanedData.length <= 1 ||
            (cleanedData.length > 1 && cleanedData.slice(1).every(row => {
                if (!row || row.length === 0) return true;

                // Check critical columns
                const criticalColumns = ['Target No', 'B Party', 'Date', 'Time'];
                for (const colName of criticalColumns) {
                    const colIndex = cleanedData[0].indexOf(colName);
                    if (colIndex !== -1 && row[colIndex] && row[colIndex].trim() !== '') {
                        return false; // Data found
                    }
                }

                // Check for "No Data Found" text
                return row.some(cell =>
                    typeof cell === 'string' &&
                    cell.toLowerCase().includes('no data') ||
                    cell.toLowerCase().includes('no record')
                );
            }));

        if (isEmptyOrNoDataFound) {
            return { fileName, cleanedData: [], operator: null, isEmpty: true };
        }

        // Extract mobile number from data or filename
        let mobileNumber = extractMobileNumber(fileName, cleanedData);

        // Get display name from filename
        let displayName = extractDisplayName(fileName);

        return {
            fileName,
            cleanedData,
            operator,
            mobileNumber,
            displayName,
            isEmpty: false
        };
    };

    // Public API
    return {
        init,
        debugAndFixDropdowns,
        handleUpload,
        handleSelect,
        loadSelectedFiles,
        loadCases,
        processFiles,
        updateDropdownsWithCases,
        updateFileOptions,
        handleFolderUpload,
        calculateLuhnDigit,
        extractDisplayName,
        processFileContent
    };
})();

jio-call-type-service:
//jio_call_type_service_type.js
function addServiceTypeColumn(data) {
    const CALL_TYPE_MAPPING = AppConstants.CALL_TYPE_MAPPING;
    const SERVICE_TYPE_MAPPING = AppConstants.SERVICE_TYPE_MAPPING;
    
    // Find Call Type column index
    const headerRow = data[0];
    const callTypeIndex = headerRow.findIndex(header => header === 'Call Type');

    if (callTypeIndex === -1) {
        return data; // Return original data if Call Type column not found
    }

    // Add Service Type column header
    const newHeaderRow = [...headerRow];
    const serviceTypeIndex = callTypeIndex;
    newHeaderRow.splice(serviceTypeIndex, 0, 'Service Type');

    // Process each row
    const newData = [newHeaderRow];
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const callTypeValue = row[callTypeIndex];
        const newRow = [...row];

        let serviceType = 'Unknown';
        if (callTypeValue) {
            const callTypeLower = callTypeValue.toLowerCase();

            // Determine Service Type
            if (SERVICE_TYPE_MAPPING.SMS.some(type => callTypeLower.includes(type))) {
                serviceType = 'SMS';
            } else if (SERVICE_TYPE_MAPPING.Call.some(type => callTypeLower.includes(type))) {
                serviceType = 'Call';
            }

            // Update Call Type
            if (CALL_TYPE_MAPPING.in.some(type => callTypeLower.includes(type))) {
                newRow[callTypeIndex] = 'IN';
            } else if (CALL_TYPE_MAPPING.out.some(type => callTypeLower.includes(type))) {
                newRow[callTypeIndex] = 'OUT';
            }
        }

        newRow.splice(serviceTypeIndex, 0, serviceType);
        newData.push(newRow);
    }

    return newData;
}

tab-controller.js:
/**
 * Tab Controller - Handles switching between analysis tabs
 */
class TabController {
    constructor() {
        this.initAnalysisTabs();
        this.tabIdCache = new Map();
        this.loadDataTimeout = null;
    }

    initAnalysisTabs() {
        const analysisTabsContainer = document.getElementById('analysis-tabs-container');
        if (!analysisTabsContainer) return;

        analysisTabsContainer.addEventListener('click', (event) => {
            const tabElement = event.target.closest('.subtab');
            if (!tabElement) return;

            const tabId = tabElement.getAttribute('data-id');
            if (tabId) this.switchToAnalysisTab(tabId);
        });
    }

    switchToAnalysisTab(tabId) {
        // Update UI tab state
        document.querySelectorAll('.subtab').forEach(tab => tab.classList.remove('active'));
        const selectedTab = document.querySelector(`.subtab[data-id="${tabId}"]`);
        if (selectedTab) selectedTab.classList.add('active');

        // Get active file and process data
        const activeFileId = this.getActiveFileId();
        if (activeFileId) {
            this.loadFileData(activeFileId, tabId);
        } else {
            localStorage.setItem('lastSelectedAnalysisTab', tabId);
            this.hideLoadingIndicator();
        }
    }

    loadFileData(fileId, tabId) {
        // Clear previous timeout
        if (this.loadDataTimeout) clearTimeout(this.loadDataTimeout);

        // Skip if file previously failed
        if (this.tabIdCache.has(fileId) && this.tabIdCache.get(fileId).error) {

            return;
        }

        // Show loading indicator
        this.showLoadingIndicator(true);

        // Debounce loading with timeout
        this.loadDataTimeout = setTimeout(() => {
            // Validate file ID
            if (!fileId || isNaN(parseInt(fileId))) {
                console.error(`Invalid file ID: ${fileId}`);
                this.hideLoadingIndicator();
                DataTable.showToast("Invalid file selection", "error");
                return;
            }

            const numericFileId = parseInt(fileId);

            // Cleanup previous analysis
            if (window.cleanupPreviousAnalysis) window.cleanupPreviousAnalysis();

            // Get file data from DB
            DB.getFileById(numericFileId)
                .then(file => {
                    if (file && file.data) {
                        // Cache successful result
                        this.tabIdCache.set(numericFileId, { success: true, timestamp: Date.now() });

                        // Process with appropriate handler
                        if (window.handleAnalysisTabSwitch) {
                            window.handleAnalysisTabSwitch(tabId, file.data);
                        } else {
                            console.error('handleAnalysisTabSwitch function not found');
                            this.hideLoadingIndicator();
                        }
                    } else {
                        console.error(`File data not found for ID: ${numericFileId}`);
                        this.tabIdCache.set(numericFileId, { error: true, timestamp: Date.now() });
                        this.removeInvalidTab(numericFileId);
                        DataTable.showToast("File data not found", "error");
                        this.hideLoadingIndicator();
                    }

                    // Store last selected tab
                    localStorage.setItem('lastSelectedAnalysisTab', tabId);
                })
                .catch(err => {
                    console.error(`Error loading file data for ID ${numericFileId}:`, err);
                    this.tabIdCache.set(numericFileId, { error: true, timestamp: Date.now() });
                    DataTable.showToast("Error loading data: " + (err.message || err), "error");
                    this.hideLoadingIndicator();
                });
        }, 100);
    }

    showLoadingIndicator(show) {
        if (window.showLoadingIndicator) {
            window.showLoadingIndicator(show);
        } else {
            const loadingIndicator = document.getElementById('loading-indicator');
            if (loadingIndicator) loadingIndicator.style.display = show ? 'block' : 'none';
        }
    }

    hideLoadingIndicator() {
        this.showLoadingIndicator(false);
    }

    removeInvalidTab(fileId) {
        const invalidTab = document.querySelector(`.tab[data-file-id="${fileId}"]`);
        if (!invalidTab) return;

        const wasActive = invalidTab.classList.contains('active');
        const tabsContainer = document.getElementById('file-tabs-container');

        // Remove the tab
        invalidTab.remove();

        // If active, activate another tab or clear content
        if (wasActive && tabsContainer) {
            if (tabsContainer.children.length > 0) {
                tabsContainer.children[0].click();
            } else {
                DataTable.loadData([]);
                const analysisTabsContainer = document.getElementById('analysis-tabs-container');
                if (analysisTabsContainer) analysisTabsContainer.innerHTML = '';
            }
        }

        // Update global activeFiles if exists
        if (window.activeFiles) {
            window.activeFiles = window.activeFiles.filter(id => id !== parseInt(fileId));
        }
    }

    getActiveFileId() {
        const activeTab = document.querySelector('.tab.active');
        return activeTab ? activeTab.dataset.fileId : null;
    }

    restoreLastSelectedTab() {
        const lastTabId = localStorage.getItem('lastSelectedAnalysisTab');
        if (lastTabId) {
            this.switchToAnalysisTab(lastTabId);
        } else {
            const firstTab = document.querySelector('.subtab');
            if (firstTab) {
                const firstTabId = firstTab.getAttribute('data-id');
                if (firstTabId) this.switchToAnalysisTab(firstTabId);
            }
        }
    }

    clearCache() {
        const now = Date.now();
        const fiveMinutes = 5 * 60 * 1000;

        this.tabIdCache.forEach((value, key) => {
            if (now - value.timestamp > fiveMinutes) {
                this.tabIdCache.delete(key);
            }
        });
    }
}

// Initialize the tab controller when the page loads
window.addEventListener('DOMContentLoaded', () => {
    window.tabController = new TabController();

    // Set up cache clearing interval
    setInterval(() => {
        if (window.tabController) window.tabController.clearCache();
    }, 5 * 60 * 1000);
});

table.js:
// table.js - Advanced data table functionality
const DataTable = (() => {
    // Data structure to hold table data
    let tableData = [];
    let displayData = [];
    let columns = [];
    let visibleColumns = [];
    let currentPage = 0;
    let pageSize = 100;
    let loadedRows = 0;
    let selectedCells = [];
    let isSelecting = false;
    let selectionStart = null;
    let currentSort = { column: null, direction: 'asc' };
    let activeFilters = {};
    let columnWidths = {};
    let isLoading = false;
    let activeTab = null;
    let filterStates = {};
    let isFilterMenuOpen = false;
    let copyButtonVisible = false;
    let autoScrollInterval = null;

    // DOM elements
    let tableWrapper, tableHeader, tableBody, loadingIndicator, noDataMessage;
    let globalSearch, btnColumns, btnCopy, btnFullscreenTable, btnFirstPage, btnLastPage;
    let columnVisibilityMenu, visibilityMenuContent, closeVisibilityMenu, contextMenu, copySelectionBtn;

    // Initialize the table
    const init = (containerId = 'table-wrapper') => {
        // Get DOM elements
        tableWrapper = document.getElementById(containerId);
        tableHeader = document.getElementById('table-header');
        tableBody = document.getElementById('table-body');
        loadingIndicator = document.getElementById('loading-indicator');
        noDataMessage = document.getElementById('no-data-message');
        globalSearch = document.getElementById('global-search');
        btnColumns = document.getElementById('btn-columns');
        btnCopy = document.getElementById('btn-copy');
        btnFullscreenTable = document.getElementById('btn-fullscreen-table');
        btnFirstPage = document.getElementById('btn-first-page');
        btnLastPage = document.getElementById('btn-last-page');
        columnVisibilityMenu = document.getElementById('column-visibility-menu');
        visibilityMenuContent = document.getElementById('visibility-menu-content');
        closeVisibilityMenu = document.getElementById('close-visibility-menu');
        contextMenu = document.getElementById('context-menu');
        contextMenuCopy = document.getElementById('context-menu-copy');
        copySelectionBtn = document.getElementById('copy-selection-btn');

        // Set up event listeners
        setupEventListeners();
    };

    // Load data into the table
    const loadData = (data, fileId = null) => {
        if (!data || data.length === 0) {
            showNoData();
            return;
        }

        // Reset the table
        resetTable();

        // Store the data and file ID
        tableData = data;
        displayData = [...tableData];
        activeTab = fileId;

        // Create columns based on the first row (header)
        columns = data[0].map((header, index) => ({
            id: `col-${index}`,
            name: header,
            type: guessColumnType(index, data)
        }));

        // Initialize visible columns
        visibleColumns = columns.map(col => col.id);

        // Create table header
        createTableHeader();

        // Load initial data
        currentPage = 0;
        loadedRows = 0;
        loadMoreData();

        // Update column visibility menu
        populateColumnVisibilityMenu();
    };

    // Store filter state for an analysis tab
    const saveFilterState = (tabId) => {
        if (!tabId) return;

        filterStates[tabId] = {
            activeFilters: JSON.parse(JSON.stringify(activeFilters)),
            currentSort: JSON.parse(JSON.stringify(currentSort)),
            globalSearchValue: globalSearch ? globalSearch.value : ''
        };
    };

    // Restore filter state for an analysis tab
    const restoreFilterState = (tabId) => {
        if (!tabId || !filterStates[tabId]) return false;

        activeFilters = JSON.parse(JSON.stringify(filterStates[tabId].activeFilters));
        currentSort = JSON.parse(JSON.stringify(filterStates[tabId].currentSort));

        if (globalSearch && filterStates[tabId].globalSearchValue) {
            globalSearch.value = filterStates[tabId].globalSearchValue;
        }

        applyFilters();
        updateFilterIcons();
        return true;
    };

    // Guess column type based on data
    const guessColumnType = (index, data) => {
        for (let i = 1; i < Math.min(100, data.length); i++) {
            const value = data[i][index];
            if (value !== null && value !== undefined) {
                const strValue = String(value);

                // Check if date (DD/MM/YYYY)
                if (/^\d{2}\/\d{2}\/\d{4}$/.test(strValue)) {
                    return 'date';
                }

                // Check if time (HH:MM:SS or HH:MM)
                if (/^\d{2}:\d{2}(:\d{2})?$/.test(strValue)) {
                    return 'time';
                }

                // Check if number
                if (!isNaN(value) && strValue.trim() !== '') {
                    return 'number';
                }
            }
        }
        return 'text'; // Default to text
    };

    // Create the table header
    const createTableHeader = () => {
        tableHeader.innerHTML = '';
        const row = document.createElement('tr');

        columns.forEach((column, index) => {
            if (visibleColumns.includes(column.id)) {
                const th = document.createElement('th');
                th.dataset.column = column.id;
                th.dataset.index = index;

                const columnHeader = document.createElement('div');
                columnHeader.className = 'column-header';

                // Create header with column name and filter icon (initially hidden)
                columnHeader.innerHTML = `
                    ${column.name}
                    <span class="filter-icon" style="display: none; color: red; font-weight: bold; margin-left: 5px; cursor: pointer;">✕</span>
                `;

                // Check if this column has an active filter and show the filter icon if it does
                if (activeFilters[column.id]) {
                    const filterIcon = columnHeader.querySelector('.filter-icon');
                    filterIcon.style.display = 'inline';
                }

                // Mark as sorted if this column is sorted
                if (currentSort.column === column.id) {
                    th.classList.add('sorted');
                    // Add sort direction indicator
                    const sortIndicator = document.createElement('span');
                    sortIndicator.className = 'sort-indicator';
                    sortIndicator.textContent = currentSort.direction === 'asc' ? ' ↑' : ' ↓';
                    sortIndicator.style.opacity = '0.7';
                    columnHeader.appendChild(sortIndicator);
                }

                th.appendChild(columnHeader);

                // Add resize handle
                const resizeHandle = document.createElement('div');
                resizeHandle.className = 'resize-handle';
                th.appendChild(resizeHandle);

                // Apply saved width if available
                if (columnWidths[column.id]) {
                    th.style.width = `${columnWidths[column.id]}px`;
                    th.style.minWidth = `${columnWidths[column.id]}px`;
                }

                row.appendChild(th);
            }
        });

        tableHeader.appendChild(row);

        // Add click event for filter icons
        setupFilterIconEvents();
    };

    // Setup filter icon click events
    const setupFilterIconEvents = () => {
        const filterIcons = document.querySelectorAll('.filter-icon');

        filterIcons.forEach(icon => {
            icon.addEventListener('click', (e) => {
                e.stopPropagation(); // Stop event from triggering header click

                const th = e.target.closest('th');
                const columnId = th.dataset.column;

                // Remove filter for this column
                if (activeFilters[columnId]) {
                    delete activeFilters[columnId];
                    applyFilters();

                    // Hide the filter icon
                    icon.style.display = 'none';

                    // Save filter state
                    if (window.appState && window.appState.activeSubtab) {
                        saveFilterState(window.appState.activeSubtab);
                    }

                    // Show toast notification
                    showToast(`Filter removed from ${columns.find(col => col.id === columnId).name}`, 'success');
                }
            });
        });
    };

    // Update filter icons based on active filters
    const updateFilterIcons = () => {
        document.querySelectorAll('.filter-icon').forEach(icon => {
            icon.style.display = 'none';
        });

        Object.keys(activeFilters).forEach(columnId => {
            const th = document.querySelector(`th[data-column="${columnId}"]`);
            if (th) {
                const filterIcon = th.querySelector('.filter-icon');
                if (filterIcon) {
                    filterIcon.style.display = 'inline';
                }
            }
        });
    };

    // Reset the table
    const resetTable = () => {
        tableBody.innerHTML = '';
        currentPage = 0;
        loadedRows = 0;
        selectedCells = [];
        isSelecting = false;
        selectionStart = null;
    };

    // Show no data message
    const showNoData = () => {
        tableHeader.innerHTML = '';
        tableBody.innerHTML = '';
        noDataMessage.style.display = 'block';
    };

    // Load more data when scrolling
    const loadMoreData = () => {
        if (isLoading || loadedRows >= displayData.length - 1) {
            return;
        }

        isLoading = true;
        loadingIndicator.classList.add('show');
        noDataMessage.style.display = 'none';

        setTimeout(() => {
            const fragment = document.createDocumentFragment();
            const startRow = loadedRows + 1; // +1 to skip header
            const endRow = Math.min(startRow + pageSize, displayData.length);

            for (let i = startRow; i < endRow; i++) {
                const row = document.createElement('tr');

                columns.forEach((column, colIndex) => {
                    if (visibleColumns.includes(column.id)) {
                        const cell = document.createElement('td');
                        cell.dataset.column = column.id;
                        cell.dataset.row = i;

                        // Format cell value based on column type
                        let value = displayData[i][colIndex];

                        if (value !== undefined && value !== null) {
                            cell.innerHTML = value; // Use innerHTML to render <br> tags
                        }

                        row.appendChild(cell);
                    }
                });

                fragment.appendChild(row);
            }

            tableBody.appendChild(fragment);
            loadedRows = endRow - 1;

            isLoading = false;
            loadingIndicator.classList.remove('show');

            // Show no data message if there is no data
            if (displayData.length <= 1) { // Only header row
                noDataMessage.style.display = 'block';
            } else {
                noDataMessage.style.display = 'none';
            }
        }, 100);
    };

    // Apply all active filters
    const applyFilters = () => {
        // Start with original data
        let filteredData = [...tableData];

        // Apply active filters one by one, each filter works on the result of previous filter
        if (Object.keys(activeFilters).length > 0) {
            // Apply each filter sequentially
            for (const [columnId, filter] of Object.entries(activeFilters)) {
                const colIndex = filter.columnIndex;

                filteredData = filteredData.filter((row, rowIndex) => {
                    // Skip header row
                    if (rowIndex === 0) return true;

                    const value = row[colIndex];

                    if (filter.type === 'date') {
                        if (!value) return false;

                        try {
                            // Assuming date format is "DD/MM/YYYY"
                            const [day, month, year] = value.split('/');

                            // Check if day is specifically selected
                            const dayMatch = filter.days && filter.days.some(d =>
                                d.year === year && d.month === month && d.day === day
                            );

                            // Check if month is selected (and day is not specifically excluded)
                            const monthMatch = filter.months && filter.months.some(m =>
                                m.year === year && m.month === month &&
                                !(filter.days && filter.days.some(d =>
                                    d.year === year && d.month === month && d.day !== day && filter.days.every(sd =>
                                        !(sd.year === year && sd.month === month && sd.day === day)
                                    )
                                ))
                            );

                            // Check if year is selected (and month/day not specifically excluded)
                            const yearMatch = filter.years && filter.years.includes(year) &&
                                !(filter.months && filter.months.some(m =>
                                    m.year === year && m.month !== month && filter.months.every(sm =>
                                        !(sm.year === year && sm.month === month)
                                    )
                                ));

                            if (!(dayMatch || monthMatch || yearMatch)) {
                                return false;
                            }
                        } catch (e) {
                            return false;
                        }
                    } else if (filter.type === 'time') {
                        if (!value) return false;

                        try {
                            // Assuming time format is "HH:MM:SS" or "HH:MM"
                            const [hour, minute] = value.split(':');

                            // Check if specific minute is selected
                            const minuteMatch = filter.minutes && filter.minutes.some(m =>
                                m.hour === hour && m.minute === minute
                            );

                            // Check if hour is selected
                            const hourMatch = filter.hours && filter.hours.includes(hour);

                            if (!(minuteMatch || hourMatch)) {
                                return false;
                            }
                        } catch (e) {
                            return false;
                        }
                    } else {
                        // Basic value filter
                        if (!filter.values.includes(String(value))) {
                            return false;
                        }
                    }

                    return true;
                });
            }
        }

        // Apply global search if any
        if (globalSearch && globalSearch.value.trim()) {
            const searchTerm = globalSearch.value.trim().toLowerCase();
            filteredData = [
                filteredData[0], // Keep header row
                ...filteredData.slice(1).filter(row => {
                    return row.some(cell =>
                        cell && String(cell).toLowerCase().includes(searchTerm)
                    );
                })
            ];
        }

        // Update displayData
        displayData = filteredData;

        // Apply current sort if any
        if (currentSort.column) {
            sortTable(currentSort.column, currentSort.direction, false);
        }

        // Reset table and reload data
        tableBody.innerHTML = '';
        loadedRows = 0;
        loadMoreData();

        // Update filter icons
        updateFilterIcons();
    };

    // Set up event listeners
    const setupEventListeners = () => {
        // Infinite scrolling
        tableWrapper.addEventListener('scroll', handleTableScroll);

        // Column header click for sorting and filtering
        tableHeader.addEventListener('click', handleHeaderClick);

        // Resize column
        tableHeader.addEventListener('mousedown', handleColumnResize);

        // Selection
        tableBody.addEventListener('mousedown', startSelection);
        tableBody.addEventListener('mousemove', updateSelection);
        document.addEventListener('mouseup', endSelection);

        // Prevent default context menu
        tableBody.addEventListener('contextmenu', handleContextMenu);

        // Global search
        if (globalSearch) {
            globalSearch.addEventListener('input', handleGlobalSearch);
        }

        // Copy button
        if (btnCopy) {
            btnCopy.addEventListener('click', copyEntireTable);
        }

        // Copy selection button
        if (copySelectionBtn) {
            copySelectionBtn.addEventListener('click', copySelectedCells);
        }

        // Fullscreen table
        if (btnFullscreenTable) {
            btnFullscreenTable.addEventListener('click', toggleTableFullscreen);
        }

        // Column visibility toggle
        if (btnColumns) {
            btnColumns.addEventListener('click', toggleColumnVisibilityMenu);
        }

        if (closeVisibilityMenu) {
            closeVisibilityMenu.addEventListener('click', () => {
                columnVisibilityMenu.classList.remove('show');
            });
        }

        // Context menu actions
        if (contextMenuCopy) {
            contextMenuCopy.addEventListener('click', copySelectedCells);
        }

        // Navigation buttons
        if (btnFirstPage) {
            btnFirstPage.addEventListener('click', goToFirstPage);
        }

        if (btnLastPage) {
            btnLastPage.addEventListener('click', goToLastPage);
        }

        // Close dropdowns when clicking outside
        document.addEventListener('click', handleOutsideClick);

        // Ctrl key for multi-select
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Control') {
                isMultiSelecting = true;
            }
        });

        document.addEventListener('keyup', (e) => {
            if (e.key === 'Control') {
                isMultiSelecting = false;
            }
        });
    };

    // Handle table scrolling for infinite scrolling
    const handleTableScroll = () => {
        const { scrollTop, scrollHeight, clientHeight } = tableWrapper;

        if (scrollTop + clientHeight >= scrollHeight - 100) {
            loadMoreData();
        }
    };

    // Handle column header click (sorting and filters)
    const handleHeaderClick = (event) => {
        const th = event.target.closest('th');
        if (!th) return;

        const columnId = th.dataset.column;
        const columnIndex = parseInt(th.dataset.index);
        const column = columns[columnIndex];

        // If clicked on a filter icon, don't show dropdown
        if (event.target.classList.contains('filter-icon')) {
            return;
        }

        // Check if there's an existing dropdown
        const existingDropdown = document.querySelector('.column-dropdown.show');
        if (existingDropdown) {
            existingDropdown.remove();
        }

        // Create dropdown
        const dropdown = createColumnDropdown(column, columnIndex, th);
        document.body.appendChild(dropdown);

        // Position the dropdown
        const thRect = th.getBoundingClientRect();
        dropdown.style.left = `${thRect.left}px`;
        dropdown.style.top = `${thRect.bottom}px`;
        dropdown.style.width = `${Math.max(280, thRect.width)}px`;

        dropdown.classList.add('show');
        isFilterMenuOpen = true;

        // Prevent event from bubbling to document
        event.stopPropagation();
    };


    // Update the createColumnDropdown function in table.js
    const createColumnDropdown = (column, columnIndex, th) => {
        const dropdown = document.createElement('div');
        dropdown.className = 'column-dropdown';
        dropdown.dataset.column = column.id;

        // Header with close button
        const header = document.createElement('div');
        header.className = 'dropdown-header';
        header.innerHTML = `
        <div class="dropdown-title">${column.name}</div>
        <button class="dropdown-close" aria-label="Close dropdown">✕</button>
    `;
        dropdown.appendChild(header);

        // Search box
        const search = document.createElement('div');
        search.className = 'dropdown-search';
        search.innerHTML = `<input type="text" placeholder="Search ${column.name}..." aria-label="Search ${column.name}">`;
        dropdown.appendChild(search);

        // Sort options
        const sortOptions = document.createElement('div');
        sortOptions.className = 'dropdown-sort-options';
        sortOptions.innerHTML = `
        <div class="dropdown-sort-option" data-action="sort-asc">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 18H9M3 12H14M3 6H20"></path>
            </svg>
            Ascending
        </div>
        <div class="dropdown-sort-option" data-action="sort-desc">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 6H20M3 12H14M3 18H9"></path>
            </svg>
            Descending
        </div>
    `;
        dropdown.appendChild(sortOptions);

        // Content for filter options
        const content = document.createElement('div');
        content.className = 'dropdown-content';

        // Load filter options based on column type
        if (activeTab) {
            if (column.type === 'date') {
                loadDateFilterOptions(content, column, columnIndex);
            } else if (column.type === 'time') {
                loadTimeFilterOptions(content, column, columnIndex);
            } else {
                loadValueFilterOptions(content, column, columnIndex);
            }
        } else {
            // Fallback to local data if no file ID
            if (column.type === 'date') {
                addDateFilters(content, column, columnIndex, getLocalDateHierarchy(columnIndex));
            } else if (column.type === 'time') {
                addTimeFilters(content, column, columnIndex, getLocalTimeHierarchy(columnIndex));
            } else {
                addValueFilters(content, column, columnIndex, getLocalColumnValues(columnIndex));
            }
        }

        dropdown.appendChild(content);

        // Footer with buttons
        const footer = document.createElement('div');
        footer.className = 'dropdown-footer';
        footer.innerHTML = `
        <button class="btn btn-outline" data-action="clear-filter">Clear Filters</button>
        <button class="btn btn-primary" data-action="apply-filter">Apply</button>
    `;
        dropdown.appendChild(footer);

        // Event listeners for dropdown
        setupDropdownEvents(dropdown, column, columnIndex);

        return dropdown;
    };
    // Setup clipboard paste for search inputs
    function setupClipboardPaste(input) {
        input.addEventListener('focus', () => {
            if (navigator.clipboard && navigator.clipboard.readText) {
                navigator.clipboard.readText()
                    .then(text => {
                        if (text && text.trim()) {
                            input.value = text.trim();
                            // Trigger input event to filter options
                            input.dispatchEvent(new Event('input'));
                        }
                    })
                    .catch(() => {
                        // Silently fail if clipboard permission is denied
                    });
            }
        });
    }

    // Load date filter options from IndexedDB
    const loadDateFilterOptions = (container, column, columnIndex) => {
        const loadingElement = document.createElement('div');
        loadingElement.textContent = 'Loading filters...';
        loadingElement.style.padding = '10px 15px';
        container.appendChild(loadingElement);

        if (activeTab) {
            // Check if there are any active filters
            if (Object.keys(activeFilters).length > 0) {
                DB.getDateHierarchyFromFilteredData(activeTab, column.name, activeFilters)
                    .then(hierarchy => {
                        container.innerHTML = '';
                        addDateFilters(container, column, columnIndex, hierarchy);
                    })
                    .catch(error => {
                        console.error('Error loading date filters:', error);
                        container.innerHTML = '';
                        const hierarchy = getLocalDateHierarchy(columnIndex);
                        addDateFilters(container, column, columnIndex, hierarchy);
                    });
            } else {
                DB.getDateHierarchyFromFile(activeTab, column.name)
                    .then(hierarchy => {
                        container.innerHTML = '';
                        addDateFilters(container, column, columnIndex, hierarchy);
                    })
                    .catch(error => {
                        console.error('Error loading date filters:', error);
                        container.innerHTML = '';
                        const hierarchy = getLocalDateHierarchy(columnIndex);
                        addDateFilters(container, column, columnIndex, hierarchy);
                    });
            }
        } else {
            // Fallback to local data
            const hierarchy = getLocalDateHierarchy(columnIndex);
            addDateFilters(container, column, columnIndex, hierarchy);
        }
    };

    // Get local date hierarchy from displayed data
    const getLocalDateHierarchy = (columnIndex) => {
        const hierarchy = {};

        // Skip header row
        for (let i = 1; i < displayData.length; i++) {
            const dateStr = displayData[i][columnIndex];
            if (!dateStr) continue;

            try {
                // Assuming date format is "DD/MM/YYYY"
                const [day, month, year] = dateStr.split('/');

                if (!hierarchy[year]) {
                    hierarchy[year] = { count: 0, months: {} };
                }

                hierarchy[year].count++;

                if (!hierarchy[year].months[month]) {
                    hierarchy[year].months[month] = { count: 0, days: {} };
                }

                hierarchy[year].months[month].count++;

                if (!hierarchy[year].months[month].days[day]) {
                    hierarchy[year].months[month].days[day] = { count: 0 };
                }

                hierarchy[year].months[month].days[day].count++;
            } catch (e) {
                console.error('Error parsing date:', dateStr);
            }
        }

        return hierarchy;
    };

    // Load time filter options from IndexedDB
    const loadTimeFilterOptions = (container, column, columnIndex) => {
        const loadingElement = document.createElement('div');
        loadingElement.textContent = 'Loading filters...';
        loadingElement.style.padding = '10px 15px';
        container.appendChild(loadingElement);

        if (activeTab) {
            // Check if there are any active filters
            if (Object.keys(activeFilters).length > 0) {
                DB.getTimeHierarchyFromFilteredData(activeTab, column.name, activeFilters)
                    .then(hierarchy => {
                        container.innerHTML = '';
                        addTimeFilters(container, column, columnIndex, hierarchy);
                    })
                    .catch(error => {
                        console.error('Error loading time filters:', error);
                        container.innerHTML = '';
                        const hierarchy = getLocalTimeHierarchy(columnIndex);
                        addTimeFilters(container, column, columnIndex, hierarchy);
                    });
            } else {
                DB.getTimeHierarchyFromFile(activeTab, column.name)
                    .then(hierarchy => {
                        container.innerHTML = '';
                        addTimeFilters(container, column, columnIndex, hierarchy);
                    })
                    .catch(error => {
                        console.error('Error loading time filters:', error);
                        container.innerHTML = '';
                        const hierarchy = getLocalTimeHierarchy(columnIndex);
                        addTimeFilters(container, column, columnIndex, hierarchy);
                    });
            }
        } else {
            // Fallback to local data
            const hierarchy = getLocalTimeHierarchy(columnIndex);
            addTimeFilters(container, column, columnIndex, hierarchy);
        }
    };

    // Get local time hierarchy from displayed data
    const getLocalTimeHierarchy = (columnIndex) => {
        const hierarchy = {};

        // Skip header row
        for (let i = 1; i < displayData.length; i++) {
            const timeStr = displayData[i][columnIndex];
            if (!timeStr) continue;

            try {
                // Assuming time format is "HH:MM:SS" or "HH:MM"
                const [hour, minute] = timeStr.split(':');

                if (!hierarchy[hour]) {
                    hierarchy[hour] = { count: 0, minutes: {} };
                }

                hierarchy[hour].count++;

                if (minute) {
                    if (!hierarchy[hour].minutes[minute]) {
                        hierarchy[hour].minutes[minute] = { count: 0 };
                    }

                    hierarchy[hour].minutes[minute].count++;
                }
            } catch (e) {
                console.error('Error parsing time:', timeStr);
            }
        }

        return hierarchy;
    };

    // Load value filter options from IndexedDB
    const loadValueFilterOptions = (container, column, columnIndex) => {
        const loadingElement = document.createElement('div');
        loadingElement.textContent = 'Loading filters...';
        container.appendChild(loadingElement);

        if (activeTab) {
            // Check if there are any active filters
            if (Object.keys(activeFilters).length > 0) {
                // Use the new filtered data function
                DB.getUniqueColumnValuesWithCountsFromFilteredData(activeTab, column.name, activeFilters)
                    .then(values => {
                        container.innerHTML = '';
                        addValueFilters(container, column, columnIndex, values);
                    })
                    .catch(error => {
                        console.error('Error loading value filters:', error);
                        container.innerHTML = '';
                        const values = getLocalColumnValues(columnIndex);
                        addValueFilters(container, column, columnIndex, values);
                    });
            } else {
                // If no active filters, use the original function
                DB.getUniqueColumnValuesWithCountsFromFile(activeTab, column.name)
                    .then(values => {
                        container.innerHTML = '';
                        addValueFilters(container, column, columnIndex, values);
                    })
                    .catch(error => {
                        console.error('Error loading value filters:', error);
                        container.innerHTML = '';
                        const values = getLocalColumnValues(columnIndex);
                        addValueFilters(container, column, columnIndex, values);
                    });
            }
        } else {
            // For local data, use the filtered values directly
            container.innerHTML = '';
            const values = getLocalColumnValues(columnIndex);
            addValueFilters(container, column, columnIndex, values);
        }
    };

    // Get local column values from displayed data
    const getLocalColumnValues = (columnIndex) => {
        const valueCounts = {};
        
        // Get currently filtered data
        const filteredData = getFilteredData();
        
        // Skip header row
        for (let i = 1; i < filteredData.length; i++) {
            const value = filteredData[i][columnIndex];
            if (value) {
                valueCounts[value] = (valueCounts[value] || 0) + 1;
            }
        }

        return Object.entries(valueCounts).map(([value, count]) => ({
            value,
            count
        }));
    };

    // New function to get filtered data
    const getFilteredData = () => {
        // Start with original data
        let filteredData = [...tableData];
        
        // Apply each active filter
        for (const [columnId, filter] of Object.entries(activeFilters)) {
            filteredData = applyFilter(filteredData, filter);
        }
        
        return filteredData;
    };

    // Helper function to apply a single filter
    const applyFilter = (data, filter) => {
        return data.filter((row, rowIndex) => {
            if (rowIndex === 0) return true; // Keep header row
            
            const value = row[filter.columnIndex];
            
            switch (filter.type) {
                case 'date':
                    return applyDateFilter(value, filter);
                case 'time':
                    return applyTimeFilter(value, filter);
                default:
                    return filter.values.includes(String(value));
            }
        });
    };

    // Update the addDateFilters function in table.js
    const addDateFilters = (container, column, columnIndex, hierarchy) => {
        // Select All group
        const selectAllGroup = document.createElement('div');
        selectAllGroup.className = 'dropdown-group';

        const selectAllHeader = document.createElement('div');
        selectAllHeader.className = 'dropdown-item';
        selectAllHeader.innerHTML = `
        <input type="checkbox" id="select-all-${column.id}" checked>
        <span>Select All</span>
    `;
        selectAllGroup.appendChild(selectAllHeader);

        container.appendChild(selectAllGroup);

        // Years
        const years = Object.keys(hierarchy).sort().reverse();

        years.forEach(year => {
            const yearGroup = document.createElement('div');
            yearGroup.className = 'dropdown-group';

            const yearHeader = document.createElement('div');
            yearHeader.className = 'dropdown-group-header collapsed';
            yearHeader.innerHTML = `
            <span class="toggle-icon">▶</span>
            <input type="checkbox" class="year-checkbox" data-year="${year}" checked>
            <span>${year}</span>
        `;
            yearGroup.appendChild(yearHeader);

            // Create months group (initially hidden)
            const monthsContainer = document.createElement('div');
            monthsContainer.className = 'dropdown-group-content';
            monthsContainer.style.display = 'none';

            // Months for this year
            const months = Object.keys(hierarchy[year].months).sort((a, b) => parseInt(a) - parseInt(b));

            months.forEach(month => {
                const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                    'July', 'August', 'September', 'October', 'November', 'December'];
                const monthName = monthNames[parseInt(month) - 1];

                const monthGroup = document.createElement('div');
                monthGroup.className = 'dropdown-group';
                monthGroup.style.marginLeft = '15px';

                const monthHeader = document.createElement('div');
                monthHeader.className = 'dropdown-group-header collapsed';
                monthHeader.innerHTML = `
                <span class="toggle-icon">▶</span>
                <input type="checkbox" class="month-checkbox" data-year="${year}" data-month="${month}" checked>
                <span>${monthName}</span>
            `;
                monthGroup.appendChild(monthHeader);

                // Create days group (initially hidden)
                const daysContainer = document.createElement('div');
                daysContainer.className = 'dropdown-group-content';
                daysContainer.style.display = 'none';

                // Days for this month
                const days = Object.keys(hierarchy[year].months[month].days).sort((a, b) => parseInt(a) - parseInt(b));

                days.forEach(day => {
                    const dayItem = document.createElement('div');
                    dayItem.className = 'dropdown-item';
                    dayItem.style.marginLeft = '15px';
                    dayItem.innerHTML = `
                    <input type="checkbox" class="day-checkbox" data-year="${year}" data-month="${month}" data-day="${day}" checked>
                    <span>${day}</span>
                `;
                    daysContainer.appendChild(dayItem);
                });

                monthGroup.appendChild(daysContainer);
                monthsContainer.appendChild(monthGroup);

                // Toggle days visibility on month header click
                monthHeader.addEventListener('click', (e) => {
                    if (!e.target.matches('input[type="checkbox"]')) {
                        e.stopPropagation();
                        monthHeader.classList.toggle('collapsed');

                        // Toggle day container display with animation
                        if (monthHeader.classList.contains('collapsed')) {
                            daysContainer.style.display = 'none';
                        } else {
                            daysContainer.style.display = 'block';
                        }

                        // Update toggle icon
                        const toggleIcon = monthHeader.querySelector('.toggle-icon');
                        toggleIcon.textContent = monthHeader.classList.contains('collapsed') ? '▶' : '▼';
                    }
                });
            });

            yearGroup.appendChild(monthsContainer);
            container.appendChild(yearGroup);

            // Toggle months visibility on year header click
            yearHeader.addEventListener('click', (e) => {
                if (!e.target.matches('input[type="checkbox"]')) {
                    e.stopPropagation();
                    yearHeader.classList.toggle('collapsed');

                    // Toggle month container display with animation
                    if (yearHeader.classList.contains('collapsed')) {
                        monthsContainer.style.display = 'none';
                    } else {
                        monthsContainer.style.display = 'block';
                    }

                    // Update toggle icon
                    const toggleIcon = yearHeader.querySelector('.toggle-icon');
                    toggleIcon.textContent = yearHeader.classList.contains('collapsed') ? '▶' : '▼';
                }
            });
        });

        // Handle select all functionality
        const selectAllCheckbox = selectAllGroup.querySelector('#select-all-' + column.id);
        const yearCheckboxes = container.querySelectorAll('.year-checkbox');
        const monthCheckboxes = container.querySelectorAll('.month-checkbox');
        const dayCheckboxes = container.querySelectorAll('.day-checkbox');

        selectAllCheckbox.addEventListener('change', () => {
            const checked = selectAllCheckbox.checked;

            yearCheckboxes.forEach(cb => { cb.checked = checked; });
            monthCheckboxes.forEach(cb => { cb.checked = checked; });
            dayCheckboxes.forEach(cb => { cb.checked = checked; });
        });

        // Update parent checkboxes when children change
        const updateParentCheckboxes = () => {
            // Update year checkboxes based on month checkboxes
            yearCheckboxes.forEach(yearCb => {
                const year = yearCb.dataset.year;
                const relatedMonthCbs = Array.from(monthCheckboxes).filter(cb => cb.dataset.year === year);

                yearCb.checked = relatedMonthCbs.some(cb => cb.checked);
                yearCb.indeterminate = relatedMonthCbs.some(cb => cb.checked) && !relatedMonthCbs.every(cb => cb.checked);
            });

            // Update month checkboxes based on day checkboxes
            monthCheckboxes.forEach(monthCb => {
                const year = monthCb.dataset.year;
                const month = monthCb.dataset.month;
                const relatedDayCbs = Array.from(dayCheckboxes).filter(cb =>
                    cb.dataset.year === year && cb.dataset.month === month
                );

                monthCb.checked = relatedDayCbs.some(cb => cb.checked);
                monthCb.indeterminate = relatedDayCbs.some(cb => cb.checked) && !relatedDayCbs.every(cb => cb.checked);
            });

            // Update select all checkbox
            selectAllCheckbox.checked = yearCheckboxes.every(cb => cb.checked);
            selectAllCheckbox.indeterminate = yearCheckboxes.some(cb => cb.checked) && !yearCheckboxes.every(cb => cb.checked);
        };

        // Add change event listeners to checkboxes
        yearCheckboxes.forEach(cb => {
            cb.addEventListener('change', () => {
                const year = cb.dataset.year;
                const checked = cb.checked;

                // Update related month and day checkboxes
                monthCheckboxes.forEach(monthCb => {
                    if (monthCb.dataset.year === year) {
                        monthCb.checked = checked;
                    }
                });

                dayCheckboxes.forEach(dayCb => {
                    if (dayCb.dataset.year === year) {
                        dayCb.checked = checked;
                    }
                });

                updateParentCheckboxes();
            });
        });

        monthCheckboxes.forEach(cb => {
            cb.addEventListener('change', () => {
                const year = cb.dataset.year;
                const month = cb.dataset.month;
                const checked = cb.checked;

                // Update related day checkboxes
                dayCheckboxes.forEach(dayCb => {
                    if (dayCb.dataset.year === year && dayCb.dataset.month === month) {
                        dayCb.checked = checked;
                    }
                });

                updateParentCheckboxes();
            });
        });

        dayCheckboxes.forEach(cb => {
            cb.addEventListener('change', updateParentCheckboxes);
        });
    };

    // Update the addTimeFilters function in table.js
    const addTimeFilters = (container, column, columnIndex, hierarchy) => {
        // Select All group
        const selectAllGroup = document.createElement('div');
        selectAllGroup.className = 'dropdown-group';

        const selectAllHeader = document.createElement('div');
        selectAllHeader.className = 'dropdown-item';
        selectAllHeader.innerHTML = `
        <input type="checkbox" id="select-all-${column.id}" checked>
        <span>Select All</span>
    `;
        selectAllGroup.appendChild(selectAllHeader);

        container.appendChild(selectAllGroup);

        // Hours
        const hours = Object.keys(hierarchy).sort((a, b) => parseInt(a) - parseInt(b));

        hours.forEach(hour => {
            const hourGroup = document.createElement('div');
            hourGroup.className = 'dropdown-group';

            const hourHeader = document.createElement('div');
            hourHeader.className = 'dropdown-group-header collapsed';
            hourHeader.innerHTML = `
            <span class="toggle-icon">▶</span>
            <input type="checkbox" class="hour-checkbox" data-hour="${hour}" checked>
            <span>${hour.padStart(2, '0')}:00 - ${hour.padStart(2, '0')}:59</span>
        `;
            hourGroup.appendChild(hourHeader);

            // Create minutes group (initially hidden)
            const minutesContainer = document.createElement('div');
            minutesContainer.className = 'dropdown-group-content';
            minutesContainer.style.display = 'none';

            // Minutes for this hour
            if (hierarchy[hour].minutes) {
                const minutes = Object.keys(hierarchy[hour].minutes).sort((a, b) => parseInt(a) - parseInt(b));

                minutes.forEach(minute => {
                    const minuteItem = document.createElement('div');
                    minuteItem.className = 'dropdown-item';
                    minuteItem.style.marginLeft = '15px';
                    minuteItem.innerHTML = `
                    <input type="checkbox" class="minute-checkbox" data-hour="${hour}" data-minute="${minute}" checked>
                    <span>${hour.padStart(2, '0')}:${minute.padStart(2, '0')}</span>
                `;
                    minutesContainer.appendChild(minuteItem);
                });
            }

            hourGroup.appendChild(minutesContainer);
            container.appendChild(hourGroup);

            // Toggle minutes visibility on hour header click
            hourHeader.addEventListener('click', (e) => {
                if (!e.target.matches('input[type="checkbox"]')) {
                    e.stopPropagation();
                    hourHeader.classList.toggle('collapsed');

                    // Toggle minute container display with animation
                    if (hourHeader.classList.contains('collapsed')) {
                        minutesContainer.style.display = 'none';
                    } else {
                        minutesContainer.style.display = 'block';
                    }

                    // Update toggle icon
                    const toggleIcon = hourHeader.querySelector('.toggle-icon');
                    toggleIcon.textContent = hourHeader.classList.contains('collapsed') ? '▶' : '▼';
                }
            });
        });

        // Handle select all functionality
        const selectAllCheckbox = selectAllGroup.querySelector('#select-all-' + column.id);
        const hourCheckboxes = container.querySelectorAll('.hour-checkbox');
        const minuteCheckboxes = container.querySelectorAll('.minute-checkbox');

        selectAllCheckbox.addEventListener('change', () => {
            const checked = selectAllCheckbox.checked;

            hourCheckboxes.forEach(cb => { cb.checked = checked; });
            minuteCheckboxes.forEach(cb => { cb.checked = checked; });
        });

        // Update parent checkboxes when children change
        const updateParentCheckboxes = () => {
            // Update hour checkboxes based on minute checkboxes
            hourCheckboxes.forEach(hourCb => {
                const hour = hourCb.dataset.hour;
                const relatedMinuteCbs = Array.from(minuteCheckboxes).filter(cb => cb.dataset.hour === hour);

                if (relatedMinuteCbs.length > 0) {
                    hourCb.checked = relatedMinuteCbs.some(cb => cb.checked);
                    hourCb.indeterminate = relatedMinuteCbs.some(cb => cb.checked) && !relatedMinuteCbs.every(cb => cb.checked);
                }
            });

            // Update select all checkbox
            selectAllCheckbox.checked = hourCheckboxes.every(cb => cb.checked);
            selectAllCheckbox.indeterminate = hourCheckboxes.some(cb => cb.checked) && !hourCheckboxes.every(cb => cb.checked);
        };

        // Add change event listeners to checkboxes
        hourCheckboxes.forEach(cb => {
            cb.addEventListener('change', () => {
                const hour = cb.dataset.hour;
                const checked = cb.checked;

                // Update related minute checkboxes
                minuteCheckboxes.forEach(minuteCb => {
                    if (minuteCb.dataset.hour === hour) {
                        minuteCb.checked = checked;
                    }
                });

                updateParentCheckboxes();
            });
        });

        minuteCheckboxes.forEach(cb => {
            cb.addEventListener('change', updateParentCheckboxes);
        });
    };


    // Add value filters to dropdown
    const addValueFilters = (container, column, columnIndex, values) => {
        // Select All group
        const selectAllGroup = document.createElement('div');
        selectAllGroup.className = 'dropdown-group';

        const selectAllHeader = document.createElement('div');
        selectAllHeader.className = 'dropdown-item';
        selectAllHeader.innerHTML = `
            <input type="checkbox" id="select-all-${column.id}" checked>
            <span>Select All</span>
        `;
        selectAllGroup.appendChild(selectAllHeader);

        container.appendChild(selectAllGroup);

        // Create items group
        const itemsGroup = document.createElement('div');
        itemsGroup.className = 'dropdown-group';
        container.appendChild(itemsGroup);

        // Sort values based on type
        let sortedValues = [];
        if (Array.isArray(values)) {
            // If values is an array of objects with value and count
            sortedValues = [...values].sort((a, b) => {
                if (column.type === 'number') {
                    return parseFloat(a.value) - parseFloat(b.value);
                }
                return a.value.localeCompare(b.value);
            });
        } else {
            // If values is an object with values as keys and counts
            sortedValues = Object.entries(values).map(([value, count]) => ({ value, count }))
                .sort((a, b) => {
                    if (column.type === 'number') {
                        return parseFloat(a.value) - parseFloat(b.value);
                    }
                    return a.value.localeCompare(b.value);
                });
        }

        // Add each value checkbox
        sortedValues.forEach(item => {
            const valueItem = document.createElement('div');
            valueItem.className = 'dropdown-item';
            valueItem.innerHTML = `
                <input type="checkbox" class="value-checkbox" data-value="${item.value}" checked>
                <span>${item.value} ${item.count ? `(${item.count})` : ''}</span>
            `;
            itemsGroup.appendChild(valueItem);
        });

        // Handle select all functionality
        const selectAllCheckbox = selectAllGroup.querySelector('#select-all-' + column.id);
        const valueCheckboxes = itemsGroup.querySelectorAll('.value-checkbox');

        selectAllCheckbox.addEventListener('change', () => {
            const checked = selectAllCheckbox.checked;
            valueCheckboxes.forEach(cb => { cb.checked = checked; });
        });

        // Update select all when value checkboxes change
        valueCheckboxes.forEach(cb => {
            cb.addEventListener('change', () => {
                const allChecked = Array.from(valueCheckboxes).every(cb => cb.checked);
                const anyChecked = Array.from(valueCheckboxes).some(cb => cb.checked);

                selectAllCheckbox.checked = allChecked;
                selectAllCheckbox.indeterminate = anyChecked && !allChecked;
            });
        });
    };

    // Update this function in table.js to fix the template literal and clipboard paste issues
    const setupDropdownEvents = (dropdown, column, columnIndex) => {
        const closeButton = dropdown.querySelector('.dropdown-close');
        const searchInput = dropdown.querySelector('.dropdown-search input');
        const applyButton = dropdown.querySelector('[data-action="apply-filter"]');
        const clearButton = dropdown.querySelector('[data-action="clear-filter"]');
        const sortAscButton = dropdown.querySelector('[data-action="sort-asc"]');
        const sortDescButton = dropdown.querySelector('[data-action="sort-desc"]');

        // Close dropdown
        closeButton.addEventListener('click', () => {
            dropdown.classList.remove('show');
            setTimeout(() => {
                dropdown.remove();
                isFilterMenuOpen = false;
            }, 200);
        });

        // Handle clipboard paste when search input is focused
        searchInput.addEventListener('focus', () => {
            if (navigator.clipboard && navigator.clipboard.readText) {
                navigator.clipboard.readText()
                    .then(text => {
                        if (text && text.trim()) {
                            searchInput.value = text.trim();
                            // Trigger input event to filter options
                            searchInput.dispatchEvent(new Event('input'));
                        }
                    })
                    .catch(() => {
                        // Silently fail if clipboard permission is denied
                    });
            }
        });

        // Search functionality with smarter handling
        searchInput.addEventListener('input', () => {
            const searchValue = searchInput.value.toLowerCase();

            // For every search, we add special CSS classes
            dropdown.classList.toggle('searching', searchValue.length > 0);

            // For date filters
            dropdown.querySelectorAll('.dropdown-group-header').forEach(header => {
                const text = header.textContent.toLowerCase();
                const group = header.closest('.dropdown-group');

                if (text.includes(searchValue)) {
                    group.style.display = 'block';

                    // If search matches, expand this level
                    if (searchValue.length > 0) {
                        header.classList.remove('collapsed');
                        const content = header.nextElementSibling;
                        if (content) {
                            content.style.display = 'block';
                        }

                        // Update toggle icon
                        const toggleIcon = header.querySelector('.toggle-icon');
                        if (toggleIcon) {
                            toggleIcon.textContent = '▼';
                        }
                    }
                } else {
                    // If not a match, check children
                    const content = header.nextElementSibling;
                    if (content && content.classList.contains('dropdown-group-content')) {
                        const hasMatch = Array.from(content.querySelectorAll('.dropdown-item, .dropdown-group-header'))
                            .some(el => el.textContent.toLowerCase().includes(searchValue));

                        group.style.display = hasMatch ? 'block' : 'none';

                        if (hasMatch && searchValue) {
                            header.classList.remove('collapsed');
                            content.style.display = 'block';

                            // Update toggle icon
                            const toggleIcon = header.querySelector('.toggle-icon');
                            if (toggleIcon) {
                                toggleIcon.textContent = '▼';
                            }
                        }
                    } else {
                        group.style.display = 'none';
                    }
                }
            });

            // For regular items
            dropdown.querySelectorAll('.dropdown-item').forEach(item => {
                if (!item.closest('.dropdown-group-header')) {
                    const text = item.textContent.toLowerCase();
                    const matches = text.includes(searchValue);
                    item.style.display = matches ? 'flex' : 'none';

                    // Auto-check items that match search
                    if (searchValue && matches) {
                        const checkbox = item.querySelector('input[type="checkbox"]');
                        if (checkbox) {
                            checkbox.checked = true;
                        }
                    }
                }
            });

            // Special handling: when search text is cleared, collapse all groups
            if (!searchValue) {
                dropdown.querySelectorAll('.dropdown-group-header').forEach(header => {
                    header.classList.add('collapsed');
                    const content = header.nextElementSibling;
                    if (content) {
                        content.style.display = 'none';
                    }

                    // Update toggle icon
                    const toggleIcon = header.querySelector('.toggle-icon');
                    if (toggleIcon) {
                        toggleIcon.textContent = '▶';
                    }
                });
            }
        });

        // Apply filter
        applyButton.addEventListener('click', () => {
            applyColumnFilter(dropdown, column, columnIndex);
            dropdown.classList.remove('show');
            setTimeout(() => {
                dropdown.remove();
                isFilterMenuOpen = false;

                // Save filter state
                if (window.appState && window.appState.activeSubtab) {
                    saveFilterState(window.appState.activeSubtab);
                }
            }, 200);
        });

        // Clear filter
        clearButton.addEventListener('click', () => {
            if (column.id in activeFilters) {
                delete activeFilters[column.id];
                applyFilters();

                // Save filter state after clearing
                if (window.appState && window.appState.activeSubtab) {
                    saveFilterState(window.appState.activeSubtab);
                }
            }
            dropdown.classList.remove('show');
            setTimeout(() => {
                dropdown.remove();
                isFilterMenuOpen = false;
            }, 200);
        });

        // Sorting
        sortAscButton.addEventListener('click', () => {
            sortTable(column.id, 'asc');
            dropdown.classList.remove('show');
            setTimeout(() => {
                dropdown.remove();
                isFilterMenuOpen = false;

                // Save filter state
                if (window.appState && window.appState.activeSubtab) {
                    saveFilterState(window.appState.activeSubtab);
                }
            }, 200);
        });

        sortDescButton.addEventListener('click', () => {
            sortTable(column.id, 'desc');
            dropdown.classList.remove('show');
            setTimeout(() => {
                dropdown.remove();
                isFilterMenuOpen = false;

                // Save filter state
                if (window.appState && window.appState.activeSubtab) {
                    saveFilterState(window.appState.activeSubtab);
                }
            }, 200);
        });
    };

    // Apply column filter
    const applyColumnFilter = (dropdown, column, columnIndex) => {
        let filterApplied = false;

        if (column.type === 'date') {
            // Get selected years, months, and days
            const yearCheckboxes = dropdown.querySelectorAll('.year-checkbox:checked');
            const monthCheckboxes = dropdown.querySelectorAll('.month-checkbox:checked');
            const dayCheckboxes = dropdown.querySelectorAll('.day-checkbox:checked');

            const selectedYears = Array.from(yearCheckboxes).map(cb => cb.dataset.year);
            const selectedMonths = Array.from(monthCheckboxes).map(cb => ({
                year: cb.dataset.year,
                month: cb.dataset.month
            }));
            const selectedDays = Array.from(dayCheckboxes).map(cb => ({
                year: cb.dataset.year,
                month: cb.dataset.month,
                day: cb.dataset.day
            }));

            if (selectedYears.length > 0 || selectedMonths.length > 0 || selectedDays.length > 0) {
                activeFilters[column.id] = {
                    type: 'date',
                    columnIndex,
                    years: selectedYears,
                    months: selectedMonths,
                    days: selectedDays
                };
                filterApplied = true;
            } else if (column.id in activeFilters) {
                delete activeFilters[column.id];
            }
        } else if (column.type === 'time') {
            // Get selected hours and minutes
            const hourCheckboxes = dropdown.querySelectorAll('.hour-checkbox:checked');
            const minuteCheckboxes = dropdown.querySelectorAll('.minute-checkbox:checked');

            const selectedHours = Array.from(hourCheckboxes).map(cb => cb.dataset.hour);
            const selectedMinutes = Array.from(minuteCheckboxes).map(cb => ({
                hour: cb.dataset.hour,
                minute: cb.dataset.minute
            }));

            if (selectedHours.length > 0 || selectedMinutes.length > 0) {
                activeFilters[column.id] = {
                    type: 'time',
                    columnIndex,
                    hours: selectedHours,
                    minutes: selectedMinutes
                };
                filterApplied = true;
            } else if (column.id in activeFilters) {
                delete activeFilters[column.id];
            }
        } else {
            // Get selected values
            const valueCheckboxes = dropdown.querySelectorAll('.value-checkbox:checked');
            const selectedValues = Array.from(valueCheckboxes).map(cb => cb.dataset.value);

            if (selectedValues.length > 0) {
                activeFilters[column.id] = {
                    type: 'value',
                    columnIndex,
                    values: selectedValues
                };
                filterApplied = true;
            } else if (column.id in activeFilters) {
                delete activeFilters[column.id];
            }
        }

        applyFilters();

        // Update the filter icon visibility
        const th = document.querySelector(`th[data-column="${column.id}"]`);
        if (th) {
            const filterIcon = th.querySelector('.filter-icon');
            if (filterIcon) {
                filterIcon.style.display = filterApplied ? 'inline' : 'none';
            }
        }
    };

    // Handle column resize
    const handleColumnResize = (e) => {
        if (!e.target.matches('.resize-handle')) return;

        const th = e.target.closest('th');
        const initialWidth = th.offsetWidth;
        const initialX = e.clientX;
        const columnId = th.dataset.column;

        // If this is the first resize, store current widths
        if (Object.keys(columnWidths).length === 0) {
            document.querySelectorAll('th').forEach(header => {
                columnWidths[header.dataset.column] = header.offsetWidth;
            });
        }

        function handleMouseMove(e) {
            const width = initialWidth + (e.clientX - initialX);
            if (width >= 50) { // Allow resizing to smaller than content
                columnWidths[columnId] = width;
                updateColumnWidths();
            }
        }

        function handleMouseUp() {
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        }

        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
    };

    // Update column widths
    const updateColumnWidths = () => {
        document.querySelectorAll('th').forEach(th => {
            const columnId = th.dataset.column;
            if (columnWidths[columnId]) {
                th.style.width = `${columnWidths[columnId]}px`;
                th.style.minWidth = `${columnWidths[columnId]}px`;

                // Set a max-width as well to allow shrinking below content size
                th.style.maxWidth = `${columnWidths[columnId]}px`;

                // Update all cells in this column
                const colIndex = parseInt(th.dataset.index);
                if (!isNaN(colIndex)) {
                    document.querySelectorAll(`td:nth-child(${th.cellIndex + 1})`).forEach(td => {
                        td.style.width = `${columnWidths[columnId]}px`;
                        td.style.minWidth = `${columnWidths[columnId]}px`;
                        td.style.maxWidth = `${columnWidths[columnId]}px`;
                        td.style.overflow = 'hidden';
                        td.style.textOverflow = 'ellipsis';
                    });
                }
            }
        });
    };

    // Start cell selection
    const startSelection = (e) => {
        if (e.button !== 0) return; // Only left mouse button

        const cell = e.target.closest('td');
        if (!cell) return;

        // If Ctrl key is pressed and there's already a selection, start multi-select
        if (e.ctrlKey && selectedCells.length > 0) {
            const cellKey = `${cell.dataset.row}-${cell.dataset.column}`;
            const existingIndex = selectedCells.findIndex(sc =>
                `${sc.row}-${sc.column}` === cellKey
            );

            if (existingIndex === -1) {
                // Add to selection
                selectedCells.push({
                    row: parseInt(cell.dataset.row),
                    column: cell.dataset.column
                });
                cell.classList.add('selected-cell');
            } else {
                // Remove from selection
                selectedCells.splice(existingIndex, 1);
                cell.classList.remove('selected-cell');
            }

            // Update copy selection button
            updateCopySelectionButton();

            return;
        }

        isSelecting = true;
        selectionStart = {
            row: parseInt(cell.dataset.row),
            column: cell.dataset.column
        };

        // Clear previous selection
        clearSelection();

        // Add this cell to selection
        selectedCells.push({
            row: selectionStart.row,
            column: selectionStart.column
        });

        cell.classList.add('selected-cell');

        // Show copy selection button
        updateCopySelectionButton();

        e.preventDefault();
    };

    // Update selection while dragging
    const updateSelection = (e) => {
        if (!isSelecting) return;

        // Get the element under the cursor (might be outside the table)
        const elementUnderCursor = document.elementFromPoint(e.clientX, e.clientY);
        const cell = elementUnderCursor ? elementUnderCursor.closest('td') : null;

        // Check if we're near the edges of the table wrapper for scrolling
        const wrapperRect = tableWrapper.getBoundingClientRect();
        const scrollThreshold = 30; // Pixels from edge to trigger scroll

        const isNearTop = e.clientY - wrapperRect.top < scrollThreshold;
        const isNearBottom = wrapperRect.bottom - e.clientY < scrollThreshold;
        const isNearLeft = e.clientX - wrapperRect.left < scrollThreshold;
        const isNearRight = wrapperRect.right - e.clientX < scrollThreshold;

        // Clear any existing auto-scroll interval
        if (autoScrollInterval) {
            clearInterval(autoScrollInterval);
            autoScrollInterval = null;
        }

        // Set up auto-scrolling if needed
        if (isNearTop || isNearBottom || isNearLeft || isNearRight) {
            autoScrollInterval = setInterval(() => {
                if (isNearTop) tableWrapper.scrollTop -= 10;
                if (isNearBottom) tableWrapper.scrollTop += 10;
                if (isNearLeft) tableWrapper.scrollLeft -= 10;
                if (isNearRight) tableWrapper.scrollLeft += 10;

                // After scrolling, update the selection with the new visible cells
                updateSelectionAfterScroll(e);
            }, 50);
        }

        if (cell) {
            updateSelectionWithCell(cell);
        }
    };

    // Helper function to update selection after scrolling
    const updateSelectionAfterScroll = (e) => {
        // Find the cell under the cursor after scrolling
        const elementUnderCursor = document.elementFromPoint(e.clientX, e.clientY);
        const cell = elementUnderCursor ? elementUnderCursor.closest('td') : null;

        if (cell) {
            updateSelectionWithCell(cell);
        }
    };

    // Helper function to update selection with a specific cell
    const updateSelectionWithCell = (cell) => {
        // Clear previous selection
        clearSelection();

        const currentRow = parseInt(cell.dataset.row);
        const currentColumn = cell.dataset.column;

        // Get all columns being displayed
        const displayedColumns = visibleColumns;

        // Find the index of start and current columns
        const startColIndex = displayedColumns.indexOf(selectionStart.column);
        const currentColIndex = displayedColumns.indexOf(currentColumn);

        // Calculate selection range
        const startRow = Math.min(selectionStart.row, currentRow);
        const endRow = Math.max(selectionStart.row, currentRow);
        const startCol = Math.min(startColIndex, currentColIndex);
        const endCol = Math.max(startColIndex, currentColIndex);

        // Select all cells in the range
        for (let i = startRow; i <= endRow; i++) {
            for (let j = startCol; j <= endCol; j++) {
                const column = displayedColumns[j];
                selectedCells.push({ row: i, column });

                const selectedCell = document.querySelector(`td[data-row="${i}"][data-column="${column}"]`);
                if (selectedCell) {
                    selectedCell.classList.add('selected-cell');
                }
            }
        }

        // Update copy selection button
        updateCopySelectionButton();
    };

    // End selection
    const endSelection = () => {
        isSelecting = false;

        // Clear auto-scroll interval
        if (autoScrollInterval) {
            clearInterval(autoScrollInterval);
            autoScrollInterval = null;
        }
    };

    // Clear selection
    const clearSelection = () => {
        document.querySelectorAll('.selected-cell').forEach(cell => {
            cell.classList.remove('selected-cell');
        });

        selectedCells = [];
        copySelectionBtn.style.display = 'none';
        copyButtonVisible = false;
    };

    // Update copy selection button
    const updateCopySelectionButton = () => {
        if (selectedCells.length === 0) {
            copySelectionBtn.style.display = 'none';
            copyButtonVisible = false;
            return;
        }

        // Find the top-right corner of the selection
        let minRow = Infinity;
        let maxCol = -Infinity;
        let topRightCell = null;

        selectedCells.forEach(cell => {
            const colIndex = visibleColumns.indexOf(cell.column);
            if (cell.row < minRow || (cell.row === minRow && colIndex > maxCol)) {
                minRow = cell.row;
                maxCol = colIndex;
                const cellElem = document.querySelector(`td[data-row="${cell.row}"][data-column="${cell.column}"]`);
                if (cellElem) {
                    topRightCell = cellElem;
                }
            }
        });

        if (topRightCell) {
            const rect = topRightCell.getBoundingClientRect();
            const tableRect = tableWrapper.getBoundingClientRect();

            // Position the button at the top-right of the selection, accounting for scrolling
            copySelectionBtn.style.display = 'flex';
            copySelectionBtn.style.left = `${rect.right - tableRect.left + tableWrapper.scrollLeft - 13}px`;
            copySelectionBtn.style.top = `${rect.top - tableRect.top + tableWrapper.scrollTop - 13}px`;
            tableWrapper.appendChild(copySelectionBtn);
            copyButtonVisible = true;
        } else {
            copySelectionBtn.style.display = 'none';
            copyButtonVisible = false;
        }
    };

    // Handle right-click context menu
    const handleContextMenu = (e) => {
        e.preventDefault();

        const cell = e.target.closest('td');
        if (!cell) return;

        // If clicked on a non-selected cell, select just this cell
        if (!cell.classList.contains('selected-cell')) {
            clearSelection();
            selectedCells.push({
                row: parseInt(cell.dataset.row),
                column: cell.dataset.column
            });
            cell.classList.add('selected-cell');
            updateCopySelectionButton();
        }

        // Show context menu
        contextMenu.style.display = 'block';
        contextMenu.style.left = `${e.clientX}px`;
        contextMenu.style.top = `${e.clientY}px`;

        // Adjust if menu would go off screen
        const rect = contextMenu.getBoundingClientRect();
        const windowWidth = window.innerWidth;
        const windowHeight = window.innerHeight;

        if (rect.right > windowWidth) {
            contextMenu.style.left = `${windowWidth - rect.width - 5}px`;
        }

        if (rect.bottom > windowHeight) {
            contextMenu.style.top = `${windowHeight - rect.height - 5}px`;
        }
    };

    // Copy selected cells to clipboard
    const copySelectedCells = () => {
        if (selectedCells.length === 0) return;

        // Group cells by row for easier processing
        const rowsMap = {};
        selectedCells.forEach(cell => {
            if (!rowsMap[cell.row]) {
                rowsMap[cell.row] = [];
            }
            rowsMap[cell.row].push(cell);
        });

        // Sort rows and columns
        const rows = Object.keys(rowsMap).map(Number).sort((a, b) => a - b);

        // Build copy text
        let copyText = '';

        rows.forEach(rowIndex => {
            // Find the row in display data
            const dataRow = displayData[rowIndex];
            if (!dataRow) return;

            // Sort cells in this row by their column order in the table
            const cells = rowsMap[rowIndex].sort((a, b) => {
                return visibleColumns.indexOf(a.column) - visibleColumns.indexOf(b.column);
            });

            // Add this row to copy text
            const rowValues = cells.map(cell => {
                const colIndex = columns.findIndex(col => col.id === cell.column);
                return dataRow[colIndex] || '';
            });

            copyText += rowValues.join('\t') + '\n';
        });

        // Copy to clipboard
        navigator.clipboard.writeText(copyText)
            .then(() => {
                showToast('Selection copied to clipboard');
                contextMenu.style.display = 'none';
            })
            .catch(err => {
                console.error('Failed to copy: ', err);
            });
    };

    // Copy entire table
    const copyEntireTable = () => {
        let copyText = '';

        // Include visible columns only
        const visibleIndices = visibleColumns.map(colId =>
            columns.findIndex(col => col.id === colId)
        );

        // Add header row
        const headerRow = visibleIndices.map(i => columns[i].name);
        copyText += headerRow.join('\t') + '\n';

        // Add data rows (skip header)
        for (let i = 1; i < displayData.length; i++) {
            const rowValues = visibleIndices.map(colIndex => displayData[i][colIndex] || '');
            copyText += rowValues.join('\t') + '\n';
        }

        // Copy to clipboard
        navigator.clipboard.writeText(copyText)
            .then(() => {
                showToast('Table copied to clipboard');
            })
            .catch(err => {
                console.error('Failed to copy: ', err);
            });
    };

    // Handle global search
    const handleGlobalSearch = (e) => {
        // Apply filters with global search
        applyFilters();

        // Save filter state
        if (window.appState && window.appState.activeSubtab) {
            saveFilterState(window.appState.activeSubtab);
        }
    };

    // Toggle column visibility menu
    const toggleColumnVisibilityMenu = () => {
        columnVisibilityMenu.classList.toggle('show');

        // Position the menu
        if (columnVisibilityMenu.classList.contains('show')) {
            const buttonRect = btnColumns.getBoundingClientRect();
            columnVisibilityMenu.style.top = `${buttonRect.bottom + 5}px`;
            columnVisibilityMenu.style.right = `${window.innerWidth - buttonRect.right}px`;
        }
    };

    // Populate column visibility menu
    const populateColumnVisibilityMenu = () => {
        if (!visibilityMenuContent) return;

        visibilityMenuContent.innerHTML = '';

        columns.forEach(column => {
            const item = document.createElement('div');
            item.className = 'dropdown-item';

            const isVisible = visibleColumns.includes(column.id);

            item.innerHTML = `
                <input type="checkbox" id="visibility-${column.id}" ${isVisible ? 'checked' : ''}>
                <label for="visibility-${column.id}">${column.name}</label>
            `;

            const checkbox = item.querySelector('input');
            checkbox.addEventListener('change', () => {
                toggleColumnVisibility(column.id, checkbox.checked);
            });

            visibilityMenuContent.appendChild(item);
        });
    };

    // Toggle column visibility
    const toggleColumnVisibility = (columnId, isVisible) => {
        if (isVisible) {
            if (!visibleColumns.includes(columnId)) {
                // Find original position
                const colIndex = columns.findIndex(col => col.id === columnId);

                // Find where to insert in visibleColumns
                let insertIndex = 0;
                for (let i = 0; i < colIndex; i++) {
                    if (visibleColumns.includes(columns[i].id)) {
                        insertIndex = visibleColumns.indexOf(columns[i].id) + 1;
                    }
                }

                visibleColumns.splice(insertIndex, 0, columnId);
            }
        } else {
            visibleColumns = visibleColumns.filter(id => id !== columnId);
        }

        // Update header
        createTableHeader();

        // Reload data
        tableBody.innerHTML = '';
        loadedRows = 0;
        loadMoreData();
    };

    // Handle outside clicks
    const handleOutsideClick = (e) => {
        // Close column dropdown
        if (!e.target.closest('.column-dropdown') && !e.target.closest('.column-header')) {
            const dropdown = document.querySelector('.column-dropdown.show');
            if (dropdown) {
                dropdown.classList.remove('show');
                setTimeout(() => {
                    dropdown.remove();
                    isFilterMenuOpen = false;
                }, 300);
            }
        }

        // Close context menu
        if (!e.target.closest('#context-menu')) {
            contextMenu.style.display = 'none';
        }

        // Close column visibility menu
        if (!e.target.closest('#column-visibility-menu') && !e.target.closest('#btn-columns')) {
            columnVisibilityMenu.classList.remove('show');
        }

        // Hide copy selection button when clicking outside the table
        if (!e.target.closest('#data-table') && !e.target.closest('#copy-selection-btn')) {
            copySelectionBtn.style.display = 'none';
            copyButtonVisible = false;
        }
    };

    // Sort table by column
    const sortTable = (columnId, direction, resetTable = true) => {
        const columnIndex = columns.findIndex(col => col.id === columnId);
        if (columnIndex === -1) return;

        currentSort = { column: columnId, direction };

        // Make a copy of displayData to sort
        const dataToSort = [...displayData];
        const headerRow = dataToSort.shift(); // Remove header row

        // Determine column type
        const colType = columns[columnIndex].type;

        // Sort data
        dataToSort.sort((a, b) => {
            let valA = a[columnIndex];
            let valB = b[columnIndex];

            if (valA === undefined || valA === null) valA = '';
            if (valB === undefined || valB === null) valB = '';

            // Handle different data types
            if (colType === 'number') {
                valA = parseFloat(valA) || 0;
                valB = parseFloat(valB) || 0;
            } else if (colType === 'date') {
                // Convert DD/MM/YYYY to sortable format
                try {
                    const [dayA, monthA, yearA] = String(valA).split('/');
                    const [dayB, monthB, yearB] = String(valB).split('/');
                    valA = new Date(`${yearA}-${monthA}-${dayA}`);
                    valB = new Date(`${yearB}-${monthB}-${dayB}`);

                    // Handle invalid dates
                    if (isNaN(valA.getTime())) valA = new Date(0);
                    if (isNaN(valB.getTime())) valB = new Date(0);
                } catch (e) {
                    valA = '';
                    valB = '';
                }
            } else if (colType === 'time') {
                // Convert time to sortable format
                try {
                    const [hoursA, minutesA, secondsA = '0'] = String(valA).split(':');
                    const [hoursB, minutesB, secondsB = '0'] = String(valB).split(':');
                    valA = parseInt(hoursA) * 3600 + parseInt(minutesA) * 60 + parseInt(secondsA);
                    valB = parseInt(hoursB) * 3600 + parseInt(minutesB) * 60 + parseInt(secondsB);
                } catch (e) {
                    valA = 0;
                    valB = 0;
                }
            } else {
                // Text comparison
                valA = String(valA).toLowerCase();
                valB = String(valB).toLowerCase();
            }

            // Compare values
            if (valA < valB) {
                return direction === 'asc' ? -1 : 1;
            }
            if (valA > valB) {
                return direction === 'asc' ? 1 : -1;
            }
            return 0;
        });

        // Add header row back
        dataToSort.unshift(headerRow);

        // Update displayData
        displayData = dataToSort;

        // Update header sort indicator
        document.querySelectorAll('th').forEach(th => {
            th.classList.remove('sorted');
            const sortIndicator = th.querySelector('.sort-indicator');
            if (sortIndicator) {
                sortIndicator.remove();
            }
        });

        const th = document.querySelector(`th[data-column="${columnId}"]`);
        if (th) {
            th.classList.add('sorted');
            const columnHeader = th.querySelector('.column-header');
            if (columnHeader) {
                // Add sort direction indicator
                const sortIndicator = document.createElement('span');
                sortIndicator.className = 'sort-indicator';
                sortIndicator.textContent = direction === 'asc' ? ' ↑' : ' ↓';
                sortIndicator.style.opacity = '0.7';
                columnHeader.appendChild(sortIndicator);
            }
        }

        // Reset table and reload if needed
        if (resetTable) {
            tableBody.innerHTML = '';
            loadedRows = 0;
            loadMoreData();
        }
    };

    // Go to first page
    const goToFirstPage = () => {
        tableWrapper.scrollTop = 0;
    };

    // Go to last page
    const goToLastPage = () => {
        // Load all data first if needed
        if (loadedRows < displayData.length - 1) {
            const loadAllData = () => {
                if (loadedRows < displayData.length - 1) {
                    loadMoreData();
                    setTimeout(loadAllData, 100);
                } else {
                    tableWrapper.scrollTop = tableWrapper.scrollHeight;
                }
            };
            loadAllData();
        } else {
            tableWrapper.scrollTop = tableWrapper.scrollHeight;
        }
    };

    // Toggle table fullscreen
    const toggleTableFullscreen = () => {
        const dataTableContainer = document.querySelector('.data-table-container');
        dataTableContainer.classList.toggle('fullscreen');

        // Update button icon
        if (dataTableContainer.classList.contains('fullscreen')) {
            btnFullscreenTable.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M8 3v3a2 2 0 01-2 2H3m18 0h-3a2 2 0 01-2-2V3m0 18v-3a2 2 0 012-2h3M3 16h3a2 2 0 012 2v3"></path>
                </svg>
            `;
        } else {
            btnFullscreenTable.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M8 3H5a2 2 0 00-2 2v3m18 0V5a2 2 0 00-2-2h-3m0 18h3a2 2 0 002-2v-3M3 16v3a2 2 0 002 2h3"></path>
                </svg>
            `;
        }
    };

    // Show a toast message
    function showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            // Create container if it doesn't exist
            const container = document.createElement('div');
            container.id = 'toast-container';
            container.className = 'toast-container';
            document.body.appendChild(container);
        }

        const toast = document.createElement('div');
        toast.className = `toast ${type ? 'toast-' + type : ''}`;
        toast.textContent = message;

        toastContainer.appendChild(toast);

        // Show toast with a small delay
        setTimeout(() => {
            toast.classList.add('show');
        }, 10);

        // Remove toast after 3 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                toast.remove();
            }, 300);
        }, 3000);
    }

    // Get current file ID
    const getactiveTab = () => {
        return activeTab;
    };

    // Get current data
    const getCurrentData = () => {
        return {
            tableData,
            displayData,
            columns,
            visibleColumns
        };
    };

    // Clean the table
    const clearTable = () => {
        tableData = [];
        displayData = [];
        columns = [];
        visibleColumns = [];
        activeFilters = {};
        currentSort = { column: null, direction: 'asc' };

        tableHeader.innerHTML = '';
        tableBody.innerHTML = '';
        noDataMessage.style.display = 'block';
    };

    // Public API
    return {
        init,
        loadData,
        showToast,
        getactiveTab,
        getCurrentData,
        saveFilterState,
        restoreFilterState,
        clearTable
    };
})();

uimanager.js:
// uiManager.js - UI component management and interactions
const UIManager = (() => {
    // Private state variables
    let controlsAdded = false;
    let selectedFileIDs = []; // Track selected file IDs in header dropdown

    // IMEI processing utility functions
    function calculateLuhnDigit(imei) {
        // Remove non-numeric characters
        imei = imei.replace(/[^0-9]/g, '');
        let sum = 0;

        // Process each digit according to Luhn algorithm
        for (let i = 0; i < imei.length; i++) {
            let digit = parseInt(imei.charAt(i));

            // Double digits at even positions (when using 1-based indexing)
            if ((i + 1) % 2 === 0) {
                digit = digit * 2;
                // If doubled value is greater than 9, subtract 9
                if (digit > 9) digit = digit - 9;
            }

            sum += digit;
        }

        // Calculate check digit (the value that makes the sum divisible by 10)
        let luhnDigit = (10 - (sum % 10)) % 10;
        return luhnDigit.toString();
    }

    // Initialize UI manager
    function init() {
        setupDialogs();
        setupCustomDropdowns();
        setupHeaderCaseFileDropdown();
        setupUploadDropdown();
        setupEventListeners();
    }

    // Set up dialog-related event listeners
    function setupDialogs() {
        setupUploadSelectDialogEvents();
        setupExportDialogEvents();
        setupCDRManagerEvents();
        setupSimplifiedUploadDialog();
    }

    // Set up upload/select dialog events
    function setupUploadSelectDialogEvents() {
        document.getElementById('close-upload-select-dialog')?.addEventListener('click', () => {
            document.getElementById('upload-select-overlay').classList.remove('active');
        });

        document.getElementById('cancel-upload-select')?.addEventListener('click', () => {
            document.getElementById('upload-select-overlay').classList.remove('active');
        });

        document.getElementById('confirm-upload-select')?.addEventListener('click', () => {
            const isUpload = document.getElementById('option-upload').checked;
            const isSelect = document.getElementById('option-select').checked;

            if (!isUpload && !isSelect) {
                DataTable.showToast('Please select an option', 'warning');
                return;
            }

            if (isUpload) {
                FileManager.handleUpload();
            } else if (isSelect) {
                FileManager.handleSelect();
            }
        });

        document.getElementById('option-upload')?.addEventListener('change', () => {
            document.getElementById('upload-option-content').style.display = 'block';
            document.getElementById('select-option-content').style.display = 'none';
            document.getElementById('confirm-upload-select').disabled = document.getElementById('file-input').files.length === 0;
        });

        document.getElementById('option-select')?.addEventListener('change', () => {
            document.getElementById('upload-option-content').style.display = 'none';
            document.getElementById('select-option-content').style.display = 'block';
            FileManager.debugAndFixDropdowns();
        });

        // Case option radio buttons
        document.getElementById('new-case')?.addEventListener('change', () => {
            document.getElementById('new-case-form').style.display = 'block';
            document.getElementById('existing-case-form').style.display = 'none';
        });

        document.getElementById('existing-case')?.addEventListener('change', () => {
            document.getElementById('new-case-form').style.display = 'none';
            document.getElementById('existing-case-form').style.display = 'block';
        });
    }

    // Populate case options
    function populateCaseOptions(cases) {
        // Populate existing case select in upload dialog
        const existingCaseSelect = document.getElementById('existing-case-select');
        if (existingCaseSelect) {
            existingCaseSelect.innerHTML = '<option value="" disabled selected>Select a case</option>';

            cases.forEach(caseItem => {
                const option = document.createElement('option');
                option.value = caseItem.caseNumber;
                option.textContent = `${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown'} (${caseItem.fileCount || 0})`;
                existingCaseSelect.appendChild(option);
            });
        }

        // Also populate the simplified dialog case select
        const simplifiedCaseSelect = document.getElementById('simplified-existing-case-select');
        if (simplifiedCaseSelect) {
            simplifiedCaseSelect.innerHTML = '<option value="" disabled selected>Select a case</option>';

            cases.forEach(caseItem => {
                const option = document.createElement('option');
                option.value = caseItem.caseNumber;
                option.textContent = `${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown'}`;
                simplifiedCaseSelect.appendChild(option);
            });
        }

        // If there's a case selection in case manager
        const managerCaseSelect = document.getElementById('manager-case-select');
        if (managerCaseSelect) {
            managerCaseSelect.innerHTML = '<option value="">All Cases</option>';

            cases.forEach(caseItem => {
                const option = document.createElement('option');
                option.value = caseItem.caseNumber;
                option.textContent = `${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown Victim'}`;
                managerCaseSelect.appendChild(option);
            });
        }

        // Update dropdowns with cases function as well if needed
        if (FileManager && typeof FileManager.updateDropdownsWithCases === 'function') {
            FileManager.updateDropdownsWithCases(cases);
        }
    }

    // Setup simplified upload dialog
    function setupSimplifiedUploadDialog() {
        // Close button
        document.getElementById('simplified-close')?.addEventListener('click', () => {
            document.getElementById('simplified-upload-overlay').classList.remove('active');
        });

        // Cancel button
        document.getElementById('simplified-cancel')?.addEventListener('click', () => {
            document.getElementById('simplified-upload-overlay').classList.remove('active');
        });

        // Radio buttons
        document.getElementById('simplified-new-case')?.addEventListener('change', () => {
            document.getElementById('simplified-new-case-form').style.display = 'block';
            document.getElementById('simplified-existing-case-form').style.display = 'none';
        });

        document.getElementById('simplified-existing-case')?.addEventListener('change', () => {
            document.getElementById('simplified-new-case-form').style.display = 'none';
            document.getElementById('simplified-existing-case-form').style.display = 'block';
        });

        // Continue button
        document.getElementById('simplified-continue')?.addEventListener('click', () => {
            const isNewCase = document.getElementById('simplified-new-case').checked;
            const fileInput = document.getElementById('header-file-input');

            if (!fileInput || fileInput.files.length === 0) {
                DataTable.showToast('No files selected', 'warning');
                return;
            }

            if (isNewCase) {
                const caseNumber = document.getElementById('simplified-case-number').value.trim();
                if (!caseNumber) {
                    DataTable.showToast('Please enter a case number', 'warning');
                    return;
                }

                const caseData = {
                    caseNumber,
                    victimName: document.getElementById('simplified-victim-name').value.trim(),
                    sections: document.getElementById('simplified-case-sections').value.trim(),
                    description: document.getElementById('simplified-case-description').value.trim()
                };

                DB.createCase(caseData)
                    .then(caseId => {
                        document.getElementById('simplified-upload-overlay').classList.remove('active');
                        FileManager.processFiles(fileInput.files, caseId);
                    })
                    .catch(error => {
                        DataTable.showToast(error, 'error');
                    });
            } else {
                const caseId = document.getElementById('simplified-existing-case-select').value;
                if (!caseId) {
                    DataTable.showToast('Please select a case', 'warning');
                    return;
                }

                document.getElementById('simplified-upload-overlay').classList.remove('active');
                FileManager.processFiles(fileInput.files, caseId);
            }
        });
    }

    // Set up export dialog events
    function setupExportDialogEvents() {
        document.getElementById('close-export-dialog')?.addEventListener('click', () => {
            document.getElementById('export-overlay').classList.remove('active');
        });

        document.getElementById('cancel-export')?.addEventListener('click', () => {
            document.getElementById('export-overlay').classList.remove('active');
        });

        document.getElementById('confirm-export')?.addEventListener('click', () => {
            const scope = document.querySelector('input[name="export-scope"]:checked').value;
            const format = document.querySelector('input[name="export-format"]:checked').value;
            document.getElementById('export-overlay').classList.remove('active');
            exportData(scope, format);
        });
    }

    // Export data based on selected options
    function exportData(scope, format) {
        const options = {
            scope,
            fileIds: window.appState.activeFiles,
            analysisTypes: ['cdr', 'maximum-b-party', 'max-imei', 'max-imsi',
                'call-max-location', 'max-day-stay', 'max-night-stay', 'sms-analysis', 'common-b-party',
                'common-imei', 'mobile-brief'],
            currentAnalysis: window.appState.activeSubtab,
            fileName: `cdr-export-${new Date().toISOString().split('T')[0]}.${format === 'excel' ? 'xlsx' : 'pdf'}`
        };

        if (format === 'excel') {
            ExportManager.exportToExcel(options);
        } else {
            ExportManager.exportToPDF(options);
        }
    }

    // Set up CDR manager events
    function setupCDRManagerEvents() {
        document.getElementById('close-cdr-manager')?.addEventListener('click', () => {
            document.getElementById('cdr-manager-overlay').classList.remove('active');
        });

        document.getElementById('close-manager')?.addEventListener('click', () => {
            document.getElementById('cdr-manager-overlay').classList.remove('active');
        });

        document.getElementById('manager-case-select')?.addEventListener('change', loadCDRManagerFiles);

        document.getElementById('delete-case-btn')?.addEventListener('click', () => {
            const selectedCase = document.getElementById('manager-case-select').value;

            if (!selectedCase) {
                DataTable.showToast('Please select a case to delete', 'warning');
                return;
            }

            if (confirm(`Are you sure you want to delete case ${selectedCase} and all its files?`)) {
                DB.deleteCase(selectedCase)
                    .then(() => {
                        DataTable.showToast(`Case ${selectedCase} deleted successfully`, 'success');
                        document.getElementById('manager-case-select').value = '';
                        FileManager.loadCases();
                        loadCDRManagerFiles();
                    })
                    .catch(error => {
                        console.error('Error deleting case:', error);
                        DataTable.showToast('Error deleting case', 'error');
                    });
            }
        });
    }


    // Enhanced header case file dropdown functionality in uiManager.js
    function setupHeaderCaseFileDropdown() {
        const dropdownBtn = document.getElementById('case-file-dropdown-btn');
        const dropdownMenu = document.getElementById('case-file-dropdown-menu');
        const loadBtn = document.getElementById('header-load-btn');
        const searchInput = document.getElementById('header-case-search');

        if (!dropdownBtn || !dropdownMenu) {
            console.error('Dropdown elements not found');
            return;
        }

        // Toggle dropdown on button click
        dropdownBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            toggleCaseFileDropdown();
        });

        // Load data button
        loadBtn?.addEventListener('click', () => {
            if (selectedFileIDs.length > 0) {
                dropdownMenu.style.display = 'none';
                FileManager.loadSelectedFiles(selectedFileIDs);
            }
        });

        // Search functionality
        searchInput?.addEventListener('input', () => {
            const searchTerm = searchInput.value.toLowerCase();
            filterCaseItems(searchTerm);
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', (e) => {
            if (!dropdownBtn.contains(e.target) && !dropdownMenu.contains(e.target)) {
                dropdownMenu.style.display = 'none';
            }
        });

        // Initial load of cases
        FileManager.debugAndFixDropdowns();
    }

    // Toggle case file dropdown
    function toggleCaseFileDropdown() {
        const dropdownMenu = document.getElementById('case-file-dropdown-menu');
        console.log('Toggling dropdown');

        if (dropdownMenu.style.display === 'block') {
            dropdownMenu.style.display = 'none';
        } else {
            dropdownMenu.style.display = 'block';
            loadCasesIntoHeaderDropdown();
        }
    }

    // Load cases into header dropdown
    function loadCasesIntoHeaderDropdown() {
        const container = document.getElementById('header-case-items-container');
        if (!container) return;

        // Clear container
        container.innerHTML = '';

        // Add "Select All" option
        const selectAllItem = document.createElement('div');
        selectAllItem.className = 'select-all-option';
        selectAllItem.innerHTML = `
            <input type="checkbox" id="header-select-all">
            <label for="header-select-all">Select All Cases</label>
        `;

        selectAllItem.querySelector('input').addEventListener('change', (e) => {
            const checked = e.target.checked;
            document.querySelectorAll('#header-case-items-container input[type="checkbox"]')
                .forEach(cb => {
                    cb.checked = checked;
                });

            updateSelectedFilesFromCheckboxes();
            updateLoadButtonState();
        });

        container.appendChild(selectAllItem);

        // Get cases and populate
        DB.getCasesWithFileCounts()
            .then(async (cases) => {
                // Sort cases
                const sortedCases = [...cases].sort((a, b) => {
                    const numA = parseInt(a.caseNumber.match(/\d+/)?.[0] || 0);
                    const numB = parseInt(b.caseNumber.match(/\d+/)?.[0] || 0);
                    return numB - numA;
                });

                // Process each case
                for (const caseItem of sortedCases) {
                    await addCaseToHeaderDropdown(container, caseItem);
                }

                // Update initial state
                updateLoadButtonState();
            })
            .catch(error => {
                console.error('Error loading cases:', error);
                DataTable.showToast('Error loading cases', 'error');
            });
    }

    // Add case to header dropdown - improved version with proper collapse behavior
    async function addCaseToHeaderDropdown(container, caseItem) {
        // Get files for this case
        const files = await DB.getFilesByCaseId(caseItem.caseNumber);

        // Create case group
        const caseGroup = document.createElement('div');
        caseGroup.className = 'case-group';

        // Create case header
        const caseHeader = document.createElement('div');
        caseHeader.className = 'dropdown-group-header collapsed';
        caseHeader.innerHTML = `
        <span class="toggle-icon">▶</span>
        <input type="checkbox" class="case-checkbox" data-case-id="${caseItem.caseNumber}">
        <span class="case-name">${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown'}</span>
        <span class="item-badge">${caseItem.fileCount || files.length}</span>
    `;

        // Create case content
        const caseContent = document.createElement('div');
        caseContent.className = 'dropdown-group-content';
        caseContent.style.display = 'none';

        // Group files by operator
        const operators = {};
        files.forEach(file => {
            const operator = file.operator || 'Unknown';
            if (!operators[operator]) {
                operators[operator] = [];
            }
            operators[operator].push(file);
        });

        // Add operator groups
        Object.entries(operators).forEach(([operator, operatorFiles]) => {
            const operatorGroup = document.createElement('div');
            operatorGroup.className = 'operator-group';

            const operatorHeader = document.createElement('div');
            operatorHeader.className = 'operator-header collapsed';
            operatorHeader.innerHTML = `
            <span class="toggle-icon">▶</span>
            <input type="checkbox" class="operator-checkbox" data-operator="${operator}" data-case-id="${caseItem.caseNumber}">
            <span class="operator-name">${operator}</span>
            <span class="operator-count">${operatorFiles.length}</span>
        `;

            const filesContainer = document.createElement('div');
            filesContainer.className = 'operator-files';
            filesContainer.style.display = 'none';

            // Add files
            operatorFiles.forEach(file => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                <input type="checkbox" class="file-checkbox" data-file-id="${file.id}" data-operator="${operator}" data-case-id="${caseItem.caseNumber}">
                <span>${file.displayName || file.fileName}</span>
            `;

                // File checkbox event
                fileItem.querySelector('input').addEventListener('change', () => {
                    updateSelectedFilesFromCheckboxes();
                    updateOperatorCheckboxes();
                    updateCaseCheckboxes();
                    updateSelectAllCheckbox();
                    updateLoadButtonState();
                });

                filesContainer.appendChild(fileItem);
            });

            // Operator checkbox event
            operatorHeader.querySelector('.operator-checkbox').addEventListener('change', (e) => {
                const checked = e.target.checked;
                filesContainer.querySelectorAll('.file-checkbox').forEach(cb => {
                    cb.checked = checked;
                });

                updateSelectedFilesFromCheckboxes();
                updateCaseCheckboxes();
                updateSelectAllCheckbox();
                updateLoadButtonState();
            });

            // Operator toggle event - properly handle expand/collapse
            operatorHeader.addEventListener('click', (e) => {
                if (!e.target.matches('input')) {
                    e.stopPropagation(); // Prevent event bubbling to case header

                    // Toggle collapsed class
                    operatorHeader.classList.toggle('collapsed');

                    // Show/hide files container with animation
                    if (operatorHeader.classList.contains('collapsed')) {
                        filesContainer.style.display = 'none';
                    } else {
                        filesContainer.style.display = 'block';
                    }

                    // Update toggle icon
                    const icon = operatorHeader.querySelector('.toggle-icon');
                    icon.textContent = operatorHeader.classList.contains('collapsed') ? '▶' : '▼';
                }
            });

            operatorGroup.appendChild(operatorHeader);
            operatorGroup.appendChild(filesContainer);
            caseContent.appendChild(operatorGroup);
        });

        // Case checkbox event
        caseHeader.querySelector('.case-checkbox').addEventListener('change', (e) => {
            const checked = e.target.checked;
            caseContent.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = checked;
            });

            updateSelectedFilesFromCheckboxes();
            updateSelectAllCheckbox();
            updateLoadButtonState();
        });

        // Case toggle event - properly handle expand/collapse
        caseHeader.addEventListener('click', (e) => {
            if (!e.target.matches('input')) {
                // Toggle collapsed class
                caseHeader.classList.toggle('collapsed');

                // Show/hide content with animation
                if (caseHeader.classList.contains('collapsed')) {
                    caseContent.style.display = 'none';
                } else {
                    caseContent.style.display = 'block';
                }

                // Update toggle icon
                const icon = caseHeader.querySelector('.toggle-icon');
                icon.textContent = caseHeader.classList.contains('collapsed') ? '▶' : '▼';
            }
        });

        caseGroup.appendChild(caseHeader);
        caseGroup.appendChild(caseContent);
        container.appendChild(caseGroup);
    }

    // Filter case items based on search term - improved version with expand/collapse
    function filterCaseItems(searchTerm) {
        const caseGroups = document.querySelectorAll('#header-case-items-container .case-group');
        let hasExpandedAny = false;

        caseGroups.forEach(caseGroup => {
            const caseHeader = caseGroup.querySelector('.dropdown-group-header');
            const caseContent = caseGroup.querySelector('.dropdown-group-content');
            const caseName = caseHeader.querySelector('.case-name').textContent.toLowerCase();

            // Check if case matches
            const caseMatches = caseName.includes(searchTerm);

            // Check if any files match
            let hasMatchingFiles = false;
            let hasExpandedOperator = false;

            // Process operator groups
            const operatorGroups = caseGroup.querySelectorAll('.operator-group');
            operatorGroups.forEach(operatorGroup => {
                const operatorHeader = operatorGroup.querySelector('.operator-header');
                const operatorName = operatorHeader.querySelector('.operator-name').textContent.toLowerCase();
                const operatorMatches = operatorName.includes(searchTerm);

                // Get file items in this operator group
                const fileItems = operatorGroup.querySelectorAll('.file-item');
                let hasMatchingFilesInOperator = false;

                // Check each file for matches
                fileItems.forEach(fileItem => {
                    const fileName = fileItem.textContent.toLowerCase();
                    const fileMatches = fileName.includes(searchTerm);

                    if (fileMatches) {
                        hasMatchingFilesInOperator = true;
                        hasMatchingFiles = true;
                        fileItem.style.display = 'flex';
                    } else if (searchTerm) {
                        fileItem.style.display = 'none';
                    } else {
                        fileItem.style.display = 'flex';
                    }
                });

                // Handle operator visibility based on matches
                if (operatorMatches || hasMatchingFilesInOperator) {
                    operatorGroup.style.display = 'block';

                    // Expand operator if there's a search and it has matches
                    if (searchTerm && (operatorMatches || hasMatchingFilesInOperator)) {
                        operatorHeader.classList.remove('collapsed');
                        operatorGroup.querySelector('.operator-files').style.display = 'block';
                        operatorHeader.querySelector('.toggle-icon').textContent = '▼';
                        hasExpandedOperator = true;
                    } else if (!searchTerm) {
                        // Collapse when search is cleared
                        operatorHeader.classList.add('collapsed');
                        operatorGroup.querySelector('.operator-files').style.display = 'none';
                        operatorHeader.querySelector('.toggle-icon').textContent = '▶';
                    }
                } else if (searchTerm) {
                    operatorGroup.style.display = 'none';
                } else {
                    operatorGroup.style.display = 'block';
                }
            });

            // Show/hide case based on matches
            if (caseMatches || hasMatchingFiles) {
                caseGroup.style.display = 'block';

                // Expand case if there's a search and it has matches
                if (searchTerm && (caseMatches || hasMatchingFiles || hasExpandedOperator)) {
                    caseHeader.classList.remove('collapsed');
                    caseContent.style.display = 'block';
                    caseHeader.querySelector('.toggle-icon').textContent = '▼';
                    hasExpandedAny = true;
                } else if (!searchTerm) {
                    // Collapse when search is cleared
                    caseHeader.classList.add('collapsed');
                    caseContent.style.display = 'none';
                    caseHeader.querySelector('.toggle-icon').textContent = '▶';
                }
            } else if (searchTerm) {
                caseGroup.style.display = 'none';
            } else {
                caseGroup.style.display = 'block';
            }
        });

        // If search term is cleared, collapse all groups
        if (!searchTerm) {
            document.querySelectorAll('#header-case-items-container .dropdown-group-header, #header-case-items-container .operator-header')
                .forEach(header => {
                    header.classList.add('collapsed');
                    const content = header.nextElementSibling;
                    if (content) {
                        content.style.display = 'none';
                    }
                    const icon = header.querySelector('.toggle-icon');
                    if (icon) {
                        icon.textContent = '▶';
                    }
                });
        }

        // Show message if no results found
        const noResultsMsg = document.getElementById('header-no-results-msg');
        const hasVisibleGroups = Array.from(caseGroups).some(group => group.style.display !== 'none');

        if (!hasVisibleGroups && searchTerm) {
            if (!noResultsMsg) {
                const msg = document.createElement('div');
                msg.id = 'header-no-results-msg';
                msg.className = 'no-results-message';
                msg.textContent = 'No matching cases or files found';
                document.getElementById('header-case-items-container').appendChild(msg);
            } else {
                noResultsMsg.style.display = 'block';
            }
        } else if (noResultsMsg) {
            noResultsMsg.style.display = 'none';
        }
    }

    // Update selected files from checkboxes
    function updateSelectedFilesFromCheckboxes() {
        const fileCheckboxes = document.querySelectorAll('#header-case-items-container .file-checkbox:checked');
        selectedFileIDs = Array.from(fileCheckboxes).map(cb => parseInt(cb.dataset.fileId));
    }

    // Update operator checkboxes based on file selection
    function updateOperatorCheckboxes() {
        const operatorCheckboxes = document.querySelectorAll('#header-case-items-container .operator-checkbox');

        operatorCheckboxes.forEach(opCb => {
            const operator = opCb.dataset.operator;
            const caseId = opCb.dataset.caseId;
            const filesContainer = opCb.closest('.operator-header').nextElementSibling;

            const fileCheckboxes = filesContainer.querySelectorAll('.file-checkbox');
            const checkedFiles = filesContainer.querySelectorAll('.file-checkbox:checked');

            if (fileCheckboxes.length > 0) {
                // Set checked if all files are checked
                opCb.checked = fileCheckboxes.length === checkedFiles.length;

                // Set indeterminate if some but not all files are checked
                opCb.indeterminate = checkedFiles.length > 0 && checkedFiles.length < fileCheckboxes.length;
            }
        });
    }

    // Update case checkboxes based on operator selection
    function updateCaseCheckboxes() {
        const caseCheckboxes = document.querySelectorAll('#header-case-items-container .case-checkbox');

        caseCheckboxes.forEach(caseCb => {
            const caseId = caseCb.dataset.caseId;
            const caseContent = caseCb.closest('.dropdown-group-header').nextElementSibling;

            const operatorCheckboxes = caseContent.querySelectorAll('.operator-checkbox');
            const checkedOperators = caseContent.querySelectorAll('.operator-checkbox:checked');
            const indeterminateOperators = Array.from(operatorCheckboxes).some(opCb => opCb.indeterminate);

            if (operatorCheckboxes.length > 0) {
                // Set checked if all operators are checked
                caseCb.checked = operatorCheckboxes.length === checkedOperators.length;

                // Set indeterminate if some operators are checked/indeterminate
                caseCb.indeterminate = indeterminateOperators ||
                    (checkedOperators.length > 0 && checkedOperators.length < operatorCheckboxes.length);
            }
        });
    }

    // Update select all checkbox based on case selection
    function updateSelectAllCheckbox() {
        const selectAllCb = document.getElementById('header-select-all');
        if (!selectAllCb) return;

        const caseCheckboxes = document.querySelectorAll('#header-case-items-container .case-checkbox');
        const checkedCases = document.querySelectorAll('#header-case-items-container .case-checkbox:checked');
        const indeterminateCases = Array.from(caseCheckboxes).some(caseCb => caseCb.indeterminate);

        if (caseCheckboxes.length > 0) {
            // Set checked if all cases are checked
            selectAllCb.checked = caseCheckboxes.length === checkedCases.length;

            // Set indeterminate if some cases are checked/indeterminate
            selectAllCb.indeterminate = indeterminateCases ||
                (checkedCases.length > 0 && checkedCases.length < caseCheckboxes.length);
        }
    }

    // Update load button state
    function updateLoadButtonState() {
        const loadBtn = document.getElementById('header-load-btn');
        if (loadBtn) {
            loadBtn.disabled = selectedFileIDs.length === 0;
        }
    }

    // Show simplified upload dialog
    function showSimplifiedUploadDialog() {
        document.getElementById('simplified-upload-overlay').classList.add('active');

        // Reset form fields
        document.getElementById('simplified-new-case').checked = true;
        document.getElementById('simplified-new-case-form').style.display = 'block';
        document.getElementById('simplified-existing-case-form').style.display = 'none';
        document.getElementById('simplified-case-number').value = '';
        document.getElementById('simplified-victim-name').value = '';
        document.getElementById('simplified-case-sections').value = '';
        document.getElementById('simplified-case-description').value = '';

        // Populate existing case select
        const existingCaseSelect = document.getElementById('simplified-existing-case-select');
        existingCaseSelect.innerHTML = '<option value="" disabled selected>Select a case</option>';

        DB.getAllCases()
            .then(cases => {
                // Sort cases
                const sortedCases = [...cases].sort((a, b) => {
                    const numA = parseInt(a.caseNumber.match(/\d+/)?.[0] || 0);
                    const numB = parseInt(b.caseNumber.match(/\d+/)?.[0] || 0);
                    return numB - numA;
                });

                // Add cases to select
                sortedCases.forEach(caseItem => {
                    const option = document.createElement('option');
                    option.value = caseItem.caseNumber;
                    option.textContent = `${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown'}`;
                    existingCaseSelect.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error loading cases:', error);
                DataTable.showToast('Error loading cases', 'error');
            });
    }

    // Set up custom dropdowns
    function setupCustomDropdowns() {
        // Setup cases dropdown
        const casesContainer = document.getElementById('select-cases-container');
        if (!casesContainer) return;

        const casesHeader = casesContainer.querySelector('.custom-dropdown-header');
        const casesSelectedCount = casesHeader.querySelector('.selected-count');
        const casesMenu = casesContainer.querySelector('.custom-dropdown-menu');
        const casesSearchInput = document.getElementById('case-search-input');
        const caseItemsContainer = document.getElementById('case-items-container');

        // Setup files dropdown
        const filesContainer = document.getElementById('select-files-container');
        const filesHeader = filesContainer.querySelector('.custom-dropdown-header');
        const filesSelectedCount = filesHeader.querySelector('.selected-count');
        const filesMenu = filesContainer.querySelector('.custom-dropdown-menu');
        const filesSearchInput = document.getElementById('file-search-input');
        const fileItemsContainer = document.getElementById('file-items-container');

        // Toggle dropdown menus
        casesHeader.addEventListener('click', () => {
            casesContainer.classList.toggle('open');
            // Close files dropdown if open
            if (filesContainer.classList.contains('open')) {
                filesContainer.classList.remove('open');
            }
            // Focus search input when opening
            if (casesContainer.classList.contains('open')) {
                setTimeout(() => casesSearchInput.focus(), 100);
            }
        });

        filesHeader.addEventListener('click', () => {
            filesContainer.classList.toggle('open');
            // Close cases dropdown if open
            if (casesContainer.classList.contains('open')) {
                casesContainer.classList.remove('open');
            }
            // Focus search input when opening
            if (filesContainer.classList.contains('open')) {
                setTimeout(() => filesSearchInput.focus(), 100);
            }
        });

        // Search functionality
        casesSearchInput?.addEventListener('input', () => {
            const searchTerm = casesSearchInput.value.toLowerCase();
            filterDropdownItems(caseItemsContainer, searchTerm);
        });

        filesSearchInput?.addEventListener('input', () => {
            const searchTerm = filesSearchInput.value.toLowerCase();
            filterDropdownItems(fileItemsContainer, searchTerm);
        });
    }

    // Filter dropdown items based on search term
    function filterDropdownItems(container, searchTerm) {
        if (!container) return;

        const items = container.querySelectorAll('.dropdown-item');
        const groups = container.querySelectorAll('.dropdown-group');
        let foundItems = 0;

        items.forEach(item => {
            const text = item.querySelector('.item-text')?.textContent.toLowerCase() || '';
            if (text.includes(searchTerm)) {
                item.style.display = 'flex';
                foundItems++;

                // If item is in a group, make sure the group is visible
                const parentGroup = item.closest('.dropdown-group-content');
                if (parentGroup) {
                    parentGroup.style.display = 'block';
                    parentGroup.previousElementSibling.classList.remove('collapsed');
                }
            } else {
                item.style.display = 'none';
            }
        });

        // For each group, check if any of its items are visible
        groups.forEach(group => {
            const groupContent = group.querySelector('.dropdown-group-content');
            const groupHeader = group.querySelector('.dropdown-group-header');
            if (!groupContent || !groupHeader) return;

            const visibleItems = groupContent.querySelectorAll('.dropdown-item[style*="display: flex"]').length;

            if (visibleItems === 0 && searchTerm) {
                group.style.display = 'none';
            } else {
                group.style.display = 'block';
            }
        });

        // Show/hide no results message
        let noResults = container.querySelector('.no-results');
        if (foundItems === 0) {
            if (!noResults) {
                noResults = document.createElement('div');
                noResults.className = 'no-results';
                noResults.textContent = 'No matching items found';
                container.appendChild(noResults);
            } else {
                noResults.style.display = 'block';
            }
        } else {
            if (noResults) {
                noResults.style.display = 'none';
            }
        }
    }

    // Update selected count text in dropdown
    function updateSelectedCountText(container, countElement, singularText, pluralText) {
        if (!container || !countElement) return;

        const selectedCount = container.querySelectorAll('.dropdown-item input[type="checkbox"]:checked').length;

        if (selectedCount === 0) {
            countElement.textContent = `No ${pluralText} selected`;
        } else if (selectedCount === 1) {
            countElement.textContent = `1 ${singularText} selected`;
        } else {
            countElement.textContent = `${selectedCount} ${pluralText} selected`;
        }
    }

    // Set up general event listeners
    function setupEventListeners() {
        // Additional event listeners can be added here
    }

    // Show upload/select dialog
    function showUploadSelectDialog() {
        document.getElementById('upload-select-overlay').classList.add('active');
        resetUploadDialogState();
    }

    // Reset upload dialog state
    function resetUploadDialogState() {
        document.getElementById('option-upload').checked = false;
        document.getElementById('option-select').checked = false;
        document.getElementById('upload-option-content').style.display = 'none';
        document.getElementById('select-option-content').style.display = 'none';
        document.getElementById('case-options').style.display = 'none';
        document.getElementById('new-case').checked = false;
        document.getElementById('existing-case').checked = false;
        document.getElementById('new-case-form').style.display = 'none';
        document.getElementById('existing-case-form').style.display = 'none';
        document.getElementById('case-number').value = '';
        document.getElementById('victim-name').value = '';
        document.getElementById('case-sections').value = '';
        document.getElementById('case-description').value = '';
        document.getElementById('file-input').value = '';
        document.getElementById('selected-files-count').textContent = 'No files selected';

        // Reset case and file selections in custom dropdowns
        const caseItemsContainer = document.getElementById('case-items-container');
        const fileItemsContainer = document.getElementById('file-items-container');
        if (caseItemsContainer) caseItemsContainer.innerHTML = '';
        if (fileItemsContainer) fileItemsContainer.innerHTML = '';

        // Reset selected cases count
        const casesSelectedCount = document.querySelector('#select-cases-container .selected-count');
        const filesSelectedCount = document.querySelector('#select-files-container .selected-count');
        if (casesSelectedCount) casesSelectedCount.textContent = 'No cases selected';
        if (filesSelectedCount) filesSelectedCount.textContent = 'No files selected';

        window.appState.selectedCaseIds = [];
        document.getElementById('confirm-upload-select').disabled = true;
    }

    // Show export dialog
    function showExportDialog() {
        document.getElementById('export-overlay').classList.add('active');
    }

    // Open CDR Manager
    function openCDRManager() {
        document.getElementById('cdr-manager-overlay').classList.add('active');

        DB.getAllCases()
            .then(cases => {
                const managerCaseSelect = document.getElementById('manager-case-select');
                managerCaseSelect.innerHTML = '<option value="">All Cases</option>';

                cases.forEach(caseItem => {
                    const option = document.createElement('option');
                    option.value = caseItem.caseNumber;
                    option.textContent = `${caseItem.caseNumber} - ${caseItem.victimName || 'Unknown Victim'}`;
                    managerCaseSelect.appendChild(option);
                });

                loadCDRManagerFiles();
            })
            .catch(error => {
                console.error('Error loading cases:', error);
                DataTable.showToast('Error loading cases', 'error');
            });
    }

    // Load CDR Manager files
    function loadCDRManagerFiles() {
        const selectedCase = document.getElementById('manager-case-select').value;
        const deleteBtn = document.getElementById('delete-case-btn');

        if (deleteBtn) {
            deleteBtn.disabled = !selectedCase;
        }

        const promise = selectedCase ? DB.getFilesByCaseId(selectedCase) : DB.getAllFiles();

        promise
            .then(files => populateCDRManagerTable(files))
            .catch(error => {
                console.error('Error loading files:', error);
                DataTable.showToast('Error loading files', 'error');
            });
    }

    // Populate CDR Manager table
    function populateCDRManagerTable(files) {
        const tbody = document.getElementById('cdr-manager-body');
        const noData = document.getElementById('manager-no-data');

        if (!tbody || !noData) return;

        tbody.innerHTML = '';

        if (files.length === 0) {
            noData.classList.remove('hidden');
            return;
        }

        noData.classList.add('hidden');

        files.forEach(file => {
            const tr = document.createElement('tr');

            // Create cells
            const tdCase = document.createElement('td');
            tdCase.textContent = file.caseId;
            tr.appendChild(tdCase);

            const tdVictim = document.createElement('td');
            DB.getCaseByNumber(file.caseId)
                .then(caseData => {
                    tdVictim.textContent = caseData ? caseData.victimName || 'Unknown' : 'Unknown';
                })
                .catch(() => { tdVictim.textContent = 'Unknown'; });
            tr.appendChild(tdVictim);

            const tdFile = document.createElement('td');
            tdFile.textContent = file.displayName || file.fileName;
            tr.appendChild(tdFile);

            const tdOperator = document.createElement('td');
            tdOperator.textContent = file.operator || 'Unknown';
            tr.appendChild(tdOperator);

            const tdDate = document.createElement('td');
            tdDate.textContent = new Date(file.uploadDate).toLocaleString();
            tr.appendChild(tdDate);

            // Actions
            const tdActions = document.createElement('td');

            // View button
            const btnView = document.createElement('button');
            btnView.className = 'btn btn-outline';
            btnView.innerHTML = '<svg class="icon" viewBox="0 0 24 24"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>';
            btnView.title = 'View';
            btnView.style.marginRight = '5px';

            btnView.addEventListener('click', () => {
                document.getElementById('cdr-manager-overlay').classList.remove('active');
                FileManager.loadSelectedFiles([file.id]);
            });

            // Delete button
            const btnDelete = document.createElement('button');
            btnDelete.className = 'btn btn-danger';
            btnDelete.innerHTML = '<svg class="icon" viewBox="0 0 24 24"><path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2M3 6h18"></path></svg>';
            btnDelete.title = 'Delete';

            btnDelete.addEventListener('click', () => {
                if (confirm(`Are you sure you want to delete file ${file.displayName || file.fileName}?`)) {
                    DB.deleteFile(file.id)
                        .then(() => {
                            DataTable.showToast('File deleted successfully', 'success');
                            loadCDRManagerFiles();
                        })
                        .catch(error => {
                            console.error('Error deleting file:', error);
                            DataTable.showToast('Error deleting file', 'error');
                        });
                }
            });

            tdActions.appendChild(btnView);
            tdActions.appendChild(btnDelete);
            tr.appendChild(tdActions);

            tbody.appendChild(tr);
        });
    }

    // Create file tab
    function createFileTab(file) {
        const tabsContainer = document.getElementById('file-tabs-container');
        if (!tabsContainer) return null;

        // Get display name from file - we'll use the name extracted from the file name
        // This uses the displayName set by FileManager's extractDisplayName function
        const displayName = file.displayName || file.fileName || 'Unnamed File';

        const tab = document.createElement('div');
        tab.className = 'tab';
        tab.dataset.fileId = file.id;
        tab.setAttribute('data-file-id', file.id);
        tab.innerHTML = `${displayName}<span class="close-icon">×</span>`;

        // Set background color based on operator
        const operatorColors = {
            VI: "#e4d01c",
            Airtel: "#ff1e1e",
            Jio: "#0f3cc9",
            Jio22: "#0f3cc9",
            BSNL: "#4baa4e",
            default: "#34495e"
        };

        const bgColor = operatorColors[file.operator] || operatorColors.default;
        tab.style.backgroundColor = bgColor;
        tab.style.color = 'white';

        // Check if this is the active tab and apply active style
        if (window.appState.activeTab === file.id) {
            tab.classList.add('active');
            tab.style.borderBottom = '3px solid red';
            tab.style.fontWeight = 'bold';
        }

        // Click event to activate tab
        tab.addEventListener('click', (e) => {
            // Ignore if clicking the close icon
            if (e.target.classList.contains('close-icon')) {
                return;
            }

            // Remove active class from all tabs
            document.querySelectorAll('.tab').forEach(t => {
                t.classList.remove('active');
                t.style.borderBottom = 'none';
                t.style.fontWeight = 'normal';
            });

            // Add active class to this tab
            tab.classList.add('active');
            tab.style.borderBottom = '3px solid red';
            tab.style.fontWeight = 'bold';

            // Set active tab
            window.appState.activeTab = file.id;

            // Show file data in table
            DataTable.loadData(file.data, file.id);

            // Create analysis subtabs
            createAnalysisSubtabs(file.data);

            // Important fix: Explicitly activate the CDR tab
            setTimeout(() => {
                // First try using the tab controller
                if (window.tabController) {
                    window.tabController.switchToAnalysisTab('cdr');
                } else {
                    // Fallback to direct activation
                    const cdrTab = document.querySelector('.subtab[data-id="cdr"]');
                    if (cdrTab) {
                        document.querySelectorAll('.subtab').forEach(t => t.classList.remove('active'));
                        cdrTab.classList.add('active');
                        window.handleAnalysisTabSwitch('cdr', file.data);
                    }
                }
            }, 100); // Small delay to ensure DOM is ready
        });

        // Close icon click event
        tab.querySelector('.close-icon').addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent tab click event

            // Remove tab
            tab.remove();

            // Remove from active files
            window.appState.activeFiles = window.appState.activeFiles.filter(id => id !== file.id);

            // If this was the active tab, activate another tab if available
            if (tab.classList.contains('active') && tabsContainer.children.length > 0) {
                tabsContainer.children[0].click();
            }

            // If no tabs left, clear table
            if (tabsContainer.children.length === 0) {
                DataTable.loadData([]);
                document.getElementById('analysis-tabs-container').innerHTML = '';
            }
        });

        tabsContainer.appendChild(tab);
        return file;
    }

    // Create analysis subtabs
    function createAnalysisSubtabs(data) {
        const subtabsContainer = document.getElementById('analysis-tabs-container');
        if (!subtabsContainer) return;

        subtabsContainer.innerHTML = '';

        const subtabs = [
            { id: 'cdr', name: 'CDR' },
            { id: 'maximum-b-party', name: 'Maximum B Party' },
            { id: 'max-imei', name: 'Max IMEI' },
            { id: 'max-imsi', name: 'Max IMSI' },
            { id: 'call-max-location', name: 'Call Max Location' },
            { id: 'max-day-stay', name: 'Max Day Stay' }, // New tab
            { id: 'max-night-stay', name: 'Max Night Stay' }, // New tab
            { id: 'sms-analysis', name: 'SMS Analysis' },
            { id: 'common-b-party', name: 'Common B Party' },
            { id: 'common-imei', name: 'Common IMEI' },
            { id: 'mobile-brief', name: 'Mobile No. Brief' },
            { id: 'network-graph', name: 'Network Graph' }
        ];


        subtabs.forEach(subtab => {
            const subtabElement = document.createElement('div');
            subtabElement.className = 'subtab';
            subtabElement.dataset.id = subtab.id;
            subtabElement.textContent = subtab.name;

            if (subtab.id === window.appState.activeSubtab || (window.appState.activeSubtab === null && subtab.id === 'cdr')) {
                subtabElement.classList.add('active');
                window.appState.activeSubtab = subtab.id;
            }

            subtabElement.addEventListener('click', () => {
                document.querySelectorAll('.subtab').forEach(t => t.classList.remove('active'));
                subtabElement.classList.add('active');
                window.appState.activeSubtab = subtab.id;
                window.handleAnalysisTabSwitch(subtab.id, data);
            });

            subtabsContainer.appendChild(subtabElement);
        });

        if (window.tabController) {
            setTimeout(() => window.tabController.restoreLastSelectedTab(), 100);
        }
    }

    // Handle outside clicks
    function handleOutsideClick(e) {
        // Close column dropdown
        if (!e.target.closest('.column-dropdown') && !e.target.closest('.column-header')) {
            const dropdown = document.querySelector('.column-dropdown.show');
            if (dropdown) {
                dropdown.classList.remove('show');
                setTimeout(() => dropdown.remove(), 300);
            }
        }

        // Close context menu
        if (!e.target.closest('#context-menu')) {
            const contextMenu = document.getElementById('context-menu');
            if (contextMenu) {
                contextMenu.style.display = 'none';
            }
        }

        // Close column visibility menu
        if (!e.target.closest('#column-visibility-menu') && !e.target.closest('#btn-columns')) {
            const columnVisibilityMenu = document.getElementById('column-visibility-menu');
            if (columnVisibilityMenu) {
                columnVisibilityMenu.classList.remove('show');
            }
        }

        // Close custom dropdowns
        const casesContainer = document.getElementById('select-cases-container');
        const filesContainer = document.getElementById('select-files-container');

        if (!e.target.closest('#select-cases-container') && casesContainer) {
            casesContainer.classList.remove('open');
        }

        if (!e.target.closest('#select-files-container') && filesContainer) {
            filesContainer.classList.remove('open');
        }

        // Close header dropdown
        if (!e.target.closest('#case-file-dropdown-container')) {
            const headerDropdown = document.getElementById('case-file-dropdown-menu');
            if (headerDropdown) {
                headerDropdown.style.display = 'none';
            }
        }
    }

    // Refresh header dropdown data
    function refreshHeaderDropdown() {
        if (document.getElementById('case-file-dropdown-menu').style.display === 'block') {
            loadCasesIntoHeaderDropdown();
        }
    }

    // Set up upload dropdown in header
    function setupUploadDropdown() {
        // Add upload dropdown to header if not already present
        let headerActions = document.querySelector('.header-actions');
        if (!headerActions || document.getElementById('upload-dropdown-container')) return;

        // Create dropdown container
        const dropdown = document.createElement('div');
        dropdown.className = 'upload-dropdown';
        dropdown.id = 'upload-dropdown-container';

        // Main button
        dropdown.innerHTML = `
            <button class="upload-dropdown-btn" id="upload-dropdown-btn">
                <span id="upload-dropdown-selected-label">Upload Files</span>
                <span class="dropdown-arrow">▼</span>
            </button>
            <div class="upload-dropdown-menu" id="upload-dropdown-menu">
                <button class="upload-dropdown-item selected" id="upload-files-menu-item">Upload Files</button>
                <button class="upload-dropdown-item" id="upload-folder-menu-item">Upload Folder</button>
            </div>
            <input type="file" id="header-file-input" multiple style="display:none" />
            <input type="file" id="header-folder-input" webkitdirectory directory multiple style="display:none" />
        `;

        headerActions.prepend(dropdown);

        // Dropdown logic
        const btn = dropdown.querySelector('#upload-dropdown-btn');
        const menu = dropdown.querySelector('#upload-dropdown-menu');
        const filesItem = dropdown.querySelector('#upload-files-menu-item');
        const folderItem = dropdown.querySelector('#upload-folder-menu-item');
        const fileInput = dropdown.querySelector('#header-file-input');
        const folderInput = dropdown.querySelector('#header-folder-input');
        const label = dropdown.querySelector('#upload-dropdown-selected-label');

        // State: default is files
        let selected = 'files';

        // Dropdown open/close
        btn.addEventListener('click', (e) => {
            e.stopPropagation();
            dropdown.classList.toggle('open');
        });
        document.addEventListener('click', (e) => {
            if (!dropdown.contains(e.target)) dropdown.classList.remove('open');
        });

        // "Upload Files" click
        filesItem.addEventListener('click', (e) => {
            e.preventDefault();
            selected = 'files';
            filesItem.classList.add('selected');
            folderItem.classList.remove('selected');
            label.textContent = 'Upload Files';
            dropdown.classList.remove('open');
            fileInput.value = '';
            fileInput.click();
        });

        // "Upload Folder" click
        folderItem.addEventListener('click', (e) => {
            e.preventDefault();
            selected = 'folder';
            folderItem.classList.add('selected');
            filesItem.classList.remove('selected');
            label.textContent = 'Upload Folder';
            dropdown.classList.remove('open');
            folderInput.value = '';
            folderInput.click();
        });

        // File input change
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                // Default: show simplified upload dialog
                UIManager.showSimplifiedUploadDialog();
            }
        });

        // Folder input change
        folderInput.addEventListener('change', async (e) => {
            if (e.target.files.length > 0) {
                // Handle folder upload recursively (max 10 levels)
                await FileManager.handleFolderUpload(e.target.files);
            }
        });
    }

    // Public API
    return {
        init,
        showUploadSelectDialog,
        resetUploadDialogState,
        showExportDialog,
        openCDRManager,
        createFileTab,
        createAnalysisSubtabs,
        populateCaseOptions,
        updateSelectedCountText,
        handleOutsideClick,
        showSimplifiedUploadDialog,
        refreshHeaderDropdown,
        loadCasesIntoHeaderDropdown,
        setupUploadDropdown,
        calculateLuhnDigit
    };
})();

analysis.css:
/* analysis.css - Styles for analysis components */
.analysis-container {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  
  .analysis-header {
    display: flex;
    justify-content: space-between;
    padding: 10px 15px;
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
  }
  
  .summary-card {
    background-color: white;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    padding: 15px;
    margin-bottom: 10px;
  }
  
  .map-container {
    height: 500px;
    width: 100%;
    margin-top: 20px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .map-controls {
    margin: 10px;
    padding: 5px;
    background: white;
    border-radius: 4px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  }
  
  .map-controls button {
    margin: 0 5px;
  }
  
  .network-container {
    height: 600px;
    width: 100%;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
  }
  
  .filter-option {
    padding: 5px 10px;
    background-color: #f1f1f1;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .count-bubble {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background-color: #3498db;
    color: white;
    font-size: 12px;
    font-weight: bold;
    margin-left: 5px;
  }
  
  .location-marker {
    display: flex;
    align-items: center;
    margin-bottom: 5px;
  }
  
  .timeline-item {
    position: relative;
    margin-bottom: 15px;
    padding-bottom: 15px;
    border-bottom: 1px solid #f5f5f5;
  }

moden-cdr.css:
/* Base variables for consistent styling */
:root {
  /* Core colors */
  --primary: #3a36e0;
  --primary-light: #5653e5;
  --primary-dark: #2824b8;
  --secondary: #6c757d;
  --success: #28a745;
  --danger: #dc3545;
  --warning: #ffc107;
  --info: #17a2b8;
  --light: #f8f9fa;
  --dark: #343a40;
  --white: #ffffff;

  /* Gray scale */
  --gray-50: #f9fafb;
  --gray-100: #f8f9fa;
  --gray-200: #e9ecef;
  --gray-300: #dee2e6;
  --gray-400: #ced4da;
  --gray-500: #adb5bd;
  --gray-600: #6c757d;
  --gray-700: #495057;
  --gray-800: #343a40;
  --gray-900: #212529;

  /* Operator colors */
  --operator-airtel: #ff1e1e;
  --operator-jio: #0f3cc9;
  --operator-vi: #e4d01c;
  --operator-bsnl: #4baa4e;
  --operator-default: #6c757d;

  /* Typography */
  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  --font-size-xs: 12px;
  --font-size-sm: 14px;
  --font-size-md: 16px;
  --font-size-lg: 18px;
  --font-size-xl: 20px;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-bold: 700;

  /* Spacing & Dimensions */
  --spacing-xs: 4px;
  --spacing-sm: 8px;
  --spacing-md: 12px;
  --spacing-lg: 16px;
  --spacing-xl: 24px;
  --border-radius-sm: 4px;
  --border-radius-md: 6px;
  --border-radius-lg: 8px;
  --border-width: 1px;
  
  /* Effects */
  --box-shadow-sm: 0 2px 5px rgba(0, 0, 0, 0.05);
  --box-shadow-md: 0 4px 10px rgba(0, 0, 0, 0.08);
  --box-shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.12);
  --transition-fast: 150ms ease;
  --transition-normal: 250ms ease;
  --transition-slow: 350ms ease;
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: var(--font-family);
  font-size: var(--font-size-md);
  line-height: 1.5;
  color: var(--gray-800);
  background-color: #f5f7fa;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* App layout */
.app-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  max-width: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* Header styles */
.app-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-md);
  background: linear-gradient(135deg, var(--primary-dark), var(--primary));
  color: var(--white);
  box-shadow: var(--box-shadow-md);
  z-index: 10;
}

.app-title {
  font-size: var(--font-size-xl);
  font-weight: var(--font-weight-bold);
  margin: 0;
  color: var(--white);
}

.header-actions {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
}

/* Button styles */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-sm);
  padding: 10px 16px;
  border: none;
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: all var(--transition-normal);
  white-space: nowrap;
  box-shadow: var(--box-shadow-sm);
  position: relative;
  overflow: hidden;
}

.btn::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.1);
  opacity: 0;
  transition: opacity var(--transition-fast);
}

.btn:hover::after {
  opacity: 1;
}

.btn:active {
  transform: translateY(1px);
}

.btn-primary {
  background-color: var(--primary);
  color: var(--white);
}

.btn-secondary {
  background-color: var(--secondary);
  color: var(--white);
}

.btn-success {
  background-color: var(--success);
  color: var(--white);
}

.btn-danger {
  background-color: var(--danger);
  color: var(--white);
}

.btn-outline {
  background-color: transparent;
  border: 1px solid var(--gray-300);
  color: var(--gray-700);
}

.btn-outline:hover {
  background-color: var(--gray-100);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Icon buttons */
.btn-icon {
  width: 36px;
  height: 36px;
  padding: 0;
  border-radius: var(--border-radius-md);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.1);
  color: var(--white);
}

.btn-icon:hover {
  background-color: rgba(255, 255, 255, 0.2);
}

.icon {
  width: 20px;
  height: 20px;
  stroke: currentColor;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
  fill: none;
  
}

/* SVG icon fixes */
#btn-fullscreen-table svg {
  width: 16px;
  height: 16px;
  viewBox: 0 0 24 24;
  stroke: var(--gray-700);
  fill: none;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;

}

/* Tab styles */
.tabs-container {
  display: flex;
  overflow-x: auto;
  background-color: var(--white);
  border-bottom: 1px solid var(--gray-300);
  scrollbar-width: none;
  -ms-overflow-style: none;
  padding: var(--spacing-sm) var(--spacing-md);
}

.tabs-container::-webkit-scrollbar {
  display: none;
}

.tab {
  padding: var(--spacing-sm) var(--spacing-md);
  margin-right: var(--spacing-xs);
  white-space: nowrap;
  cursor: pointer;
  border-radius: var(--border-radius-md);
  transition: all var(--transition-normal);
  font-weight: var(--font-weight-medium);
  border: none;
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: var(--box-shadow-sm);
  background-color: var(--operator-default);
}

.tab:hover {
  filter: brightness(1.1);
}

.tab.active {
  font-weight: var(--font-weight-bold);
  box-shadow: 0 3px 8px rgba(0, 0, 0, 0.2);
  border-bottom: 3px solid #ff0000 !important;
}

.tab .close-icon {
  margin-left: var(--spacing-sm);
  font-size: var(--font-size-lg);
  opacity: 0.7;
  transition: opacity var(--transition-fast);
  line-height: 1;
}

.tab:hover .close-icon {
  opacity: 1;
  cursor: pointer;
  color: #ff0000;
}

/* Operator-specific tab colors */
.tab[data-file-id*="866173065773200"],
.tab[data-file-id*="862144040556626"],
.tab[data-file-id*="864473058903273"],
.tab[data-file-id*="354266111548391"] {
  background-color: var(--operator-bsnl);
}

.tab[data-file-id*="865468041460182"],
.tab[data-file-id*="868880369355094"],
.tab[data-file-id*="359246093588925"],
.tab[data-file-id*="350092236898188"] {
  background-color: var(--operator-vi);
}

.tab[data-file-id*="357288171029697"] {
  background-color: var(--operator-jio);
}

.tab[data-file-id*="869275024509075"],
.tab[data-file-id*="864895053847540"],
.tab[data-file-id*="868980397612"] {
  background-color: var(--operator-airtel);
}

/* Subtabs */
.subtabs-container {
  display: flex;
  overflow-x: auto;
  background-color: var(--gray-100);
  border-bottom: 1px solid var(--gray-300);
  scrollbar-width: none;
  padding: var(--spacing-xs) var(--spacing-md);
}

.subtabs-container::-webkit-scrollbar {
  display: none;
}

.subtab {
  padding: var(--spacing-sm) var(--spacing-md);
  margin-right: var(--spacing-xs);
  white-space: nowrap;
  cursor: pointer;
  border-radius: var(--border-radius-md) var(--border-radius-md) 0 0;
  transition: all var(--transition-normal);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  color: var(--gray-700);
  background-color: #bac8ff;
}

.subtab:hover {
  background-color: #d0d7ff;
}

.subtab.active {
  background-color: darkblue;
  color: var(--white);
  border-bottom: 3px solid #09ff00;
  font-weight: var(--font-weight-bold);
  box-shadow: var(--box-shadow-sm);
}

/* Main content */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  padding: var(--spacing-md);
}

/* Data table container */
.data-table-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  background-color: var(--white);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--box-shadow-md);
}

/* Toolbar */
.toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--spacing-md);
  background-color: var(--white);
  border-bottom: 1px solid var(--gray-200);
  border-top-left-radius: var(--border-radius-lg);
  border-top-right-radius: var(--border-radius-lg);
}

.toolbar-title {
  font-size: var(--font-size-md);
  font-weight: var(--font-weight-bold);
  color: var(--gray-800);
}

.toolbar-actions {
  display: flex;
  gap: var(--spacing-sm);
  align-items: center;
}

/* Search */
.search-container {
  position: relative;
  min-width: 220px;
}

.search-icon {
  position: absolute;
  left: var(--spacing-sm);
  top: 50%;
  transform: translateY(-50%);
  color: var(--gray-500);
}

.search-input {
  width: 100%;
  padding: 10px 10px 10px 35px;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
  transition: all var(--transition-normal);
  background-color: var(--gray-100);
}

.search-input:focus {
  outline: none;
  border-color: var(--primary);
  background-color: var(--white);
  box-shadow: 0 0 0 3px rgba(58, 54, 224, 0.1);
}

/* Table */
.table-wrapper {
  flex: 1;
  overflow: auto;
  padding: 0 var(--spacing-md) var(--spacing-md);
}

#data-table {
  border-collapse: separate;
  border-spacing: 0;
  border: 1px solid var(--gray-500);
}

#data-table th {
  position: sticky;
  top: 0;
  background-color: var(--gray-100);
  padding: 5px;
  text-align: left;
  font-weight: var(--font-weight-bold);
  color: var(--gray-800);
  border: 1px solid var(--gray-500);
  white-space: nowrap;
  transition: background-color var(--transition-fast);
  z-index: 1;
}

#data-table th:first-child {
  border-top-left-radius: var(--border-radius-md);
}

#data-table th:last-child {
  border-top-right-radius: var(--border-radius-md);
}

#data-table th:hover {
  background-color: var(--gray-200);
}

#data-table td {
  padding: 5px;
  border: 1px solid var(--gray-500);
  transition: background-color var(--transition-fast);
}

#data-table tr:hover td {
  background-color: rgba(58, 54, 224, 0.05);
}

#data-table tr:last-child td:first-child {
  border-bottom-left-radius: var(--border-radius-md);
}

#data-table tr:last-child td:last-child {
  border-bottom-right-radius: var(--border-radius-md);
}

/* Cell selection */
.selected-cell {
  background-color: rgba(52, 152, 219, 0.15) !important;
}

.multi-selected {
  background-color: rgba(52, 152, 219, 0.3) !important;
}

/* Navigation controls */
.navigation-controls {
  display: flex;
  gap: 5px;
}

.nav-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  background-color: white;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius-sm);
  cursor: pointer;
  transition: var(--transition-normal);
}

.nav-btn:hover {
  background-color: var(--gray-100);
}

/* Dropdown styling */
.column-dropdown, 
#case-file-dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 280px;
  background-color: white;
  border-radius: var(--border-radius-md);
  box-shadow: var(--box-shadow-lg);
  z-index: 1000;
  overflow: hidden;
  animation: dropdown-appear 0.2s ease;
}

@keyframes dropdown-appear {
  from {
    opacity: 0;
    transform: translateY(-8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.column-dropdown.show {
  display: block;
}

.dropdown-header, .dropdown-search, .dropdown-footer {
  padding: var(--spacing-md);
  background-color: white;
  border-bottom: 1px solid var(--gray-300);
  position: sticky;
  top: 0;
  z-index: 2;
}

.dropdown-footer {
  top: auto;
  bottom: 0;
  border-top: 1px solid var(--gray-300);
  border-bottom: none;
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-md);
}

.dropdown-title {
  font-weight: var(--font-weight-bold);
  font-size: var(--font-size-md);
}

.dropdown-search input {
  width: 100%;
  padding: 8px 12px;
  border: 1px solid var(--gray-300);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-sm);
}

.dropdown-search input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(58, 54, 224, 0.1);
}

.dropdown-content,
#header-case-items-container {
  max-height: 350px;
  overflow-y: auto;
  scrollbar-width: thin;
}

.dropdown-content::-webkit-scrollbar,
#header-case-items-container::-webkit-scrollbar {
  width: 4px;
}

.dropdown-content::-webkit-scrollbar-thumb,
#header-case-items-container::-webkit-scrollbar-thumb {
  background: var(--gray-400);
  border-radius: 2px;
}

/* Dropdown Items */
.dropdown-item,
.case-group .file-item {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  cursor: pointer;
  transition: background-color var(--transition-fast);
}

.dropdown-item:hover,
.case-group .file-item:hover {
  background-color: var(--gray-100);
}

.dropdown-item.selected,
.case-group .file-item.selected {
  background-color: rgba(58, 54, 224, 0.08);
}

.dropdown-item input[type="checkbox"],
.dropdown-group-header input[type="checkbox"],
.case-group input[type="checkbox"],
.operator-header input[type="checkbox"] {
  margin-right: 10px;
  cursor: pointer;
  width: 16px;
  height: 16px;
}

/* Dropdown Group Header */
.dropdown-group-header,
.case-group .dropdown-group-header {
  padding: 10px 12px;
  cursor: pointer;
  font-weight: var(--font-weight-medium);
  background-color: var(--gray-50);
  transition: background-color var(--transition-fast);
}

.dropdown-group-header:hover,
.case-group .dropdown-group-header:hover {
  background-color: var(--gray-200);
}

.dropdown-group-header .toggle-icon,
.operator-header .toggle-icon {
  margin-right: 8px;
  font-size: 12px;
  transition: transform 0.2s ease;
  color: var(--gray-700);
  width: 16px;
  text-align: center;
}

.dropdown-group-header.collapsed .toggle-icon,
.operator-header.collapsed .toggle-icon {
  transform: rotate(-90deg);
}

.dropdown-group-content,
.operator-files {
  overflow-y: auto;
  transition: all 0.2s ease;
}

.dropdown-group-header.collapsed + .dropdown-group-content,
.operator-header.collapsed + .operator-files {
  display: none;
}

/* Case & Operator Structure */
.case-group {
  margin: 0;
  border-bottom: 1px solid var(--gray-100);
}

.case-group .operator-header {
  padding: 8px 12px 8px 36px;
  background-color: var(--gray-100);
  margin: 0;
  display: flex;
  align-items: center;
  transition: background-color var(--transition-fast);
}

.case-group .operator-header:hover {
  background-color: var(--gray-200);
}

.case-group .operator-files {
  padding: 0;
  background-color: white;
}

.case-group .file-item {
  padding: 6px 12px 6px 60px;
}

/* Badge & Count Styling */
.item-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 22px;
  height: 22px;
  border-radius: 11px;
  background-color: var(--primary);
  color: white;
  font-size: 11px;
  font-weight: var(--font-weight-bold);
  margin-left: 8px;
  padding: 0 6px;
}

.case-name,
.operator-name {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Select All Option */
.select-all-option {
  padding: 10px 12px;
  background-color: var(--primary-light);
  color: white;
  font-weight: var(--font-weight-medium);
  display: flex;
  align-items: center;
  border-bottom: 1px solid rgba(255, 255, 255, 0.2);
}

.select-all-option input[type="checkbox"] {
  margin-right: 10px;
}

/* Header dropdown container */
.header-dropdown-container {
  position: relative;
}

/* Upload dropdown specific styles */
.upload-dropdown {
  position: relative;
  display: inline-block;
}

.upload-dropdown-btn {
  display: flex;
  align-items: center;
  gap: 6px;
  background-color: var(--primary);
  color: #fff;
  border: none;
  border-radius: var(--border-radius-md);
  padding: 10px 16px;
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  cursor: pointer;
  transition: var(--transition-normal);
}

.upload-dropdown-btn:hover {
  background-color: var(--primary-dark);
}

.upload-dropdown-menu {
  position: absolute;
  top: 110%;
  left: 0;
  min-width: 180px;
  background: #fff;
  border-radius: var(--border-radius-md);
  box-shadow: var(--box-shadow-lg);
  z-index: 1001;
  display: none;
}

.upload-dropdown.open .upload-dropdown-menu {
  display: block;
  animation: dropdown-appear 0.2s ease;
}

.upload-dropdown-item {
  padding: 10px 16px;
  cursor: pointer;
  font-size: var(--font-size-sm);
  color: var(--gray-800);
  background: none;
  border: none;
  width: 100%;
  text-align: left;
  transition: background 0.2s;
}

.upload-dropdown-item:hover,
.upload-dropdown-item.selected {
  background: var(--gray-100);
  color: var(--primary);
  font-weight: var(--font-weight-bold);
}

/* Toast notifications */
.toast-container {
  position: fixed;
  bottom: var(--spacing-lg);
  right: var(--spacing-lg);
  z-index: 1001;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
}

.toast {
  padding: var(--spacing-md);
  border-radius: var(--border-radius-md);
  background-color: var(--secondary);
  color: var(--white);
  box-shadow: var(--box-shadow-md);
  font-size: var(--font-size-sm);
  opacity: 0;
  transform: translateX(50px);
  transition: opacity 0.3s, transform 0.3s;
}

.toast.show {
  opacity: 1;
  transform: translateX(0);
}

.toast-success {
  background-color: var(--success);
}

.toast-error {
  background-color: var(--danger);
}

.toast-warning {
  background-color: var(--warning);
}

/* Fullscreen mode */
.fullscreen {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 9999;
  background-color: white;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .header-actions {
    flex-wrap: wrap;
  }

  .search-container {
    min-width: 100%;
  }

  .toolbar {
    flex-direction: column;
    gap: 10px;
    align-items: flex-start;
  }

  .toolbar-actions {
    width: 100%;
    overflow-x: auto;
    padding-bottom: 5px;
  }
}

styles.css:
/* styles.css */
:root {
  --primary-color: #2c3e50;
  --primary-hover: #1e2b38;
  --secondary-color: #34495e;
  --accent-color: #3498db;
  --accent-hover: #2980b9;
  --success-color: #2ecc71;
  --success-hover: #27ae60;
  --danger-color: #e74c3c;
  --danger-hover: #c0392b;
  --warning-color: #f39c12;
  --light-color: #ecf0f1;
  --border-color: #000000;
  --text-color: #000000;
  --text-light: #7f8c8d;
  --background-color: #f5f7fa;
  --box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  --transition: all 0.3s ease;
  --border-radius: 4px;
  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif;
}

/* Base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: var(--font-family);
}

body {
  background-color: #f1f3f9;
}

/* Navigation controls */
.navigation-controls {
  display: flex;
  gap: 5px;
}

.nav-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 30px;
  height: 30px;
  background-color: white;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: var(--transition);
}

.nav-btn:hover {
  background-color: var(--light-color);
}

/* File items */
.file-item {
  padding: 4px 8px;
}

.case-item {
  padding: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.case-item:hover {
  background-color: #f5f5f5;
}

.case-item input[type="checkbox"] {
  margin-right: 8px;
}

/* Case and operator groups */
.case-group {
  margin-bottom: 5px;
}

.case-group .dropdown-group-header {
  padding: 8px 10px;
  background-color: #f1f1f1;
  cursor: pointer;
  font-weight: 500;
}

.case-group .dropdown-group-content {
  padding: 0 0 0 15px;
}

.case-group .operator-header {
  padding: 7px 10px;
  background-color: #f8f9fa;
  margin: 2px 0;
}

.case-group .operator-files {
  padding: 5px 0 5px 30px;
  border: none;
  background-color: #fafafa;
}

.case-group .file-item {
  padding: 4px 5px;
  margin: 2px 0;
}

.operator-group {
  margin-bottom: 8px;
}

.operator-header {
  padding: 8px;
  background-color: #676666;
  cursor: pointer;
  border-radius: 4px;
  display: flex;
  align-items: center;
  gap: 8px;
  color: black;
}

.operator-header:hover {
  background-color: #434040;
}

.operator-header.collapsed {
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
}

.operator-name {
  font-weight: 500;
}

.operator-files {
  padding: 8px 8px 8px 32px;
  border: 1px solid #e0e0e0;
  border-top: none;
  border-bottom-left-radius: 4px;
  border-bottom-right-radius: 4px;
  color: black;
}

/* Toggle icon */
.toggle-icon {
  font-size: 12px;
  width: 16px;
  text-align: center;
}

/* Network container */
#network-container {
  width: 100%;
  height: 600px;
  border: 1px solid var(--border-color);
  background-color: white;
  position: relative;
}

.network-controls {
  position: absolute;
  top: 10px;
  right: 10px;
  z-index: 1;
  display: flex;
  gap: 10px;
}

/* Badges and counters */
.case-count {
  margin-left: auto;
  background-color: #6c757d;
  color: white;
  padding: 2px 6px;
  border-radius: 10px;
  font-size: 12px;
}

.op-count {
  margin-left: auto;
  font-size: 11px;
  color: var(--text-light);
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
  height: 6px;
}

::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: #a1a1a1;
}

/* Fullscreen mode */
.fullscreen {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 9999;
  background-color: white;
}

/* Utility classes */
.hidden {
  display: none;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .header-actions {
    flex-wrap: wrap;
  }

  .search-container {
    min-width: 100%;
  }

  .toolbar {
    flex-direction: column;
    gap: 10px;
    align-items: flex-start;
  }

  .toolbar-actions {
    width: 100%;
    overflow-x: auto;
    padding-bottom: 5px;
  }

  .option-buttons {
    flex-direction: column;
  }
}

/* Layout */
.app-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
  max-width: 100%;
  margin: 0 auto;
  padding: 0;
  overflow: hidden;
}

.app-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background-color: var(--primary-color);
  color: white;
  box-shadow: var(--box-shadow);
  z-index: 10;
}

.app-title {
  font-size: 1.5rem;
  font-weight: 600;
  margin: 0;
}

.header-actions {
  display: flex;
  align-items: center;
  gap: 10px;
}

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 5px;
  padding: 8px 12px;
  background-color: var(--accent-color);
  color: white;
  border: none;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 13px;
  font-weight: 500;
  transition: var(--transition);
  text-decoration: none;
  white-space: nowrap;
}

.btn:hover {
  background-color: var(--accent-hover);
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.btn-icon {
  width: 34px;
  height: 34px;
  padding: 0;
  background-color: transparent;
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: rgb(21, 223, 246);
}

.btn-icon:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

.btn-primary {
  background-color: var(--accent-color);
}

.btn-primary:hover {
  background-color: var(--accent-hover);
}

.btn-secondary {
  background-color: var(--secondary-color);
}

.btn-secondary:hover {
  background-color: #2c3c4e;
}

.btn-success {
  background-color: var(--success-color);
}

.btn-success:hover {
  background-color: var(--success-hover);
}

.btn-danger {
  background-color: var(--danger-color);
}

.btn-danger:hover {
  background-color: var(--danger-hover);
}

.btn-outline {
  background-color: transparent;
  border: 1px solid var(--border-color);
  color: var(--text-color);
}

.btn-outline:hover {
  background-color: var(--light-color);
}

.btn-sm {
  padding: 4px 8px;
  font-size: 12px;
}

.btn-with-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  width: 100%;
}

#header-upload-btn {
  margin-right: 10px;
  padding: 5px 10px;
  font-size: 12px;
}

#header-load-btn {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 4px;
  cursor: pointer;
}

#header-load-btn:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

/* Icons */
.icon {
  width: 16px;
  height: 16px;
  stroke: currentColor;
  stroke-width: 2;
  stroke-linecap: round;
  stroke-linejoin: round;
  fill: none;
}

/* Forms */
.form-select,
.form-control {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  background-color: white;
  font-size: 13px;
  transition: var(--transition);
  color: var(--text-color);
}

.form-select:focus,
.form-control:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.form-control::placeholder {
  color: #aaa;
}

textarea.form-control {
  min-height: 80px;
  resize: vertical;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  margin-bottom: 5px;
  font-weight: 500;
  color: var(--text-color);
}

/* Dropdowns */
.dropdown-select-container {
  position: relative;
  width: 100%;
}

.dropdown-select-container::after {
  content: "▼";
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  font-size: 10px;
  color: var(--text-color);
}

.dropdown-select {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  background-color: white;
  font-size: 13px;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  cursor: pointer;
}

.dropdown-select:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.dropdown-select option {
  padding: 8px;
}

.dropdown-select[multiple] {
  height: 150px;
}

.dropdown-select[multiple] option {
  padding: 6px 8px;
}

.dropdown-select[multiple] option:checked {
  background-color: var(--accent-color);
  color: white;
}

/* Unified dropdown styles */
.dropdown-container {
  position: relative;
  width: 100%;
  user-select: none;
}

.dropdown-search {
  padding: 10px 15px;
  border-bottom: 1px solid var(--border-color);
  position: sticky;
  top: 39px;
  background-color: white;
  z-index: 2;
}

.dropdown-search input {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  font-size: 13px;
}

.dropdown-search input:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.dropdown-content {
  max-height: 300px;
  overflow-y: auto;
  padding: 5px 0;
}

.dropdown-items {
  max-height: 250px;
  overflow-y: auto;
  padding: 5px 0;
}

.dropdown-items::-webkit-scrollbar {
  width: 6px;
}

.dropdown-items::-webkit-scrollbar-track {
  background: #f8f9fa;
  border-radius: 10px;
}

.dropdown-items::-webkit-scrollbar-thumb {
  background: #ddd;
  border-radius: 10px;
}

.dropdown-items::-webkit-scrollbar-thumb:hover {
  background: #ccc;
}

.dropdown-item {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  cursor: pointer;
  transition: background-color 0.2s;
  border-left: 3px solid transparent;
}

.dropdown-item:hover {
  background-color: #f8f9fa;
}

.dropdown-item.selected {
  background-color: rgba(52, 152, 219, 0.08);
  border-left-color: var(--accent-color);
}

.dropdown-item input[type="checkbox"] {
  margin-right: 10px;
  cursor: pointer;
  width: 16px;
  height: 16px;
}

.dropdown-item .item-text {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 13px;
}

.dropdown-item .item-badge {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 24px;
  height: 24px;
  border-radius: 12px;
  background-color: var(--accent-color);
  color: white;
  font-size: 11px;
  font-weight: bold;
  margin-left: 8px;
  padding: 0 6px;
}

.dropdown-group {
  margin-bottom: 5px;
}

.dropdown-group-header {
  display: flex;
  align-items: center;
  /* justify-content: space-between; */
  padding: 8px 12px;
  cursor: pointer;
  font-weight: 600;
  color: var(--text-light);
  font-size: 12px;
  background-color: #f8f9fa;
  border-bottom: 1px solid #eee;
  transition: background-color 0.2s;
}

.dropdown-group-header:hover {
  background-color: #f1f3f5;
}

.dropdown-group-content {
  background-color: white;
  max-height: 200px;
  overflow-y: auto;
  padding-left: 20px;
}

.dropdown-group-header .toggle-icon {
  margin: 0 6px;
  font-size: 12px;
  transition: transform 0.2s;
}

.dropdown-group-header.collapsed .toggle-icon {
  transform: rotate(-90deg);
}

.dropdown-group-header.collapsed + .dropdown-group-content {
  display: none;
}

.dropdown-header {
  padding: 10px 15px;
  border-bottom: 1px solid var(--border-color);
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  background-color: white;
  z-index: 2;
}

.dropdown-title {
  font-weight: 600;
  font-size: 14px;
}

.dropdown-close {
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-light);
  font-size: 16px;
}

.dropdown-footer {
  padding: 10px 15px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-top: 1px solid var(--border-color);
  position: sticky;
  bottom: 0;
  background-color: white;
  z-index: 2;
}

.dropdown-sort-options {
  display: flex;
  padding: 5px 15px;
  border-bottom: 1px solid var(--border-color);
  position: sticky;
  top: 79px; /* Header + search heights */
  background-color: white;
  z-index: 2;
}

.dropdown-sort-option {
  display: flex;
  align-items: center;
  padding: 5px 10px;
  border-radius: var(--border-radius);
  cursor: pointer;
  font-size: 12px;
  margin-right: 8px;
}

.dropdown-sort-option:hover {
  background-color: var(--light-color);
}

.dropdown-sort-option svg {
  margin-right: 5px;
}

/* Header dropdown specific styles */
.header-dropdown-container {
  position: relative;
  display: inline-block;
}

.header-dropdown-menu {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1000;
  display: none;
  min-width: 250px;
  padding: 8px 0;
  margin: 2px 0 0;
  background-color: #fff;
  border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 4px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
}

#case-file-dropdown-btn {
  display: flex;
  align-items: center;
  gap: 8px;
}

/* Upload dropdown styles */
.upload-dropdown {
  position: relative;
  display: inline-block;
}

.upload-dropdown-btn {
  display: flex;
  align-items: center;
  gap: 6px;
  background-color: var(--accent-color);
  color: #fff;
  border: none;
  border-radius: var(--border-radius);
  padding: 7px 16px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition);
  min-width: 120px;
}

.upload-dropdown-btn:hover,
.upload-dropdown-btn.active {
  background-color: var(--accent-hover);
}

.upload-dropdown-btn .dropdown-arrow {
  font-size: 12px;
  margin-left: 4px;
}

.upload-dropdown-menu {
  position: absolute;
  top: 110%;
  left: 0;
  min-width: 125px;
  background: #fff;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.13);
  z-index: 1001;
  display: none;
  padding: 2px 0;
}

.upload-dropdown.open .upload-dropdown-menu {
  display: block;
}

.upload-dropdown-item {
  padding: 9px 18px;
  cursor: pointer;
  font-size: 13px;
  color: var(--text-color);
  background: none;
  border: none;
  width: 100%;
  text-align: left;
  transition: background 0.18s;
}

.upload-dropdown-item:hover,
.upload-dropdown-item.selected {
  background: var(--light-color);
  color: var(--accent-color);
  font-weight: 600;
}

/* Hide the default file/folder input */
#header-file-input,
#header-folder-input {
  display: none;
}

/* Tabs */
.tabs-container {
  display: flex;
  overflow-x: auto;
  background-color: var(--light-color);
  border-bottom: 1px solid var(--border-color);
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.tabs-container::-webkit-scrollbar {
  display: none;
}

.tab {
  padding: 5px;
  white-space: nowrap;
  cursor: pointer;
  border: 1px solid var(--border-color);
  transition: var(--transition);
  font-weight: 500;
  margin: 2px;
  position: relative;
}

.tab:hover {
  background-color: rgba(255, 255, 255, 0.5);
}

.tab.active {
  background-color: var(--accent-color);
  color: white;
  border-bottom: 4px solid rgb(9, 255, 0) !important;
  font-weight: bold !important;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.tab .close-icon {
  margin-left: 6px;
  opacity: 0.5;
  transition: var(--transition);
}

.tab:hover .close-icon {
  opacity: 1;
}

.subtabs-container {
  display: flex;
  overflow-x: auto;
  background-color: var(--light-color);
  border-bottom: 1px solid var(--border-color);
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.subtabs-container::-webkit-scrollbar {
  display: none;
}

.subtab {
  padding: 5px;
  white-space: nowrap;
  cursor: pointer;
  transition: var(--transition);
  font-size: 13px;
  background: #bac8ff;
  border: solid 1px, black;
  margin: 2px;
  font-weight: 600;
}

.subtab:hover {
  background-color: var(--light-color);
}

.subtab.active {
  color: rgb(255, 255, 255);
  border-bottom: 2px solid rgb(9, 255, 0);
  font-weight: 500;
  background: darkblue;
}

/* Data table */
.data-table-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  background-color: white;
  border-radius: 0 0 var(--border-radius) var(--border-radius);
  box-shadow: var(--box-shadow);
}

.toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px;
  background-color: white;
  border-bottom: 1px solid var(--border-color);
}

.toolbar-title {
  font-size: 14px;
  font-weight: 600;
}

.toolbar-actions {
  display: flex;
  gap: 10px;
  align-items: center;
}

.search-container {
  position: relative;
  min-width: 220px;
}

.search-icon {
  position: absolute;
  left: 10px;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-light);
}

.search-input {
  padding: 6px 8px 6px 30px;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  width: 100%;
  font-size: 13px;
  transition: var(--transition);
}

.search-input:focus {
  outline: none;
  border-color: var(--accent-color);
  box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
}

.table-wrapper {
  flex: 1;
  overflow: auto;
  position: relative;
}

/* File upload */
.file-upload-btn-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  margin-top: 15px;
}

.selected-files-count {
  font-size: 14px;
  color: var(--text-light);
  text-align: center;
  margin-top: 5px;
}

/* Data table styles */
#data-table {
  border-collapse: separate;
  border-spacing: 0;
}

#data-table thead {
  position: sticky;
  top: 0;
  z-index: 1;
  background-color: #f8f9fa;
}

#data-table th {
  padding: 5px;
  text-align: center;
  font-weight: 600;
  /* border: 1px solid var(--border-color); */
  white-space: nowrap;
  position: relative;
  transition: background-color var(--transition);
}

#data-table th:hover {
  background-color: var(--light-color);
}

#data-table th .resize-handle {
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  width: 5px;
  cursor: col-resize;
}

#data-table th .resize-handle:hover {
  background-color: var(--accent-color);
}

#data-table th .column-header {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 6px;
  cursor: pointer;
}

#data-table th .sort-icon {
  opacity: 0.5;
  transition: opacity var(--transition);
}

#data-table th.sorted .sort-icon {
  opacity: 1;
}

#data-table td {
  padding: 5px 15px;
  border: 1px solid var(--border-color);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: background-color var(--transition);
}

#data-table tr:nth-child(even) {
  background-color: rgba(0, 0, 0, 0.02);
}

#data-table tr:hover td {
  background-color: #f1f3f9;
}

.selected-cell {
  background-color: rgba(52, 152, 219, 0.15) !important;
}

.multi-selected {
  background-color: rgba(52, 152, 219, 0.3) !important;
}

/* Column dropdown */
.column-dropdown {
  position: absolute;
  top: 100%;
  left: 0;
  min-width: 280px;
  max-width: 350px;
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  display: none;
  overflow: hidden;
}

.column-dropdown.show {
  display: block;
}

.column-visibility-menu {
  position: absolute;
  top: 50px;
  right: 20px;
  min-width: 200px;
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  z-index: 1000;
  display: none;
}

.column-visibility-menu.show {
  display: block;
}

/* Loading and messages */
.loading-indicator {
  text-align: center;
  padding: 15px;
  color: var(--text-light);
  font-size: 14px;
  display: none;
}

.loading-indicator.show {
  display: block;
}

.no-data-message {
  text-align: center;
  padding: 30px;
  color: var(--text-light);
  font-size: 15px;
}

/* Context menu */
.context-menu {
  position: absolute;
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  padding: 5px 0;
  z-index: 1000;
  min-width: 160px;
}

.context-menu-item {
  padding: 8px 15px;
  cursor: pointer;
  font-size: 13px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.context-menu-item:hover {
  background-color: var(--light-color);
}

/* Copy selection button */
.copy-selection-btn {
  position: absolute;
  background-color: white;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  width: 26px;
  height: 26px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  z-index: 5;
  transition: var(--transition);
}

.copy-selection-btn:hover {
  background-color: var(--light-color);
}

/* Radio and checkboxes */
.option-buttons {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

.option-button {
  flex: 1;
  display: flex;
  align-items: center;
  padding: 10px 15px;
  background-color: white;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: var(--transition);
}

.option-button:hover {
  background-color: var(--light-color);
}

.option-button input[type="radio"] {
  margin-right: 8px;
}

.option-button input[type="radio"]:checked + span {
  font-weight: 500;
  color: var(--accent-color);
}

.option-button:has(input[type="radio"]:checked) {
  border-color: var(--accent-color);
  background-color: rgba(52, 152, 219, 0.05);
}

.radio-options {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.radio-option {
  display: flex;
  align-items: center;
  padding: 8px 12px;
  background-color: white;
  border: 1px solid var(--border-color);
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: var(--transition);
}

.radio-option:hover {
  background-color: var(--light-color);
}

.radio-option input[type="radio"] {
  margin-right: 8px;
}

.radio-option input[type="radio"]:checked + span {
  font-weight: 500;
  color: var(--accent-color);
}

.radio-option:has(input[type="radio"]:checked) {
  border-color: var(--accent-color);
  background-color: rgba(52, 152, 219, 0.05);
}

/* Checkboxes */
.checkbox-container {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

.checkbox-label {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.select-all-option {
  padding: 8px 12px;
  border-bottom: 1px solid #eee;
  background-color: #f8f9fa;
  font-weight: 600;
  font-size: 13px;
  display: flex;
  align-items: center;
  color: black;
}

.select-all-option input[type="checkbox"] {
  margin-right: 10px;
  cursor: pointer;
  width: 16px;
  height: 16px;
}

.select-all-files-option {
  padding: 8px;
  margin-bottom: 12px;
  background-color: var(--light-color);
  border-radius: var(--border-radius);
}

/* Toast notifications */
.toast-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 1001;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.toast {
  background-color: var(--secondary-color);
  color: white;
  padding: 10px 15px;
  border-radius: var(--border-radius);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
  font-size: 13px;
  opacity: 0;
  transform: translateX(50px);
  transition: opacity 0.3s, transform 0.3s;
}

.toast.show {
  opacity: 1;
  transform: translateX(0);
}

.toast-success {
  background-color: var(--success-color);
}

.toast-error {
  background-color: var(--danger-color);
}

.toast-warning {
  background-color: var(--warning-color);
}

/* Overlay and dialog */
.overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s, visibility 0.3s;
}

.overlay.active {
  opacity: 1;
  visibility: visible;
}

.dialog {
  background-color: white;
  border-radius: var(--border-radius);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  width: 100%;
  max-width: 500px;
  max-height: 90vh;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.manager-dialog {
  max-width: 800px;
}

.dialog-header {
  padding: 15px 20px;
  background-color: var(--secondary-color);
  color: white;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.dialog-title {
  font-size: 16px;
  font-weight: 500;
}

.dialog-close {
  background: none;
  border: none;
  color: white;
  font-size: 24px;
  cursor: pointer;
  padding: 0;
  line-height: 1;
}

.dialog-body {
  padding: 20px;
  overflow-y: auto;
  min-height: 500px;
}

.dialog-footer {
  padding: 15px 20px;
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  border-top: 1px solid var(--border-color);
}

/* Manager table */
.manager-table {
  width: 100%;
  border-collapse: collapse;
}

.manager-table th {
  padding: 10px;
  text-align: left;
  font-weight: 600;
  border-bottom: 2px solid var(--border-color);
  background-color: #f8f9fa;
}

.manager-table td {
  padding: 8px 10px;
  border-bottom: 1px solid var(--border-color);
}

.manager-table tr:hover td {
  background-color: #f5f5f5;
}

zip.min.js:
( (e, t) => {
    "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).zip = {})
}
)(this, (function(e) {
    "use strict";
    const {Array: t, Object: n, String: r, Number: s, BigInt: i, Math: a, Date: o, Map: c, Set: l, Response: u, URL: f, Error: d, Uint8Array: w, Uint16Array: p, Uint32Array: h, DataView: g, Blob: m, Promise: y, TextEncoder: b, TextDecoder: S, document: k, crypto: z, btoa: v, TransformStream: x, ReadableStream: A, WritableStream: C, CompressionStream: _, DecompressionStream: D, navigator: F, Worker: R} = "undefined" != typeof globalThis ? globalThis : this || self;
    var W = void 0 !== k ? k.currentScript : null;
    const E = 4294967295
      , T = 65535
      , L = 67324752
      , U = 134695760
      , I = U
      , N = 33639248
      , q = 101010256
      , O = 101075792
      , P = 117853008
      , H = 22
      , M = 21589
      , B = 2048
      , V = "/"
      , Z = new o(2107,11,31)
      , K = new o(1980,0,1)
      , G = void 0
      , X = "undefined"
      , Y = "function";
    class j {
        constructor(e) {
            return class extends x {
                constructor(t, n) {
                    const r = new e(n);
                    super({
                        transform(e, t) {
                            t.enqueue(r.append(e))
                        },
                        flush(e) {
                            const t = r.flush();
                            t && e.enqueue(t)
                        }
                    })
                }
            }
        }
    }
    let J = 2;
    try {
        typeof F != X && F.hardwareConcurrency && (J = F.hardwareConcurrency)
    } catch (e) {}
    const Q = {
        chunkSize: 524288,
        maxWorkers: J,
        terminateWorkerTimeout: 5e3,
        useWebWorkers: !0,
        useCompressionStream: !0,
        workerScripts: G,
        CompressionStreamNative: typeof _ != X && _,
        DecompressionStreamNative: typeof D != X && D
    }
      , $ = n.assign({}, Q);
    function ee() {
        return $
    }
    function te(e) {
        return a.max(e.chunkSize, 64)
    }
    function ne(e) {
        const {baseURL: n, chunkSize: r, maxWorkers: s, terminateWorkerTimeout: i, useCompressionStream: a, useWebWorkers: o, Deflate: c, Inflate: l, CompressionStream: u, DecompressionStream: f, workerScripts: w} = e;
        if (re("baseURL", n),
        re("chunkSize", r),
        re("maxWorkers", s),
        re("terminateWorkerTimeout", i),
        re("useCompressionStream", a),
        re("useWebWorkers", o),
        c && ($.CompressionStream = new j(c)),
        l && ($.DecompressionStream = new j(l)),
        re("CompressionStream", u),
        re("DecompressionStream", f),
        w !== G) {
            const {deflate: e, inflate: n} = w;
            if ((e || n) && ($.workerScripts || ($.workerScripts = {})),
            e) {
                if (!t.isArray(e))
                    throw new d("workerScripts.deflate must be an array");
                $.workerScripts.deflate = e
            }
            if (n) {
                if (!t.isArray(n))
                    throw new d("workerScripts.inflate must be an array");
                $.workerScripts.inflate = n
            }
        }
    }
    function re(e, t) {
        t !== G && ($[e] = t)
    }
    function se(e, t, r) {
        return class {
            constructor(s) {
                const i = this;
                var a, o;
                a = s,
                o = "level",
                (typeof n.hasOwn === Y ? n.hasOwn(a, o) : a.hasOwnProperty(o)) && s.level === G && delete s.level,
                i.codec = new e(n.assign({}, t, s)),
                r(i.codec, (e => {
                    if (i.pendingData) {
                        const t = i.pendingData;
                        i.pendingData = new w(t.length + e.length);
                        const {pendingData: n} = i;
                        n.set(t, 0),
                        n.set(e, t.length)
                    } else
                        i.pendingData = new w(e)
                }
                ))
            }
            append(e) {
                return this.codec.push(e),
                s(this)
            }
            flush() {
                return this.codec.push(new w, !0),
                s(this)
            }
        }
        ;
        function s(e) {
            if (e.pendingData) {
                const t = e.pendingData;
                return e.pendingData = null,
                t
            }
            return new w
        }
    }
    const ie = [];
    for (let e = 0; 256 > e; e++) {
        let t = e;
        for (let e = 0; 8 > e; e++)
            1 & t ? t = t >>> 1 ^ 3988292384 : t >>>= 1;
        ie[e] = t
    }
    class ae {
        constructor(e) {
            this.crc = e || -1
        }
        append(e) {
            let t = 0 | this.crc;
            for (let n = 0, r = 0 | e.length; r > n; n++)
                t = t >>> 8 ^ ie[255 & (t ^ e[n])];
            this.crc = t
        }
        get() {
            return ~this.crc
        }
    }
    class oe extends x {
        constructor() {
            let e;
            const t = new ae;
            super({
                transform(e, n) {
                    t.append(e),
                    n.enqueue(e)
                },
                flush() {
                    const n = new w(4);
                    new g(n.buffer).setUint32(0, t.get()),
                    e.value = n
                }
            }),
            e = this
        }
    }
    function ce(e) {
        if (typeof b == X) {
            const t = new w((e = unescape(encodeURIComponent(e))).length);
            for (let n = 0; n < t.length; n++)
                t[n] = e.charCodeAt(n);
            return t
        }
        return (new b).encode(e)
    }
    const le = {
        concat(e, t) {
            if (0 === e.length || 0 === t.length)
                return e.concat(t);
            const n = e[e.length - 1]
              , r = le.getPartial(n);
            return 32 === r ? e.concat(t) : le._shiftRight(t, r, 0 | n, e.slice(0, e.length - 1))
        },
        bitLength(e) {
            const t = e.length;
            if (0 === t)
                return 0;
            const n = e[t - 1];
            return 32 * (t - 1) + le.getPartial(n)
        },
        clamp(e, t) {
            if (32 * e.length < t)
                return e;
            const n = (e = e.slice(0, a.ceil(t / 32))).length;
            return t &= 31,
            n > 0 && t && (e[n - 1] = le.partial(t, e[n - 1] & 2147483648 >> t - 1, 1)),
            e
        },
        partial: (e, t, n) => 32 === e ? t : (n ? 0 | t : t << 32 - e) + 1099511627776 * e,
        getPartial: e => a.round(e / 1099511627776) || 32,
        _shiftRight(e, t, n, r) {
            for (void 0 === r && (r = []); t >= 32; t -= 32)
                r.push(n),
                n = 0;
            if (0 === t)
                return r.concat(e);
            for (let s = 0; s < e.length; s++)
                r.push(n | e[s] >>> t),
                n = e[s] << 32 - t;
            const s = e.length ? e[e.length - 1] : 0
              , i = le.getPartial(s);
            return r.push(le.partial(t + i & 31, t + i > 32 ? n : r.pop(), 1)),
            r
        }
    }
      , ue = {
        bytes: {
            fromBits(e) {
                const t = le.bitLength(e) / 8
                  , n = new w(t);
                let r;
                for (let s = 0; t > s; s++)
                    3 & s || (r = e[s / 4]),
                    n[s] = r >>> 24,
                    r <<= 8;
                return n
            },
            toBits(e) {
                const t = [];
                let n, r = 0;
                for (n = 0; n < e.length; n++)
                    r = r << 8 | e[n],
                    3 & ~n || (t.push(r),
                    r = 0);
                return 3 & n && t.push(le.partial(8 * (3 & n), r)),
                t
            }
        }
    }
      , fe = class {
        constructor(e) {
            const t = this;
            t.blockSize = 512,
            t._init = [1732584193, 4023233417, 2562383102, 271733878, 3285377520],
            t._key = [1518500249, 1859775393, 2400959708, 3395469782],
            e ? (t._h = e._h.slice(0),
            t._buffer = e._buffer.slice(0),
            t._length = e._length) : t.reset()
        }
        reset() {
            const e = this;
            return e._h = e._init.slice(0),
            e._buffer = [],
            e._length = 0,
            e
        }
        update(e) {
            const t = this;
            "string" == typeof e && (e = ue.utf8String.toBits(e));
            const n = t._buffer = le.concat(t._buffer, e)
              , r = t._length
              , s = t._length = r + le.bitLength(e);
            if (s > 9007199254740991)
                throw new d("Cannot hash more than 2^53 - 1 bits");
            const i = new h(n);
            let a = 0;
            for (let e = t.blockSize + r - (t.blockSize + r & t.blockSize - 1); s >= e; e += t.blockSize)
                t._block(i.subarray(16 * a, 16 * (a + 1))),
                a += 1;
            return n.splice(0, 16 * a),
            t
        }
        finalize() {
            const e = this;
            let t = e._buffer;
            const n = e._h;
            t = le.concat(t, [le.partial(1, 1)]);
            for (let e = t.length + 2; 15 & e; e++)
                t.push(0);
            for (t.push(a.floor(e._length / 4294967296)),
            t.push(0 | e._length); t.length; )
                e._block(t.splice(0, 16));
            return e.reset(),
            n
        }
        _f(e, t, n, r) {
            return e > 19 ? e > 39 ? e > 59 ? e > 79 ? void 0 : t ^ n ^ r : t & n | t & r | n & r : t ^ n ^ r : t & n | ~t & r
        }
        _S(e, t) {
            return t << e | t >>> 32 - e
        }
        _block(e) {
            const n = this
              , r = n._h
              , s = t(80);
            for (let t = 0; 16 > t; t++)
                s[t] = e[t];
            let i = r[0]
              , o = r[1]
              , c = r[2]
              , l = r[3]
              , u = r[4];
            for (let e = 0; 79 >= e; e++) {
                16 > e || (s[e] = n._S(1, s[e - 3] ^ s[e - 8] ^ s[e - 14] ^ s[e - 16]));
                const t = n._S(5, i) + n._f(e, o, c, l) + u + s[e] + n._key[a.floor(e / 20)] | 0;
                u = l,
                l = c,
                c = n._S(30, o),
                o = i,
                i = t
            }
            r[0] = r[0] + i | 0,
            r[1] = r[1] + o | 0,
            r[2] = r[2] + c | 0,
            r[3] = r[3] + l | 0,
            r[4] = r[4] + u | 0
        }
    }
      , de = {
        getRandomValues(e) {
            const t = new h(e.buffer)
              , n = e => {
                let t = 987654321;
                const n = 4294967295;
                return () => (t = 36969 * (65535 & t) + (t >> 16) & n,
                (((t << 16) + (e = 18e3 * (65535 & e) + (e >> 16) & n) & n) / 4294967296 + .5) * (a.random() > .5 ? 1 : -1))
            }
            ;
            for (let r, s = 0; s < e.length; s += 4) {
                const e = n(4294967296 * (r || a.random()));
                r = 987654071 * e(),
                t[s / 4] = 4294967296 * e() | 0
            }
            return e
        }
    }
      , we = {
        importKey: e => new we.hmacSha1(ue.bytes.toBits(e)),
        pbkdf2(e, t, n, r) {
            if (n = n || 1e4,
            0 > r || 0 > n)
                throw new d("invalid params to pbkdf2");
            const s = 1 + (r >> 5) << 2;
            let i, a, o, c, l;
            const u = new ArrayBuffer(s)
              , f = new g(u);
            let w = 0;
            const p = le;
            for (t = ue.bytes.toBits(t),
            l = 1; (s || 1) > w; l++) {
                for (i = a = e.encrypt(p.concat(t, [l])),
                o = 1; n > o; o++)
                    for (a = e.encrypt(a),
                    c = 0; c < a.length; c++)
                        i[c] ^= a[c];
                for (o = 0; (s || 1) > w && o < i.length; o++)
                    f.setInt32(w, i[o]),
                    w += 4
            }
            return u.slice(0, r / 8)
        },
        hmacSha1: class {
            constructor(e) {
                const t = this
                  , n = t._hash = fe
                  , r = [[], []];
                t._baseHash = [new n, new n];
                const s = t._baseHash[0].blockSize / 32;
                e.length > s && (e = (new n).update(e).finalize());
                for (let t = 0; s > t; t++)
                    r[0][t] = 909522486 ^ e[t],
                    r[1][t] = 1549556828 ^ e[t];
                t._baseHash[0].update(r[0]),
                t._baseHash[1].update(r[1]),
                t._resultHash = new n(t._baseHash[0])
            }
            reset() {
                const e = this;
                e._resultHash = new e._hash(e._baseHash[0]),
                e._updated = !1
            }
            update(e) {
                this._updated = !0,
                this._resultHash.update(e)
            }
            digest() {
                const e = this
                  , t = e._resultHash.finalize()
                  , n = new e._hash(e._baseHash[1]).update(t).finalize();
                return e.reset(),
                n
            }
            encrypt(e) {
                if (this._updated)
                    throw new d("encrypt on already updated hmac called!");
                return this.update(e),
                this.digest(e)
            }
        }
    }
      , pe = typeof z != X && typeof z.getRandomValues == Y
      , he = "Invalid password"
      , ge = "Invalid signature"
      , me = "zipjs-abort-check-password";
    function ye(e) {
        return pe ? z.getRandomValues(e) : de.getRandomValues(e)
    }
    const be = 16
      , Se = {
        name: "PBKDF2"
    }
      , ke = n.assign({
        hash: {
            name: "HMAC"
        }
    }, Se)
      , ze = n.assign({
        iterations: 1e3,
        hash: {
            name: "SHA-1"
        }
    }, Se)
      , ve = ["deriveBits"]
      , xe = [8, 12, 16]
      , Ae = [16, 24, 32]
      , Ce = 10
      , _e = [0, 0, 0, 0]
      , De = typeof z != X
      , Fe = De && z.subtle
      , Re = De && typeof Fe != X
      , We = ue.bytes
      , Ee = class {
        constructor(e) {
            const t = this;
            t._tables = [[[], [], [], [], []], [[], [], [], [], []]],
            t._tables[0][0][0] || t._precompute();
            const n = t._tables[0][4]
              , r = t._tables[1]
              , s = e.length;
            let i, a, o, c = 1;
            if (4 !== s && 6 !== s && 8 !== s)
                throw new d("invalid aes key size");
            for (t._key = [a = e.slice(0), o = []],
            i = s; 4 * s + 28 > i; i++) {
                let e = a[i - 1];
                (i % s === 0 || 8 === s && i % s === 4) && (e = n[e >>> 24] << 24 ^ n[e >> 16 & 255] << 16 ^ n[e >> 8 & 255] << 8 ^ n[255 & e],
                i % s === 0 && (e = e << 8 ^ e >>> 24 ^ c << 24,
                c = c << 1 ^ 283 * (c >> 7))),
                a[i] = a[i - s] ^ e
            }
            for (let e = 0; i; e++,
            i--) {
                const t = a[3 & e ? i : i - 4];
                o[e] = 4 >= i || 4 > e ? t : r[0][n[t >>> 24]] ^ r[1][n[t >> 16 & 255]] ^ r[2][n[t >> 8 & 255]] ^ r[3][n[255 & t]]
            }
        }
        encrypt(e) {
            return this._crypt(e, 0)
        }
        decrypt(e) {
            return this._crypt(e, 1)
        }
        _precompute() {
            const e = this._tables[0]
              , t = this._tables[1]
              , n = e[4]
              , r = t[4]
              , s = []
              , i = [];
            let a, o, c, l;
            for (let e = 0; 256 > e; e++)
                i[(s[e] = e << 1 ^ 283 * (e >> 7)) ^ e] = e;
            for (let u = a = 0; !n[u]; u ^= o || 1,
            a = i[a] || 1) {
                let i = a ^ a << 1 ^ a << 2 ^ a << 3 ^ a << 4;
                i = i >> 8 ^ 255 & i ^ 99,
                n[u] = i,
                r[i] = u,
                l = s[c = s[o = s[u]]];
                let f = 16843009 * l ^ 65537 * c ^ 257 * o ^ 16843008 * u
                  , d = 257 * s[i] ^ 16843008 * i;
                for (let n = 0; 4 > n; n++)
                    e[n][u] = d = d << 24 ^ d >>> 8,
                    t[n][i] = f = f << 24 ^ f >>> 8
            }
            for (let n = 0; 5 > n; n++)
                e[n] = e[n].slice(0),
                t[n] = t[n].slice(0)
        }
        _crypt(e, t) {
            if (4 !== e.length)
                throw new d("invalid aes block size");
            const n = this._key[t]
              , r = n.length / 4 - 2
              , s = [0, 0, 0, 0]
              , i = this._tables[t]
              , a = i[0]
              , o = i[1]
              , c = i[2]
              , l = i[3]
              , u = i[4];
            let f, w, p, h = e[0] ^ n[0], g = e[t ? 3 : 1] ^ n[1], m = e[2] ^ n[2], y = e[t ? 1 : 3] ^ n[3], b = 4;
            for (let e = 0; r > e; e++)
                f = a[h >>> 24] ^ o[g >> 16 & 255] ^ c[m >> 8 & 255] ^ l[255 & y] ^ n[b],
                w = a[g >>> 24] ^ o[m >> 16 & 255] ^ c[y >> 8 & 255] ^ l[255 & h] ^ n[b + 1],
                p = a[m >>> 24] ^ o[y >> 16 & 255] ^ c[h >> 8 & 255] ^ l[255 & g] ^ n[b + 2],
                y = a[y >>> 24] ^ o[h >> 16 & 255] ^ c[g >> 8 & 255] ^ l[255 & m] ^ n[b + 3],
                b += 4,
                h = f,
                g = w,
                m = p;
            for (let e = 0; 4 > e; e++)
                s[t ? 3 & -e : e] = u[h >>> 24] << 24 ^ u[g >> 16 & 255] << 16 ^ u[m >> 8 & 255] << 8 ^ u[255 & y] ^ n[b++],
                f = h,
                h = g,
                g = m,
                m = y,
                y = f;
            return s
        }
    }
      , Te = class {
        constructor(e, t) {
            this._prf = e,
            this._initIv = t,
            this._iv = t
        }
        reset() {
            this._iv = this._initIv
        }
        update(e) {
            return this.calculate(this._prf, e, this._iv)
        }
        incWord(e) {
            if (255 & ~(e >> 24))
                e += 1 << 24;
            else {
                let t = e >> 16 & 255
                  , n = e >> 8 & 255
                  , r = 255 & e;
                255 === t ? (t = 0,
                255 === n ? (n = 0,
                255 === r ? r = 0 : ++r) : ++n) : ++t,
                e = 0,
                e += t << 16,
                e += n << 8,
                e += r
            }
            return e
        }
        incCounter(e) {
            0 === (e[0] = this.incWord(e[0])) && (e[1] = this.incWord(e[1]))
        }
        calculate(e, t, n) {
            let r;
            if (!(r = t.length))
                return [];
            const s = le.bitLength(t);
            for (let s = 0; r > s; s += 4) {
                this.incCounter(n);
                const r = e.encrypt(n);
                t[s] ^= r[0],
                t[s + 1] ^= r[1],
                t[s + 2] ^= r[2],
                t[s + 3] ^= r[3]
            }
            return le.clamp(t, s)
        }
    }
      , Le = we.hmacSha1;
    let Ue = De && Re && typeof Fe.importKey == Y
      , Ie = De && Re && typeof Fe.deriveBits == Y;
    class Ne extends x {
        constructor({password: e, rawPassword: t, signed: r, encryptionStrength: s, checkPasswordOnly: i}) {
            super({
                start() {
                    n.assign(this, {
                        ready: new y((e => this.resolveReady = e)),
                        password: He(e, t),
                        signed: r,
                        strength: s - 1,
                        pending: new w
                    })
                },
                async transform(e, t) {
                    const n = this
                      , {password: r, strength: s, resolveReady: a, ready: o} = n;
                    r ? (await (async (e, t, n, r) => {
                        const s = await Pe(e, t, n, Be(r, 0, xe[t]))
                          , i = Be(r, xe[t]);
                        if (s[0] != i[0] || s[1] != i[1])
                            throw new d(he)
                    }
                    )(n, s, r, Be(e, 0, xe[s] + 2)),
                    e = Be(e, xe[s] + 2),
                    i ? t.error(new d(me)) : a()) : await o;
                    const c = new w(e.length - Ce - (e.length - Ce) % be);
                    t.enqueue(Oe(n, e, c, 0, Ce, !0))
                },
                async flush(e) {
                    const {signed: t, ctr: n, hmac: r, pending: s, ready: i} = this;
                    if (r && n) {
                        await i;
                        const a = Be(s, 0, s.length - Ce)
                          , o = Be(s, s.length - Ce);
                        let c = new w;
                        if (a.length) {
                            const e = Ze(We, a);
                            r.update(e);
                            const t = n.update(e);
                            c = Ve(We, t)
                        }
                        if (t) {
                            const e = Be(Ve(We, r.digest()), 0, Ce);
                            for (let t = 0; Ce > t; t++)
                                if (e[t] != o[t])
                                    throw new d(ge)
                        }
                        e.enqueue(c)
                    }
                }
            })
        }
    }
    class qe extends x {
        constructor({password: e, rawPassword: t, encryptionStrength: r}) {
            let s;
            super({
                start() {
                    n.assign(this, {
                        ready: new y((e => this.resolveReady = e)),
                        password: He(e, t),
                        strength: r - 1,
                        pending: new w
                    })
                },
                async transform(e, t) {
                    const n = this
                      , {password: r, strength: s, resolveReady: i, ready: a} = n;
                    let o = new w;
                    r ? (o = await (async (e, t, n) => {
                        const r = ye(new w(xe[t]));
                        return Me(r, await Pe(e, t, n, r))
                    }
                    )(n, s, r),
                    i()) : await a;
                    const c = new w(o.length + e.length - e.length % be);
                    c.set(o, 0),
                    t.enqueue(Oe(n, e, c, o.length, 0))
                },
                async flush(e) {
                    const {ctr: t, hmac: n, pending: r, ready: i} = this;
                    if (n && t) {
                        await i;
                        let a = new w;
                        if (r.length) {
                            const e = t.update(Ze(We, r));
                            n.update(e),
                            a = Ve(We, e)
                        }
                        s.signature = Ve(We, n.digest()).slice(0, Ce),
                        e.enqueue(Me(a, s.signature))
                    }
                }
            }),
            s = this
        }
    }
    function Oe(e, t, n, r, s, i) {
        const {ctr: a, hmac: o, pending: c} = e
          , l = t.length - s;
        let u;
        for (c.length && (t = Me(c, t),
        n = ( (e, t) => {
            if (t && t > e.length) {
                const n = e;
                (e = new w(t)).set(n, 0)
            }
            return e
        }
        )(n, l - l % be)),
        u = 0; l - be >= u; u += be) {
            const e = Ze(We, Be(t, u, u + be));
            i && o.update(e);
            const s = a.update(e);
            i || o.update(s),
            n.set(Ve(We, s), u + r)
        }
        return e.pending = Be(t, u),
        n
    }
    async function Pe(e, r, s, i) {
        e.password = null;
        const a = await (async (e, t, n, r, s) => {
            if (!Ue)
                return we.importKey(t);
            try {
                return await Fe.importKey("raw", t, n, !1, s)
            } catch (e) {
                return Ue = !1,
                we.importKey(t)
            }
        }
        )(0, s, ke, 0, ve)
          , o = await (async (e, t, n) => {
            if (!Ie)
                return we.pbkdf2(t, e.salt, ze.iterations, n);
            try {
                return await Fe.deriveBits(e, t, n)
            } catch (r) {
                return Ie = !1,
                we.pbkdf2(t, e.salt, ze.iterations, n)
            }
        }
        )(n.assign({
            salt: i
        }, ze), a, 8 * (2 * Ae[r] + 2))
          , c = new w(o)
          , l = Ze(We, Be(c, 0, Ae[r]))
          , u = Ze(We, Be(c, Ae[r], 2 * Ae[r]))
          , f = Be(c, 2 * Ae[r]);
        return n.assign(e, {
            keys: {
                key: l,
                authentication: u,
                passwordVerification: f
            },
            ctr: new Te(new Ee(l),t.from(_e)),
            hmac: new Le(u)
        }),
        f
    }
    function He(e, t) {
        return t === G ? ce(e) : t
    }
    function Me(e, t) {
        let n = e;
        return e.length + t.length && (n = new w(e.length + t.length),
        n.set(e, 0),
        n.set(t, e.length)),
        n
    }
    function Be(e, t, n) {
        return e.subarray(t, n)
    }
    function Ve(e, t) {
        return e.fromBits(t)
    }
    function Ze(e, t) {
        return e.toBits(t)
    }
    class Ke extends x {
        constructor({password: e, passwordVerification: t, checkPasswordOnly: r}) {
            super({
                start() {
                    n.assign(this, {
                        password: e,
                        passwordVerification: t
                    }),
                    je(this, e)
                },
                transform(e, t) {
                    const n = this;
                    if (n.password) {
                        const t = Xe(n, e.subarray(0, 12));
                        if (n.password = null,
                        t[11] != n.passwordVerification)
                            throw new d(he);
                        e = e.subarray(12)
                    }
                    r ? t.error(new d(me)) : t.enqueue(Xe(n, e))
                }
            })
        }
    }
    class Ge extends x {
        constructor({password: e, passwordVerification: t}) {
            super({
                start() {
                    n.assign(this, {
                        password: e,
                        passwordVerification: t
                    }),
                    je(this, e)
                },
                transform(e, t) {
                    const n = this;
                    let r, s;
                    if (n.password) {
                        n.password = null;
                        const t = ye(new w(12));
                        t[11] = n.passwordVerification,
                        r = new w(e.length + t.length),
                        r.set(Ye(n, t), 0),
                        s = 12
                    } else
                        r = new w(e.length),
                        s = 0;
                    r.set(Ye(n, e), s),
                    t.enqueue(r)
                }
            })
        }
    }
    function Xe(e, t) {
        const n = new w(t.length);
        for (let r = 0; r < t.length; r++)
            n[r] = Qe(e) ^ t[r],
            Je(e, n[r]);
        return n
    }
    function Ye(e, t) {
        const n = new w(t.length);
        for (let r = 0; r < t.length; r++)
            n[r] = Qe(e) ^ t[r],
            Je(e, t[r]);
        return n
    }
    function je(e, t) {
        const r = [305419896, 591751049, 878082192];
        n.assign(e, {
            keys: r,
            crcKey0: new ae(r[0]),
            crcKey2: new ae(r[2])
        });
        for (let n = 0; n < t.length; n++)
            Je(e, t.charCodeAt(n))
    }
    function Je(e, t) {
        let[n,r,s] = e.keys;
        e.crcKey0.append([t]),
        n = ~e.crcKey0.get(),
        r = et(a.imul(et(r + $e(n)), 134775813) + 1),
        e.crcKey2.append([r >>> 24]),
        s = ~e.crcKey2.get(),
        e.keys = [n, r, s]
    }
    function Qe(e) {
        const t = 2 | e.keys[2];
        return $e(a.imul(t, 1 ^ t) >>> 8)
    }
    function $e(e) {
        return 255 & e
    }
    function et(e) {
        return 4294967295 & e
    }
    const tt = "deflate-raw";
    class nt extends x {
        constructor(e, {chunkSize: t, CompressionStream: n, CompressionStreamNative: r}) {
            super({});
            const {compressed: s, encrypted: i, useCompressionStream: a, zipCrypto: o, signed: c, level: l} = e
              , u = this;
            let f, d, w = st(super.readable);
            i && !o || !c || (f = new oe,
            w = ot(w, f)),
            s && (w = at(w, a, {
                level: l,
                chunkSize: t
            }, r, n)),
            i && (o ? w = ot(w, new Ge(e)) : (d = new qe(e),
            w = ot(w, d))),
            it(u, w, ( () => {
                let e;
                i && !o && (e = d.signature),
                i && !o || !c || (e = new g(f.value.buffer).getUint32(0)),
                u.signature = e
            }
            ))
        }
    }
    class rt extends x {
        constructor(e, {chunkSize: t, DecompressionStream: n, DecompressionStreamNative: r}) {
            super({});
            const {zipCrypto: s, encrypted: i, signed: a, signature: o, compressed: c, useCompressionStream: l} = e;
            let u, f, w = st(super.readable);
            i && (s ? w = ot(w, new Ke(e)) : (f = new Ne(e),
            w = ot(w, f))),
            c && (w = at(w, l, {
                chunkSize: t
            }, r, n)),
            i && !s || !a || (u = new oe,
            w = ot(w, u)),
            it(this, w, ( () => {
                if ((!i || s) && a) {
                    const e = new g(u.value.buffer);
                    if (o != e.getUint32(0, !1))
                        throw new d(ge)
                }
            }
            ))
        }
    }
    function st(e) {
        return ot(e, new x({
            transform(e, t) {
                e && e.length && t.enqueue(e)
            }
        }))
    }
    function it(e, t, r) {
        t = ot(t, new x({
            flush: r
        })),
        n.defineProperty(e, "readable", {
            get: () => t
        })
    }
    function at(e, t, n, r, s) {
        try {
            e = ot(e, new (t && r ? r : s)(tt,n))
        } catch (r) {
            if (!t)
                return e;
            try {
                e = ot(e, new s(tt,n))
            } catch (t) {
                return e
            }
        }
        return e
    }
    function ot(e, t) {
        return e.pipeThrough(t)
    }
    const ct = "data"
      , lt = "close"
      , ut = "deflate"
      , ft = "inflate";
    class dt extends x {
        constructor(e, t) {
            super({});
            const r = this
              , {codecType: s} = e;
            let i;
            s.startsWith(ut) ? i = nt : s.startsWith(ft) && (i = rt);
            let a = 0
              , o = 0;
            const c = new i(e,t)
              , l = super.readable
              , u = new x({
                transform(e, t) {
                    e && e.length && (o += e.length,
                    t.enqueue(e))
                },
                flush() {
                    n.assign(r, {
                        inputSize: o
                    })
                }
            })
              , f = new x({
                transform(e, t) {
                    e && e.length && (a += e.length,
                    t.enqueue(e))
                },
                flush() {
                    const {signature: e} = c;
                    n.assign(r, {
                        signature: e,
                        outputSize: a,
                        inputSize: o
                    })
                }
            });
            n.defineProperty(r, "readable", {
                get: () => l.pipeThrough(u).pipeThrough(c).pipeThrough(f)
            })
        }
    }
    class wt extends x {
        constructor(e) {
            let t;
            super({
                transform: function n(r, s) {
                    if (t) {
                        const e = new w(t.length + r.length);
                        e.set(t),
                        e.set(r, t.length),
                        r = e,
                        t = null
                    }
                    r.length > e ? (s.enqueue(r.slice(0, e)),
                    n(r.slice(e), s)) : t = r
                },
                flush(e) {
                    t && t.length && e.enqueue(t)
                }
            })
        }
    }
    let pt = typeof R != X;
    class ht {
        constructor(e, {readable: t, writable: r}, {options: s, config: i, streamOptions: a, useWebWorkers: o, transferStreams: c, scripts: l}, u) {
            const {signal: f} = a;
            return n.assign(e, {
                busy: !0,
                readable: t.pipeThrough(new wt(i.chunkSize)).pipeThrough(new gt(t,a), {
                    signal: f
                }),
                writable: r,
                options: n.assign({}, s),
                scripts: l,
                transferStreams: c,
                terminate: () => new y((t => {
                    const {worker: n, busy: r} = e;
                    n ? (r ? e.resolveTerminated = t : (n.terminate(),
                    t()),
                    e.interface = null) : t()
                }
                )),
                onTaskFinished() {
                    const {resolveTerminated: t} = e;
                    t && (e.resolveTerminated = null,
                    e.terminated = !0,
                    e.worker.terminate(),
                    t()),
                    e.busy = !1,
                    u(e)
                }
            }),
            (o && pt ? bt : yt)(e, i)
        }
    }
    class gt extends x {
        constructor(e, {onstart: t, onprogress: n, size: r, onend: s}) {
            let i = 0;
            super({
                async start() {
                    t && await mt(t, r)
                },
                async transform(e, t) {
                    i += e.length,
                    n && await mt(n, i, r),
                    t.enqueue(e)
                },
                async flush() {
                    e.size = i,
                    s && await mt(s, i)
                }
            })
        }
    }
    async function mt(e, ...t) {
        try {
            await e(...t)
        } catch (e) {}
    }
    function yt(e, t) {
        return {
            run: () => (async ({options: e, readable: t, writable: n, onTaskFinished: r}, s) => {
                try {
                    const r = new dt(e,s);
                    await t.pipeThrough(r).pipeTo(n, {
                        preventClose: !0,
                        preventAbort: !0
                    });
                    const {signature: i, inputSize: a, outputSize: o} = r;
                    return {
                        signature: i,
                        inputSize: a,
                        outputSize: o
                    }
                } finally {
                    r()
                }
            }
            )(e, t)
        }
    }
    function bt(e, t) {
        const {baseURL: r, chunkSize: s} = t;
        if (!e.interface) {
            let i;
            try {
                i = ( (e, t, r) => {
                    const s = {
                        type: "module"
                    };
                    let i, a;
                    typeof e == Y && (e = e());
                    try {
                        i = new f(e,t)
                    } catch (t) {
                        i = e
                    }
                    if (St)
                        try {
                            a = new R(i)
                        } catch (e) {
                            St = !1,
                            a = new R(i,s)
                        }
                    else
                        a = new R(i,s);
                    return a.addEventListener("message", (e => (async ({data: e}, t) => {
                        const {type: r, value: s, messageId: i, result: a, error: o} = e
                          , {reader: c, writer: l, resolveResult: u, rejectResult: f, onTaskFinished: p} = t;
                        try {
                            if (o) {
                                const {message: e, stack: t, code: r, name: s} = o
                                  , i = new d(e);
                                n.assign(i, {
                                    stack: t,
                                    code: r,
                                    name: s
                                }),
                                h(i)
                            } else {
                                if ("pull" == r) {
                                    const {value: e, done: n} = await c.read();
                                    zt({
                                        type: ct,
                                        value: e,
                                        done: n,
                                        messageId: i
                                    }, t)
                                }
                                r == ct && (await l.ready,
                                await l.write(new w(s)),
                                zt({
                                    type: "ack",
                                    messageId: i
                                }, t)),
                                r == lt && h(null, a)
                            }
                        } catch (o) {
                            zt({
                                type: lt,
                                messageId: i
                            }, t),
                            h(o)
                        }
                        function h(e, t) {
                            e ? f(e) : u(t),
                            l && l.releaseLock(),
                            p()
                        }
                    }
                    )(e, r))),
                    a
                }
                )(e.scripts[0], r, e)
            } catch (n) {
                return pt = !1,
                yt(e, t)
            }
            n.assign(e, {
                worker: i,
                interface: {
                    run: () => (async (e, t) => {
                        let r, s;
                        const i = new y(( (e, t) => {
                            r = e,
                            s = t
                        }
                        ));
                        n.assign(e, {
                            reader: null,
                            writer: null,
                            resolveResult: r,
                            rejectResult: s,
                            result: i
                        });
                        const {readable: a, options: o, scripts: c} = e
                          , {writable: l, closed: u} = (e => {
                            let t;
                            const n = new y((e => t = e));
                            return {
                                writable: new C({
                                    async write(t) {
                                        const n = e.getWriter();
                                        await n.ready,
                                        await n.write(t),
                                        n.releaseLock()
                                    },
                                    close() {
                                        t()
                                    },
                                    abort: t => e.getWriter().abort(t)
                                }),
                                closed: n
                            }
                        }
                        )(e.writable)
                          , f = zt({
                            type: "start",
                            scripts: c.slice(1),
                            options: o,
                            config: t,
                            readable: a,
                            writable: l
                        }, e);
                        f || n.assign(e, {
                            reader: a.getReader(),
                            writer: l.getWriter()
                        });
                        const d = await i;
                        return f || await l.getWriter().close(),
                        await u,
                        d
                    }
                    )(e, {
                        chunkSize: s
                    })
                }
            })
        }
        return e.interface
    }
    let St = !0
      , kt = !0;
    function zt(e, {worker: t, writer: n, onTaskFinished: r, transferStreams: s}) {
        try {
            const {value: n, readable: r, writable: i} = e
              , a = [];
            if (n && (n.byteLength < n.buffer.byteLength ? e.value = n.buffer.slice(0, n.byteLength) : e.value = n.buffer,
            a.push(e.value)),
            s && kt ? (r && a.push(r),
            i && a.push(i)) : e.readable = e.writable = null,
            a.length)
                try {
                    return t.postMessage(e, a),
                    !0
                } catch (n) {
                    kt = !1,
                    e.readable = e.writable = null,
                    t.postMessage(e)
                }
            else
                t.postMessage(e)
        } catch (e) {
            throw n && n.releaseLock(),
            r(),
            e
        }
    }
    let vt = [];
    const xt = [];
    let At = 0;
    async function Ct(e, t) {
        const {options: n, config: r} = t
          , {transferStreams: i, useWebWorkers: a, useCompressionStream: o, codecType: c, compressed: l, signed: u, encrypted: f} = n
          , {workerScripts: d, maxWorkers: w} = r;
        t.transferStreams = i || i === G;
        const p = !(l || u || f || t.transferStreams);
        return t.useWebWorkers = !p && (a || a === G && r.useWebWorkers),
        t.scripts = t.useWebWorkers && d ? d[c] : [],
        n.useCompressionStream = o || o === G && r.useCompressionStream,
        (await (async () => {
            const n = vt.find((e => !e.busy));
            if (n)
                return _t(n),
                new ht(n,e,t,h);
            if (vt.length < w) {
                const n = {
                    indexWorker: At
                };
                return At++,
                vt.push(n),
                new ht(n,e,t,h)
            }
            return new y((n => xt.push({
                resolve: n,
                stream: e,
                workerOptions: t
            })))
        }
        )()).run();
        function h(e) {
            if (xt.length) {
                const [{resolve: t, stream: n, workerOptions: r}] = xt.splice(0, 1);
                t(new ht(e,n,r,h))
            } else
                e.worker ? (_t(e),
                ( (e, t) => {
                    const {config: n} = t
                      , {terminateWorkerTimeout: r} = n;
                    s.isFinite(r) && r >= 0 && (e.terminated ? e.terminated = !1 : e.terminateTimeout = setTimeout((async () => {
                        vt = vt.filter((t => t != e));
                        try {
                            await e.terminate()
                        } catch (e) {}
                    }
                    ), r))
                }
                )(e, t)) : vt = vt.filter((t => t != e))
        }
    }
    function _t(e) {
        const {terminateTimeout: t} = e;
        t && (clearTimeout(t),
        e.terminateTimeout = null)
    }
    const Dt = "HTTP error "
      , Ft = "HTTP Range not supported"
      , Rt = "Writer iterator completed too soon"
      , Wt = "Writer not initialized"
      , Et = "Range"
      , Tt = "GET"
      , Lt = "bytes"
      , Ut = 65536
      , It = "writable";
    class Nt {
        constructor() {
            this.size = 0
        }
        init() {
            this.initialized = !0
        }
    }
    class qt extends Nt {
        get readable() {
            const e = this
              , {chunkSize: t=Ut} = e
              , n = new A({
                start() {
                    this.chunkOffset = 0
                },
                async pull(r) {
                    const {offset: s=0, size: i, diskNumberStart: o} = n
                      , {chunkOffset: c} = this
                      , l = i === G ? t : a.min(t, i - c)
                      , u = await cn(e, s + c, l, o);
                    r.enqueue(u),
                    c + t > i || i === G && !u.length && l ? r.close() : this.chunkOffset += t
                }
            });
            return n
        }
    }
    class Ot extends Nt {
        constructor() {
            super();
            const e = this
              , t = new C({
                write(t) {
                    if (!e.initialized)
                        throw new d(Wt);
                    return e.writeUint8Array(t)
                }
            });
            n.defineProperty(e, It, {
                get: () => t
            })
        }
        writeUint8Array() {}
    }
    class Pt extends qt {
        constructor(e) {
            super(),
            n.assign(this, {
                blob: e,
                size: e.size
            })
        }
        async readUint8Array(e, t) {
            const n = this
              , r = e + t
              , s = e || r < n.size ? n.blob.slice(e, r) : n.blob;
            let i = await s.arrayBuffer();
            return i.byteLength > t && (i = i.slice(e, r)),
            new w(i)
        }
    }
    class Ht extends Nt {
        constructor(e) {
            super();
            const t = new x
              , r = [];
            e && r.push(["Content-Type", e]),
            n.defineProperty(this, It, {
                get: () => t.writable
            }),
            this.blob = new u(t.readable,{
                headers: r
            }).blob()
        }
        getData() {
            return this.blob
        }
    }
    class Mt extends qt {
        constructor(e, t) {
            super(),
            Vt(this, e, t)
        }
        async init() {
            await Zt(this, $t, Yt),
            super.init()
        }
        readUint8Array(e, t) {
            return Kt(this, e, t, $t, Yt)
        }
    }
    class Bt extends qt {
        constructor(e, t) {
            super(),
            Vt(this, e, t)
        }
        async init() {
            await Zt(this, en, jt),
            super.init()
        }
        readUint8Array(e, t) {
            return Kt(this, e, t, en, jt)
        }
    }
    function Vt(e, t, r) {
        const {preventHeadRequest: s, useRangeHeader: i, forceRangeRequests: a, combineSizeEocd: o} = r;
        delete (r = n.assign({}, r)).preventHeadRequest,
        delete r.useRangeHeader,
        delete r.forceRangeRequests,
        delete r.combineSizeEocd,
        delete r.useXHR,
        n.assign(e, {
            url: t,
            options: r,
            preventHeadRequest: s,
            useRangeHeader: i,
            forceRangeRequests: a,
            combineSizeEocd: o
        })
    }
    async function Zt(e, t, n) {
        const {url: r, preventHeadRequest: i, useRangeHeader: a, forceRangeRequests: o, combineSizeEocd: c} = e;
        if ((e => {
            const {baseURL: t} = ee()
              , {protocol: n} = new f(e,t);
            return "http:" == n || "https:" == n
        }
        )(r) && (a || o) && (void 0 === i || i)) {
            const r = await t(Tt, e, Gt(e, c ? -22 : void 0));
            if (!o && r.headers.get("Accept-Ranges") != Lt)
                throw new d(Ft);
            {
                let i;
                c && (e.eocdCache = new w(await r.arrayBuffer()));
                const a = r.headers.get("Content-Range");
                if (a) {
                    const e = a.trim().split(/\s*\/\s*/);
                    if (e.length) {
                        const t = e[1];
                        t && "*" != t && (i = s(t))
                    }
                }
                i === G ? await Qt(e, t, n) : e.size = i
            }
        } else
            await Qt(e, t, n)
    }
    async function Kt(e, t, n, r, s) {
        const {useRangeHeader: i, forceRangeRequests: a, eocdCache: o, size: c, options: l} = e;
        if (i || a) {
            if (o && t == c - H && n == H)
                return o;
            const s = await r(Tt, e, Gt(e, t, n));
            if (206 != s.status)
                throw new d(Ft);
            return new w(await s.arrayBuffer())
        }
        {
            const {data: r} = e;
            return r || await s(e, l),
            new w(e.data.subarray(t, t + n))
        }
    }
    function Gt(e, t=0, r=1) {
        return n.assign({}, Xt(e), {
            [Et]: Lt + "=" + (0 > t ? t : t + "-" + (t + r - 1))
        })
    }
    function Xt({options: e}) {
        const {headers: t} = e;
        if (t)
            return Symbol.iterator in t ? n.fromEntries(t) : t
    }
    async function Yt(e) {
        await Jt(e, $t)
    }
    async function jt(e) {
        await Jt(e, en)
    }
    async function Jt(e, t) {
        const n = await t(Tt, e, Xt(e));
        e.data = new w(await n.arrayBuffer()),
        e.size || (e.size = e.data.length)
    }
    async function Qt(e, t, n) {
        if (e.preventHeadRequest)
            await n(e, e.options);
        else {
            const r = (await t("HEAD", e, Xt(e))).headers.get("Content-Length");
            r ? e.size = s(r) : await n(e, e.options)
        }
    }
    async function $t(e, {options: t, url: r}, s) {
        const i = await fetch(r, n.assign({}, t, {
            method: e,
            headers: s
        }));
        if (400 > i.status)
            return i;
        throw 416 == i.status ? new d(Ft) : new d(Dt + (i.statusText || i.status))
    }
    function en(e, {url: t}, r) {
        return new y(( (s, i) => {
            const a = new XMLHttpRequest;
            if (a.addEventListener("load", ( () => {
                if (400 > a.status) {
                    const e = [];
                    a.getAllResponseHeaders().trim().split(/[\r\n]+/).forEach((t => {
                        const n = t.trim().split(/\s*:\s*/);
                        n[0] = n[0].trim().replace(/^[a-z]|-[a-z]/g, (e => e.toUpperCase())),
                        e.push(n)
                    }
                    )),
                    s({
                        status: a.status,
                        arrayBuffer: () => a.response,
                        headers: new c(e)
                    })
                } else
                    i(416 == a.status ? new d(Ft) : new d(Dt + (a.statusText || a.status)))
            }
            ), !1),
            a.addEventListener("error", (e => i(e.detail ? e.detail.error : new d("Network error"))), !1),
            a.open(e, t),
            r)
                for (const e of n.entries(r))
                    a.setRequestHeader(e[0], e[1]);
            a.responseType = "arraybuffer",
            a.send()
        }
        ))
    }
    class tn extends qt {
        constructor(e, t={}) {
            super(),
            n.assign(this, {
                url: e,
                reader: t.useXHR ? new Bt(e,t) : new Mt(e,t)
            })
        }
        set size(e) {}
        get size() {
            return this.reader.size
        }
        async init() {
            await this.reader.init(),
            super.init()
        }
        readUint8Array(e, t) {
            return this.reader.readUint8Array(e, t)
        }
    }
    class nn extends qt {
        constructor(e) {
            super(),
            this.readers = e
        }
        async init() {
            const e = this
              , {readers: t} = e;
            e.lastDiskNumber = 0,
            e.lastDiskOffset = 0,
            await y.all(t.map((async (n, r) => {
                await n.init(),
                r != t.length - 1 && (e.lastDiskOffset += n.size),
                e.size += n.size
            }
            ))),
            super.init()
        }
        async readUint8Array(e, t, n=0) {
            const r = this
              , {readers: s} = this;
            let i, o = n;
            -1 == o && (o = s.length - 1);
            let c = e;
            for (; c >= s[o].size; )
                c -= s[o].size,
                o++;
            const l = s[o]
              , u = l.size;
            if (c + t > u) {
                const s = u - c;
                i = new w(t),
                i.set(await cn(l, c, s)),
                i.set(await r.readUint8Array(e + s, t - s, n), s)
            } else
                i = await cn(l, c, t);
            return r.lastDiskNumber = a.max(o, r.lastDiskNumber),
            i
        }
    }
    class rn extends Nt {
        constructor(e, t=4294967295) {
            super();
            const r = this;
            let s, i, a;
            n.assign(r, {
                diskNumber: 0,
                diskOffset: 0,
                size: 0,
                maxSize: t,
                availableSize: t
            });
            const o = new C({
                async write(t) {
                    const {availableSize: n} = r;
                    if (a)
                        t.length < n ? await c(t) : (await c(t.slice(0, n)),
                        await l(),
                        r.diskOffset += s.size,
                        r.diskNumber++,
                        a = null,
                        await this.write(t.slice(n)));
                    else {
                        const {value: n, done: o} = await e.next();
                        if (o && !n)
                            throw new d(Rt);
                        s = n,
                        s.size = 0,
                        s.maxSize && (r.maxSize = s.maxSize),
                        r.availableSize = r.maxSize,
                        await sn(s),
                        i = n.writable,
                        a = i.getWriter(),
                        await this.write(t)
                    }
                },
                async close() {
                    await a.ready,
                    await l()
                }
            });
            async function c(e) {
                const t = e.length;
                t && (await a.ready,
                await a.write(e),
                s.size += t,
                r.size += t,
                r.availableSize -= t)
            }
            async function l() {
                i.size = s.size,
                await a.close()
            }
            n.defineProperty(r, It, {
                get: () => o
            })
        }
    }
    async function sn(e, t) {
        if (!e.init || e.initialized)
            return y.resolve();
        await e.init(t)
    }
    function an(e) {
        return t.isArray(e) && (e = new nn(e)),
        e instanceof A && (e = {
            readable: e
        }),
        e
    }
    function on(e) {
        e.writable === G && typeof e.next == Y && (e = new rn(e)),
        e instanceof C && (e = {
            writable: e
        });
        const {writable: t} = e;
        return t.size === G && (t.size = 0),
        e instanceof rn || n.assign(e, {
            diskNumber: 0,
            diskOffset: 0,
            availableSize: 1 / 0,
            maxSize: 1 / 0
        }),
        e
    }
    function cn(e, t, n, r) {
        return e.readUint8Array(t, n, r)
    }
    const ln = nn
      , un = rn
      , fn = "\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split("");
    function dn(e, t) {
        return t && "cp437" == t.trim().toLowerCase() ? (e => {
            {
                let t = "";
                for (let n = 0; n < e.length; n++)
                    t += fn[e[n]];
                return t
            }
        }
        )(e) : new S(t).decode(e)
    }
    const wn = "filename"
      , pn = "rawFilename"
      , hn = "comment"
      , gn = "rawComment"
      , mn = "uncompressedSize"
      , yn = "compressedSize"
      , bn = "offset"
      , Sn = "diskNumberStart"
      , kn = "lastModDate"
      , zn = "rawLastModDate"
      , vn = "lastAccessDate"
      , xn = "creationDate"
      , An = "internalFileAttribute"
      , Cn = "internalFileAttributes"
      , _n = "externalFileAttribute"
      , Dn = "externalFileAttributes"
      , Fn = "msDosCompatible"
      , Rn = "zip64"
      , Wn = "encrypted"
      , En = "version"
      , Tn = "versionMadeBy"
      , Ln = "zipCrypto"
      , Un = "directory"
      , In = "executable"
      , Nn = [wn, pn, yn, mn, kn, zn, hn, gn, vn, xn, bn, Sn, Sn, An, Cn, _n, Dn, Fn, Rn, Wn, En, Tn, Ln, Un, In, "bitFlag", "signature", "filenameUTF8", "commentUTF8", "compressionMethod", "extraField", "rawExtraField", "extraFieldZip64", "extraFieldUnicodePath", "extraFieldUnicodeComment", "extraFieldAES", "extraFieldNTFS", "extraFieldExtendedTimestamp"];
    class qn {
        constructor(e) {
            Nn.forEach((t => this[t] = e[t]))
        }
    }
    const On = "File format is not recognized"
      , Pn = "End of central directory not found"
      , Hn = "End of Zip64 central directory locator not found"
      , Mn = "Central directory header not found"
      , Bn = "Local file header not found"
      , Vn = "Zip64 extra field not found"
      , Zn = "File contains encrypted entry"
      , Kn = "Encryption method not supported"
      , Gn = "Compression method not supported"
      , Xn = "Split zip file"
      , Yn = "utf-8"
      , jn = "cp437"
      , Jn = [[mn, E], [yn, E], [bn, E], [Sn, T]]
      , Qn = {
        [T]: {
            getValue: lr,
            bytes: 4
        },
        [E]: {
            getValue: ur,
            bytes: 8
        }
    };
    class $n {
        constructor(e, t={}) {
            n.assign(this, {
                reader: an(e),
                options: t,
                config: ee()
            })
        }
        async*getEntriesGenerator(e={}) {
            const t = this;
            let {reader: r} = t;
            const {config: s} = t;
            if (await sn(r),
            r.size !== G && r.readUint8Array || (r = new Pt(await new u(r.readable).blob()),
            await sn(r)),
            r.size < H)
                throw new d(On);
            r.chunkSize = te(s);
            const i = await (async (e, t, n) => {
                const r = new w(4);
                var s;
                return s = t,
                fr(r).setUint32(0, s, !0),
                await i(22) || await i(a.min(1048582, n));
                async function i(t) {
                    const s = n - t
                      , i = await cn(e, s, t);
                    for (let e = i.length - 22; e >= 0; e--)
                        if (i[e] == r[0] && i[e + 1] == r[1] && i[e + 2] == r[2] && i[e + 3] == r[3])
                            return {
                                offset: s + e,
                                buffer: i.slice(e, e + 22).buffer
                            }
                }
            }
            )(r, q, r.size);
            if (!i)
                throw lr(fr(await cn(r, 0, 4))) == U ? new d(Xn) : new d(Pn);
            const o = fr(i);
            let c = lr(o, 12)
              , l = lr(o, 16);
            const f = i.offset
              , p = cr(o, 20)
              , h = f + H + p;
            let g = cr(o, 4);
            const m = r.lastDiskNumber || 0;
            let y = cr(o, 6)
              , b = cr(o, 8)
              , S = 0
              , k = 0;
            if (l == E || c == E || b == T || y == T) {
                const e = fr(await cn(r, i.offset - 20, 20));
                if (lr(e, 0) == P) {
                    l = ur(e, 8);
                    let t = await cn(r, l, 56, -1)
                      , n = fr(t);
                    const s = i.offset - 20 - 56;
                    if (lr(n, 0) != O && l != s) {
                        const e = l;
                        l = s,
                        S = l - e,
                        t = await cn(r, l, 56, -1),
                        n = fr(t)
                    }
                    if (lr(n, 0) != O)
                        throw new d(Hn);
                    g == T && (g = lr(n, 16)),
                    y == T && (y = lr(n, 20)),
                    b == T && (b = ur(n, 32)),
                    c == E && (c = ur(n, 40)),
                    l -= c
                }
            }
            if (l < r.size || (S = r.size - l - c - H,
            l = r.size - c - H),
            m != g)
                throw new d(Xn);
            if (0 > l)
                throw new d(On);
            let z = 0
              , v = await cn(r, l, c, y)
              , x = fr(v);
            if (c) {
                const e = i.offset - c;
                if (lr(x, z) != N && l != e) {
                    const t = l;
                    l = e,
                    S += l - t,
                    v = await cn(r, l, c, y),
                    x = fr(v)
                }
            }
            const A = i.offset - l - (r.lastDiskOffset || 0);
            if (c == A || 0 > A || (c = A,
            v = await cn(r, l, c, y),
            x = fr(v)),
            0 > l || l >= r.size)
                throw new d(On);
            const C = sr(t, e, "filenameEncoding")
              , _ = sr(t, e, "commentEncoding");
            for (let i = 0; b > i; i++) {
                const o = new er(r,s,t.options);
                if (lr(x, z) != N)
                    throw new d(Mn);
                tr(o, x, z + 6);
                const c = !!o.bitFlag.languageEncodingFlag
                  , l = z + 46
                  , u = l + o.filenameLength
                  , f = u + o.extraFieldLength
                  , w = cr(x, z + 4)
                  , p = !(w >> 8)
                  , h = w >> 8 == 3
                  , g = v.subarray(l, u)
                  , m = cr(x, z + 32)
                  , y = f + m
                  , A = v.subarray(f, y)
                  , D = c
                  , F = c
                  , R = lr(x, z + 38)
                  , W = p && !(16 & ~or(x, z + 38)) || h && 16384 == (R >> 16 & 61440) || g.length && 47 == g[g.length - 1]
                  , E = h && !!(R >> 16 & 73)
                  , T = lr(x, z + 42) + S;
                n.assign(o, {
                    versionMadeBy: w,
                    msDosCompatible: p,
                    compressedSize: 0,
                    uncompressedSize: 0,
                    commentLength: m,
                    directory: W,
                    offset: T,
                    diskNumberStart: cr(x, z + 34),
                    internalFileAttributes: cr(x, z + 36),
                    externalFileAttributes: R,
                    rawFilename: g,
                    filenameUTF8: D,
                    commentUTF8: F,
                    rawExtraField: v.subarray(u, f),
                    executable: E
                }),
                o.internalFileAttribute = o.internalFileAttributes,
                o.externalFileAttribute = o.externalFileAttributes;
                const L = sr(t, e, "decodeText") || dn
                  , U = D ? Yn : C || jn
                  , I = F ? Yn : _ || jn;
                let q = L(g, U);
                q === G && (q = dn(g, U));
                let O = L(A, I);
                O === G && (O = dn(A, I)),
                n.assign(o, {
                    rawComment: A,
                    filename: q,
                    comment: O,
                    directory: W || q.endsWith(V)
                }),
                k = a.max(T, k),
                nr(o, o, x, z + 6),
                o.zipCrypto = o.encrypted && !o.extraFieldAES;
                const P = new qn(o);
                P.getData = (e, t) => o.getData(e, P, t),
                z = y;
                const {onprogress: H} = e;
                if (H)
                    try {
                        await H(i + 1, b, new qn(o))
                    } catch (e) {}
                yield P
            }
            const D = sr(t, e, "extractPrependedData")
              , F = sr(t, e, "extractAppendedData");
            return D && (t.prependedData = k > 0 ? await cn(r, 0, k) : new w),
            t.comment = p ? await cn(r, f + H, p) : new w,
            F && (t.appendedData = h < r.size ? await cn(r, h, r.size - h) : new w),
            !0
        }
        async getEntries(e={}) {
            const t = [];
            for await(const n of this.getEntriesGenerator(e))
                t.push(n);
            return t
        }
        async close() {}
    }
    class er {
        constructor(e, t, r) {
            n.assign(this, {
                reader: e,
                config: t,
                options: r
            })
        }
        async getData(e, t, r={}) {
            const s = this
              , {reader: i, offset: a, diskNumberStart: o, extraFieldAES: c, compressionMethod: l, config: u, bitFlag: f, signature: p, rawLastModDate: h, uncompressedSize: g, compressedSize: m} = s
              , y = t.localDirectory = {}
              , b = fr(await cn(i, a, 30, o));
            let S = sr(s, r, "password")
              , k = sr(s, r, "rawPassword");
            const z = sr(s, r, "passThrough");
            if (S = S && S.length && S,
            k = k && k.length && k,
            c && 99 != c.originalCompressionMethod)
                throw new d(Gn);
            if (0 != l && 8 != l && !z)
                throw new d(Gn);
            if (lr(b, 0) != L)
                throw new d(Bn);
            tr(y, b, 4),
            y.rawExtraField = y.extraFieldLength ? await cn(i, a + 30 + y.filenameLength, y.extraFieldLength, o) : new w,
            nr(s, y, b, 4, !0),
            n.assign(t, {
                lastAccessDate: y.lastAccessDate,
                creationDate: y.creationDate
            });
            const v = s.encrypted && y.encrypted && !z
              , x = v && !c;
            if (z || (t.zipCrypto = x),
            v) {
                if (!x && c.strength === G)
                    throw new d(Kn);
                if (!S && !k)
                    throw new d(Zn)
            }
            const A = a + 30 + y.filenameLength + y.extraFieldLength
              , _ = m
              , D = i.readable;
            n.assign(D, {
                diskNumberStart: o,
                offset: A,
                size: _
            });
            const F = sr(s, r, "signal")
              , R = sr(s, r, "checkPasswordOnly");
            R && (e = new C),
            e = on(e),
            await sn(e, z ? m : g);
            const {writable: W} = e
              , {onstart: E, onprogress: T, onend: U} = r
              , I = {
                options: {
                    codecType: ft,
                    password: S,
                    rawPassword: k,
                    zipCrypto: x,
                    encryptionStrength: c && c.strength,
                    signed: sr(s, r, "checkSignature") && !z,
                    passwordVerification: x && (f.dataDescriptor ? h >>> 8 & 255 : p >>> 24 & 255),
                    signature: p,
                    compressed: 0 != l && !z,
                    encrypted: s.encrypted && !z,
                    useWebWorkers: sr(s, r, "useWebWorkers"),
                    useCompressionStream: sr(s, r, "useCompressionStream"),
                    transferStreams: sr(s, r, "transferStreams"),
                    checkPasswordOnly: R
                },
                config: u,
                streamOptions: {
                    signal: F,
                    size: _,
                    onstart: E,
                    onprogress: T,
                    onend: U
                }
            };
            let N = 0;
            try {
                ({outputSize: N} = await Ct({
                    readable: D,
                    writable: W
                }, I))
            } catch (e) {
                if (!R || e.message != me)
                    throw e
            } finally {
                const e = sr(s, r, "preventClose");
                W.size += N,
                e || W.locked || await W.getWriter().close()
            }
            return R ? G : e.getData ? e.getData() : W
        }
    }
    function tr(e, t, r) {
        const s = e.rawBitFlag = cr(t, r + 2)
          , i = !(1 & ~s)
          , a = lr(t, r + 6);
        n.assign(e, {
            encrypted: i,
            version: cr(t, r),
            bitFlag: {
                level: (6 & s) >> 1,
                dataDescriptor: !(8 & ~s),
                languageEncodingFlag: (s & B) == B
            },
            rawLastModDate: a,
            lastModDate: ir(a),
            filenameLength: cr(t, r + 22),
            extraFieldLength: cr(t, r + 24)
        })
    }
    function nr(e, t, r, s, i) {
        const {rawExtraField: a} = t
          , l = t.extraField = new c
          , u = fr(new w(a));
        let f = 0;
        try {
            for (; f < a.length; ) {
                const e = cr(u, f)
                  , t = cr(u, f + 2);
                l.set(e, {
                    type: e,
                    data: a.slice(f + 4, f + 4 + t)
                }),
                f += 4 + t
            }
        } catch (e) {}
        const p = cr(r, s + 4);
        n.assign(t, {
            signature: lr(r, s + 10),
            uncompressedSize: lr(r, s + 18),
            compressedSize: lr(r, s + 14)
        });
        const h = l.get(1);
        h && (( (e, t) => {
            t.zip64 = !0;
            const n = fr(e.data)
              , r = Jn.filter(( ([e,n]) => t[e] == n));
            for (let s = 0, i = 0; s < r.length; s++) {
                const [a,o] = r[s];
                if (t[a] == o) {
                    const r = Qn[o];
                    t[a] = e[a] = r.getValue(n, i),
                    i += r.bytes
                } else if (e[a])
                    throw new d(Vn)
            }
        }
        )(h, t),
        t.extraFieldZip64 = h);
        const g = l.get(28789);
        g && (rr(g, wn, pn, t, e),
        t.extraFieldUnicodePath = g);
        const m = l.get(25461);
        m && (rr(m, hn, gn, t, e),
        t.extraFieldUnicodeComment = m);
        const y = l.get(39169);
        y ? (( (e, t, r) => {
            const s = fr(e.data)
              , i = or(s, 4);
            n.assign(e, {
                vendorVersion: or(s, 0),
                vendorId: or(s, 2),
                strength: i,
                originalCompressionMethod: r,
                compressionMethod: cr(s, 5)
            }),
            t.compressionMethod = e.compressionMethod
        }
        )(y, t, p),
        t.extraFieldAES = y) : t.compressionMethod = p;
        const b = l.get(10);
        b && (( (e, t) => {
            const r = fr(e.data);
            let s, i = 4;
            try {
                for (; i < e.data.length && !s; ) {
                    const t = cr(r, i)
                      , n = cr(r, i + 2);
                    1 == t && (s = e.data.slice(i + 4, i + 4 + n)),
                    i += 4 + n
                }
            } catch (e) {}
            try {
                if (s && 24 == s.length) {
                    const r = fr(s)
                      , i = r.getBigUint64(0, !0)
                      , a = r.getBigUint64(8, !0)
                      , o = r.getBigUint64(16, !0);
                    n.assign(e, {
                        rawLastModDate: i,
                        rawLastAccessDate: a,
                        rawCreationDate: o
                    });
                    const c = {
                        lastModDate: ar(i),
                        lastAccessDate: ar(a),
                        creationDate: ar(o)
                    };
                    n.assign(e, c),
                    n.assign(t, c)
                }
            } catch (e) {}
        }
        )(b, t),
        t.extraFieldNTFS = b);
        const S = l.get(M);
        S && (( (e, t, n) => {
            const r = fr(e.data)
              , s = or(r, 0)
              , i = []
              , a = [];
            n ? (1 & ~s || (i.push(kn),
            a.push(zn)),
            2 & ~s || (i.push(vn),
            a.push("rawLastAccessDate")),
            4 & ~s || (i.push(xn),
            a.push("rawCreationDate"))) : 5 > e.data.length || (i.push(kn),
            a.push(zn));
            let c = 1;
            i.forEach(( (n, s) => {
                if (e.data.length >= c + 4) {
                    const i = lr(r, c);
                    t[n] = e[n] = new o(1e3 * i);
                    const l = a[s];
                    e[l] = i
                }
                c += 4
            }
            ))
        }
        )(S, t, i),
        t.extraFieldExtendedTimestamp = S);
        const k = l.get(6534);
        k && (t.extraFieldUSDZ = k)
    }
    function rr(e, t, r, s, i) {
        const a = fr(e.data)
          , o = new ae;
        o.append(i[r]);
        const c = fr(new w(4));
        c.setUint32(0, o.get(), !0);
        const l = lr(a, 1);
        n.assign(e, {
            version: or(a, 0),
            [t]: dn(e.data.subarray(5)),
            valid: !i.bitFlag.languageEncodingFlag && l == lr(c, 0)
        }),
        e.valid && (s[t] = e[t],
        s[t + "UTF8"] = !0)
    }
    function sr(e, t, n) {
        return t[n] === G ? e.options[n] : t[n]
    }
    function ir(e) {
        const t = (4294901760 & e) >> 16
          , n = 65535 & e;
        try {
            return new o(1980 + ((65024 & t) >> 9),((480 & t) >> 5) - 1,31 & t,(63488 & n) >> 11,(2016 & n) >> 5,2 * (31 & n),0)
        } catch (e) {}
    }
    function ar(e) {
        return new o(s(e / i(1e4) - i(116444736e5)))
    }
    function or(e, t) {
        return e.getUint8(t)
    }
    function cr(e, t) {
        return e.getUint16(t, !0)
    }
    function lr(e, t) {
        return e.getUint32(t, !0)
    }
    function ur(e, t) {
        return s(e.getBigUint64(t, !0))
    }
    function fr(e) {
        return new g(e.buffer)
    }
    const dr = "File already exists"
      , wr = "Zip file comment exceeds 64KB"
      , pr = "File entry comment exceeds 64KB"
      , hr = "File entry name exceeds 64KB"
      , gr = "Version exceeds 65535"
      , mr = "The strength must equal 1, 2, or 3"
      , yr = "Extra field type exceeds 65535"
      , br = "Extra field data exceeds 64KB"
      , Sr = "Zip64 is not supported (make sure 'keepOrder' is set to 'true')"
      , kr = "Undefined uncompressed size"
      , zr = new w([7, 0, 2, 0, 65, 69, 3, 0, 0]);
    let vr = 0;
    const xr = [];
    class Ar {
        constructor(e, t={}) {
            const r = (e = on(e)).availableSize !== G && e.availableSize > 0 && e.availableSize !== 1 / 0 && e.maxSize !== G && e.maxSize > 0 && e.maxSize !== 1 / 0;
            n.assign(this, {
                writer: e,
                addSplitZipSignature: r,
                options: t,
                config: ee(),
                files: new c,
                filenames: new l,
                offset: t.offset === G ? e.writable.size : t.offset,
                pendingEntriesSize: 0,
                pendingAddFileCalls: new l,
                bufferedWrites: 0
            })
        }
        async add(e="", r, s={}) {
            const c = this
              , {pendingAddFileCalls: l, config: f} = c;
            let m;
            vr < f.maxWorkers ? vr++ : await new y((e => xr.push(e)));
            try {
                if (e = e.trim(),
                c.filenames.has(e))
                    throw new d(dr);
                return c.filenames.add(e),
                m = (async (e, r, s, c) => {
                    r = r.trim();
                    const l = Dr(e, c, Fn)
                      , f = Dr(e, c, Tn, l ? 20 : 768)
                      , m = Dr(e, c, In);
                    if (f > T)
                        throw new d(gr);
                    let b = Dr(e, c, Dn, 0);
                    0 === b && (b = Dr(e, c, _n, 0)),
                    !c.directory && r.endsWith(V) && (c.directory = !0),
                    Dr(e, c, Un) ? (r.endsWith(V) || (r += V),
                    0 === b && (b = 16,
                    l || (b |= 16877 << 16))) : l || 0 !== b || (b = m ? 493 << 16 : 27525120);
                    const S = Dr(e, c, "encodeText", ce);
                    let k = S(r);
                    if (k === G && (k = ce(r)),
                    Ir(k) > T)
                        throw new d(hr);
                    const z = c.comment || "";
                    let v = S(z);
                    if (v === G && (v = ce(z)),
                    Ir(v) > T)
                        throw new d(pr);
                    const A = Dr(e, c, En, 20);
                    if (A > T)
                        throw new d(gr);
                    const C = Dr(e, c, kn, new o)
                      , _ = Dr(e, c, vn)
                      , D = Dr(e, c, xn);
                    let F = Dr(e, c, Cn, 0);
                    0 === F && (F = Dr(e, c, An, 0));
                    const R = Dr(e, c, "passThrough");
                    let W, N;
                    R || (W = Dr(e, c, "password"),
                    N = Dr(e, c, "rawPassword"));
                    const q = Dr(e, c, "encryptionStrength", 3)
                      , O = Dr(e, c, Ln)
                      , P = Dr(e, c, "extendedTimestamp", !0)
                      , H = Dr(e, c, "keepOrder", !0)
                      , X = Dr(e, c, "level")
                      , Y = Dr(e, c, "useWebWorkers")
                      , j = Dr(e, c, "bufferedWrite")
                      , J = Dr(e, c, "dataDescriptorSignature", !1)
                      , Q = Dr(e, c, "signal")
                      , $ = Dr(e, c, "useUnicodeFileNames", !0)
                      , ee = Dr(e, c, "useCompressionStream")
                      , ne = Dr(e, c, "compressionMethod");
                    let re = Dr(e, c, "dataDescriptor", !0)
                      , se = Dr(e, c, Rn);
                    if (!O && (W !== G || N !== G) && (1 > q || q > 3))
                        throw new d(mr);
                    let ie = new w;
                    const {extraField: ae} = c;
                    if (ae) {
                        let e = 0
                          , t = 0;
                        ae.forEach((t => e += 4 + Ir(t))),
                        ie = new w(e),
                        ae.forEach(( (e, n) => {
                            if (n > T)
                                throw new d(yr);
                            if (Ir(e) > T)
                                throw new d(br);
                            Lr(ie, new p([n]), t),
                            Lr(ie, new p([Ir(e)]), t + 2),
                            Lr(ie, e, t + 4),
                            t += 4 + Ir(e)
                        }
                        ))
                    }
                    let oe = 0
                      , le = 0
                      , ue = 0;
                    if (R && (({uncompressedSize: ue} = c),
                    ue === G))
                        throw new d(kr);
                    const fe = !0 === se;
                    s && (s = an(s),
                    await sn(s),
                    R ? oe = Fr(ue) : s.size === G ? (re = !0,
                    (se || se === G) && (se = !0,
                    ue = oe = 4294967296)) : (ue = s.size,
                    oe = Fr(ue)));
                    const {diskOffset: de, diskNumber: we, maxSize: pe} = e.writer
                      , he = fe || ue > E
                      , ge = fe || oe > E
                      , me = fe || e.offset + e.pendingEntriesSize - de > E
                      , ye = Dr(e, c, "supportZip64SplitFile", !0) && fe || we + a.ceil(e.pendingEntriesSize / pe) > T;
                    if (me || he || ge || ye) {
                        if (!1 === se || !H)
                            throw new d(Sr);
                        se = !0
                    }
                    se = se || !1;
                    const be = Dr(e, c, Wn)
                      , {signature: Se} = c
                      , ke = (e => {
                        const {rawFilename: t, lastModDate: n, lastAccessDate: r, creationDate: s, level: i, zip64: o, zipCrypto: c, useUnicodeFileNames: l, dataDescriptor: u, directory: f, rawExtraField: d, encryptionStrength: p, extendedTimestamp: g, encrypted: m} = e;
                        let {version: y, compressionMethod: b} = e;
                        const S = !f && (i > 0 || i === G && 0 !== b);
                        let k, z, v, x;
                        if (m && !c) {
                            k = new w(Ir(zr) + 2);
                            const e = Ur(k);
                            Wr(e, 0, 39169),
                            Lr(k, zr, 2),
                            Rr(e, 8, p)
                        } else
                            k = new w;
                        if (g) {
                            v = new w(9 + (r ? 4 : 0) + (s ? 4 : 0));
                            const e = Ur(v);
                            Wr(e, 0, M),
                            Wr(e, 2, Ir(v) - 4),
                            x = 1 + (r ? 2 : 0) + (s ? 4 : 0),
                            Rr(e, 4, x);
                            let t = 5;
                            Er(e, t, a.floor(n.getTime() / 1e3)),
                            t += 4,
                            r && (Er(e, t, a.floor(r.getTime() / 1e3)),
                            t += 4),
                            s && Er(e, t, a.floor(s.getTime() / 1e3));
                            try {
                                z = new w(36);
                                const e = Ur(z)
                                  , t = _r(n);
                                Wr(e, 0, 10),
                                Wr(e, 2, 32),
                                Wr(e, 8, 1),
                                Wr(e, 10, 24),
                                Tr(e, 12, t),
                                Tr(e, 20, _r(r) || t),
                                Tr(e, 28, _r(s) || t)
                            } catch (e) {
                                z = new w
                            }
                        } else
                            z = v = new w;
                        let A = 0;
                        l && (A |= B),
                        u && (A |= 8),
                        b === G && (b = S ? 8 : 0),
                        8 == b && (i >= 1 && 3 > i && (A |= 6),
                        i >= 3 && 5 > i && (A |= 1),
                        9 === i && (A |= 2)),
                        o && (y = y > 45 ? y : 45),
                        m && (A |= 1,
                        c || (y = y > 51 ? y : 51,
                        k[9] = b,
                        b = 99));
                        const C = new w(26)
                          , _ = Ur(C);
                        Wr(_, 0, y),
                        Wr(_, 2, A),
                        Wr(_, 4, b);
                        const D = new h(1)
                          , F = Ur(D);
                        let R;
                        R = K > n ? K : n > Z ? Z : n,
                        Wr(F, 0, (R.getHours() << 6 | R.getMinutes()) << 5 | R.getSeconds() / 2),
                        Wr(F, 2, (R.getFullYear() - 1980 << 4 | R.getMonth() + 1) << 5 | R.getDate());
                        const W = D[0];
                        Er(_, 6, W),
                        Wr(_, 22, Ir(t));
                        const E = Ir(k, v, z, d);
                        Wr(_, 24, E);
                        const T = new w(30 + Ir(t) + E);
                        return Er(Ur(T), 0, L),
                        Lr(T, C, 4),
                        Lr(T, t, 30),
                        Lr(T, k, 30 + Ir(t)),
                        Lr(T, v, 30 + Ir(t, k)),
                        Lr(T, z, 30 + Ir(t, k, v)),
                        Lr(T, d, 30 + Ir(t, k, v, z)),
                        {
                            localHeaderArray: T,
                            headerArray: C,
                            headerView: _,
                            lastModDate: n,
                            rawLastModDate: W,
                            encrypted: m,
                            compressed: S,
                            version: y,
                            compressionMethod: b,
                            extraFieldExtendedTimestampFlag: x,
                            rawExtraFieldExtendedTimestamp: v,
                            rawExtraFieldNTFS: z,
                            rawExtraFieldAES: k,
                            extraFieldLength: E
                        }
                    }
                    )(c = n.assign({}, c, {
                        rawFilename: k,
                        rawComment: v,
                        version: A,
                        versionMadeBy: f,
                        lastModDate: C,
                        lastAccessDate: _,
                        creationDate: D,
                        rawExtraField: ie,
                        zip64: se,
                        zip64UncompressedSize: he,
                        zip64CompressedSize: ge,
                        zip64Offset: me,
                        zip64DiskNumberStart: ye,
                        password: W,
                        rawPassword: N,
                        level: ee || e.config.CompressionStream !== G || e.config.CompressionStreamNative !== G ? X : 0,
                        useWebWorkers: Y,
                        encryptionStrength: q,
                        extendedTimestamp: P,
                        zipCrypto: O,
                        bufferedWrite: j,
                        keepOrder: H,
                        useUnicodeFileNames: $,
                        dataDescriptor: re,
                        dataDescriptorSignature: J,
                        signal: Q,
                        msDosCompatible: l,
                        internalFileAttribute: F,
                        internalFileAttributes: F,
                        externalFileAttribute: b,
                        externalFileAttributes: b,
                        useCompressionStream: ee,
                        passThrough: R,
                        encrypted: !!(W && Ir(W) || N && Ir(N)) || R && be,
                        signature: Se,
                        compressionMethod: ne
                    }))
                      , ze = (e => {
                        const {zip64: t, dataDescriptor: n, dataDescriptorSignature: r} = e;
                        let s, i = new w, a = 0;
                        return n && (i = new w(t ? r ? 24 : 20 : r ? 16 : 12),
                        s = Ur(i),
                        r && (a = 4,
                        Er(s, 0, I))),
                        {
                            dataDescriptorArray: i,
                            dataDescriptorView: s,
                            dataDescriptorOffset: a
                        }
                    }
                    )(c)
                      , ve = Ir(ke.localHeaderArray, ze.dataDescriptorArray);
                    let xe;
                    le = ve + oe,
                    e.options.usdz && (le += le + 64),
                    e.pendingEntriesSize += le;
                    try {
                        xe = await (async (e, r, s, a, o) => {
                            const {files: c, writer: l} = e
                              , {keepOrder: f, dataDescriptor: p, signal: h} = o
                              , {headerInfo: m} = a
                              , {usdz: b} = e.options
                              , S = t.from(c.values()).pop();
                            let k, z, v, A, C, _, D, F = {};
                            c.set(r, F);
                            try {
                                let t;
                                f && (t = S && S.lock,
                                F.lock = new y((e => v = e))),
                                !(o.bufferedWrite || e.writerLocked || e.bufferedWrites && f) && p || b ? (_ = l,
                                await R()) : (_ = new x,
                                D = new u(_.readable).blob(),
                                _.writable.size = 0,
                                k = !0,
                                e.bufferedWrites++,
                                await sn(l)),
                                await sn(_);
                                const {writable: m} = l;
                                let {diskOffset: z} = l;
                                if (e.addSplitZipSignature) {
                                    delete e.addSplitZipSignature;
                                    const t = new w(4);
                                    Er(Ur(t), 0, U),
                                    await Cr(m, t),
                                    e.offset += 4
                                }
                                b && ( (e, t) => {
                                    const {headerInfo: n} = e;
                                    let {localHeaderArray: r, extraFieldLength: s} = n
                                      , i = Ur(r)
                                      , a = 64 - (t + Ir(r)) % 64;
                                    4 > a && (a += 64);
                                    const o = new w(a)
                                      , c = Ur(o);
                                    Wr(c, 0, 6534),
                                    Wr(c, 2, a - 2);
                                    const l = r;
                                    n.localHeaderArray = r = new w(Ir(l) + a),
                                    Lr(r, l),
                                    Lr(r, o, Ir(l)),
                                    i = Ur(r),
                                    Wr(i, 28, s + a),
                                    e.metadataSize += a
                                }
                                )(a, e.offset - z),
                                k || (await t,
                                await W(m));
                                const {diskNumber: T} = l;
                                if (C = !0,
                                F.diskNumberStart = T,
                                F = await (async (e, t, {diskNumberStart: r, lock: s}, a, o, c) => {
                                    const {headerInfo: l, dataDescriptorInfo: u, metadataSize: f} = a
                                      , {localHeaderArray: d, headerArray: p, lastModDate: h, rawLastModDate: g, encrypted: m, compressed: y, version: b, compressionMethod: S, rawExtraFieldExtendedTimestamp: k, extraFieldExtendedTimestampFlag: z, rawExtraFieldNTFS: v, rawExtraFieldAES: x} = l
                                      , {dataDescriptorArray: A} = u
                                      , {rawFilename: C, lastAccessDate: _, creationDate: D, password: F, rawPassword: R, level: W, zip64: T, zip64UncompressedSize: L, zip64CompressedSize: U, zip64Offset: I, zip64DiskNumberStart: N, zipCrypto: q, dataDescriptor: O, directory: P, executable: H, versionMadeBy: M, rawComment: B, rawExtraField: V, useWebWorkers: Z, onstart: K, onprogress: X, onend: Y, signal: j, encryptionStrength: J, extendedTimestamp: Q, msDosCompatible: $, internalFileAttributes: ee, externalFileAttributes: ne, useCompressionStream: re, passThrough: se} = c
                                      , ie = {
                                        lock: s,
                                        versionMadeBy: M,
                                        zip64: T,
                                        directory: !!P,
                                        executable: !!H,
                                        filenameUTF8: !0,
                                        rawFilename: C,
                                        commentUTF8: !0,
                                        rawComment: B,
                                        rawExtraFieldExtendedTimestamp: k,
                                        rawExtraFieldNTFS: v,
                                        rawExtraFieldAES: x,
                                        rawExtraField: V,
                                        extendedTimestamp: Q,
                                        msDosCompatible: $,
                                        internalFileAttributes: ee,
                                        externalFileAttributes: ne,
                                        diskNumberStart: r
                                    };
                                    let {signature: ae, uncompressedSize: oe} = c
                                      , ce = 0;
                                    se || (oe = 0);
                                    const {writable: le} = t;
                                    if (e) {
                                        e.chunkSize = te(o),
                                        await Cr(le, d);
                                        const t = e.readable
                                          , n = t.size = e.size
                                          , r = {
                                            options: {
                                                codecType: ut,
                                                level: W,
                                                rawPassword: R,
                                                password: F,
                                                encryptionStrength: J,
                                                zipCrypto: m && q,
                                                passwordVerification: m && q && g >> 8 & 255,
                                                signed: !se,
                                                compressed: y && !se,
                                                encrypted: m && !se,
                                                useWebWorkers: Z,
                                                useCompressionStream: re,
                                                transferStreams: !1
                                            },
                                            config: o,
                                            streamOptions: {
                                                signal: j,
                                                size: n,
                                                onstart: K,
                                                onprogress: X,
                                                onend: Y
                                            }
                                        }
                                          , s = await Ct({
                                            readable: t,
                                            writable: le
                                        }, r);
                                        ce = s.outputSize,
                                        se || (oe = s.inputSize,
                                        ae = s.signature),
                                        le.size += oe
                                    } else
                                        await Cr(le, d);
                                    let ue;
                                    if (T) {
                                        let e = 4;
                                        L && (e += 8),
                                        U && (e += 8),
                                        I && (e += 8),
                                        N && (e += 4),
                                        ue = new w(e)
                                    } else
                                        ue = new w;
                                    return ( (e, t) => {
                                        const {signature: n, rawExtraFieldZip64: r, compressedSize: s, uncompressedSize: a, headerInfo: o, dataDescriptorInfo: c} = e
                                          , {headerView: l, encrypted: u} = o
                                          , {dataDescriptorView: f, dataDescriptorOffset: d} = c
                                          , {zip64: w, zip64UncompressedSize: p, zip64CompressedSize: h, zipCrypto: g, dataDescriptor: m} = t;
                                        if (u && !g || n === G || (Er(l, 10, n),
                                        m && Er(f, d, n)),
                                        w) {
                                            const e = Ur(r);
                                            Wr(e, 0, 1),
                                            Wr(e, 2, Ir(r) - 4);
                                            let t = 4;
                                            p && (Er(l, 18, E),
                                            Tr(e, t, i(a)),
                                            t += 8),
                                            h && (Er(l, 14, E),
                                            Tr(e, t, i(s))),
                                            m && (Tr(f, d + 4, i(s)),
                                            Tr(f, d + 12, i(a)))
                                        } else
                                            Er(l, 14, s),
                                            Er(l, 18, a),
                                            m && (Er(f, d + 4, s),
                                            Er(f, d + 8, a))
                                    }
                                    )({
                                        signature: ae,
                                        rawExtraFieldZip64: ue,
                                        compressedSize: ce,
                                        uncompressedSize: oe,
                                        headerInfo: l,
                                        dataDescriptorInfo: u
                                    }, c),
                                    O && await Cr(le, A),
                                    n.assign(ie, {
                                        uncompressedSize: oe,
                                        compressedSize: ce,
                                        lastModDate: h,
                                        rawLastModDate: g,
                                        creationDate: D,
                                        lastAccessDate: _,
                                        encrypted: m,
                                        zipCrypto: q,
                                        size: f + ce,
                                        compressionMethod: S,
                                        version: b,
                                        headerArray: p,
                                        signature: ae,
                                        rawExtraFieldZip64: ue,
                                        extraFieldExtendedTimestampFlag: z,
                                        zip64UncompressedSize: L,
                                        zip64CompressedSize: U,
                                        zip64Offset: I,
                                        zip64DiskNumberStart: N
                                    }),
                                    ie
                                }
                                )(s, _, F, a, e.config, o),
                                C = !1,
                                c.set(r, F),
                                F.filename = r,
                                k) {
                                    await _.writable.getWriter().close();
                                    let e = await D;
                                    await t,
                                    await R(),
                                    A = !0,
                                    p || (e = await (async (e, t, n, {zipCrypto: r}) => {
                                        let s;
                                        s = await t.slice(0, 26).arrayBuffer(),
                                        26 != s.byteLength && (s = s.slice(0, 26));
                                        const i = new g(s);
                                        return e.encrypted && !r || Er(i, 14, e.signature),
                                        e.zip64 ? (Er(i, 18, E),
                                        Er(i, 22, E)) : (Er(i, 18, e.compressedSize),
                                        Er(i, 22, e.uncompressedSize)),
                                        await Cr(n, new w(s)),
                                        t.slice(s.byteLength)
                                    }
                                    )(F, e, m, o)),
                                    await W(m),
                                    F.diskNumberStart = l.diskNumber,
                                    z = l.diskOffset,
                                    await e.stream().pipeTo(m, {
                                        preventClose: !0,
                                        preventAbort: !0,
                                        signal: h
                                    }),
                                    m.size += e.size,
                                    A = !1
                                }
                                if (F.offset = e.offset - z,
                                F.zip64)
                                    ( (e, t) => {
                                        const {rawExtraFieldZip64: n, offset: r, diskNumberStart: s} = e
                                          , {zip64UncompressedSize: a, zip64CompressedSize: o, zip64Offset: c, zip64DiskNumberStart: l} = t
                                          , u = Ur(n);
                                        let f = 4;
                                        a && (f += 8),
                                        o && (f += 8),
                                        c && (Tr(u, f, i(r)),
                                        f += 8),
                                        l && Er(u, f, s)
                                    }
                                    )(F, o);
                                else if (F.offset > E)
                                    throw new d(Sr);
                                return e.offset += F.size,
                                F
                            } catch (t) {
                                if (k && A || !k && C) {
                                    if (e.hasCorruptedEntries = !0,
                                    t)
                                        try {
                                            t.corruptedEntry = !0
                                        } catch (e) {}
                                    k ? e.offset += _.writable.size : e.offset = _.writable.size
                                }
                                throw c.delete(r),
                                t
                            } finally {
                                k && e.bufferedWrites--,
                                v && v(),
                                z && z()
                            }
                            async function R() {
                                e.writerLocked = !0;
                                const {lockWriter: t} = e;
                                e.lockWriter = new y((t => z = () => {
                                    e.writerLocked = !1,
                                    t()
                                }
                                )),
                                await t
                            }
                            async function W(e) {
                                Ir(m.localHeaderArray) > l.availableSize && (l.availableSize = 0,
                                await Cr(e, new w))
                            }
                        }
                        )(e, r, s, {
                            headerInfo: ke,
                            dataDescriptorInfo: ze,
                            metadataSize: ve
                        }, c)
                    } finally {
                        e.pendingEntriesSize -= le
                    }
                    return n.assign(xe, {
                        name: r,
                        comment: z,
                        extraField: ae
                    }),
                    new qn(xe)
                }
                )(c, e, r, s),
                l.add(m),
                await m
            } catch (t) {
                throw c.filenames.delete(e),
                t
            } finally {
                l.delete(m);
                const e = xr.shift();
                e ? e() : vr--
            }
        }
        async close(e=new w, n={}) {
            const {pendingAddFileCalls: r, writer: s} = this
              , {writable: o} = s;
            for (; r.size; )
                await y.allSettled(t.from(r));
            return await (async (e, n, r) => {
                const {files: s, writer: o} = e
                  , {diskOffset: c, writable: l} = o;
                let {diskNumber: u} = o
                  , f = 0
                  , p = 0
                  , h = e.offset - c
                  , g = s.size;
                for (const [,e] of s) {
                    const {rawFilename: t, rawExtraFieldZip64: n, rawExtraFieldAES: r, rawComment: s, rawExtraFieldNTFS: i, rawExtraField: o, extendedTimestamp: c, extraFieldExtendedTimestampFlag: l, lastModDate: u} = e;
                    let f;
                    if (c) {
                        f = new w(9);
                        const e = Ur(f);
                        Wr(e, 0, M),
                        Wr(e, 2, 5),
                        Rr(e, 4, l),
                        Er(e, 5, a.floor(u.getTime() / 1e3))
                    } else
                        f = new w;
                    e.rawExtraFieldCDExtendedTimestamp = f,
                    p += 46 + Ir(t, s, n, r, i, f, o)
                }
                const m = new w(p)
                  , y = Ur(m);
                await sn(o);
                let b = 0;
                for (const [e,n] of t.from(s.values()).entries()) {
                    const {offset: t, rawFilename: i, rawExtraFieldZip64: a, rawExtraFieldAES: c, rawExtraFieldCDExtendedTimestamp: u, rawExtraFieldNTFS: d, rawExtraField: w, rawComment: p, versionMadeBy: h, headerArray: g, zip64: S, zip64UncompressedSize: k, zip64CompressedSize: z, zip64DiskNumberStart: v, zip64Offset: x, internalFileAttributes: A, externalFileAttributes: C, diskNumberStart: _, uncompressedSize: D, compressedSize: F} = n
                      , R = Ir(a, c, u, d, w);
                    Er(y, f, N),
                    Wr(y, f + 4, h);
                    const W = Ur(g);
                    k || Er(W, 18, D),
                    z || Er(W, 14, F),
                    Lr(m, g, f + 6),
                    Wr(y, f + 30, R),
                    Wr(y, f + 32, Ir(p)),
                    Wr(y, f + 34, S && v ? T : _),
                    Wr(y, f + 36, A),
                    C && Er(y, f + 38, C),
                    Er(y, f + 42, S && x ? E : t),
                    Lr(m, i, f + 46),
                    Lr(m, a, f + 46 + Ir(i)),
                    Lr(m, c, f + 46 + Ir(i, a)),
                    Lr(m, u, f + 46 + Ir(i, a, c)),
                    Lr(m, d, f + 46 + Ir(i, a, c, u)),
                    Lr(m, w, f + 46 + Ir(i, a, c, u, d)),
                    Lr(m, p, f + 46 + Ir(i) + R);
                    const L = 46 + Ir(i, p) + R;
                    if (f - b > o.availableSize && (o.availableSize = 0,
                    await Cr(l, m.slice(b, f)),
                    b = f),
                    f += L,
                    r.onprogress)
                        try {
                            await r.onprogress(e + 1, s.size, new qn(n))
                        } catch (e) {}
                }
                await Cr(l, b ? m.slice(b) : m);
                let S = o.diskNumber;
                const {availableSize: k} = o;
                H > k && S++;
                let z = Dr(e, r, Rn);
                if (h > E || p > E || g > T || S > T) {
                    if (!1 === z)
                        throw new d(Sr);
                    z = !0
                }
                const v = new w(z ? 98 : H)
                  , x = Ur(v);
                f = 0,
                z && (Er(x, 0, O),
                Tr(x, 4, i(44)),
                Wr(x, 12, 45),
                Wr(x, 14, 45),
                Er(x, 16, S),
                Er(x, 20, u),
                Tr(x, 24, i(g)),
                Tr(x, 32, i(g)),
                Tr(x, 40, i(p)),
                Tr(x, 48, i(h)),
                Er(x, 56, P),
                Tr(x, 64, i(h) + i(p)),
                Er(x, 72, S + 1),
                Dr(e, r, "supportZip64SplitFile", !0) && (S = T,
                u = T),
                g = T,
                h = E,
                p = E,
                f += 76),
                Er(x, f, q),
                Wr(x, f + 4, S),
                Wr(x, f + 6, u),
                Wr(x, f + 8, g),
                Wr(x, f + 10, g),
                Er(x, f + 12, p),
                Er(x, f + 16, h);
                const A = Ir(n);
                if (A) {
                    if (A > T)
                        throw new d(wr);
                    Wr(x, f + 20, A)
                }
                await Cr(l, v),
                A && await Cr(l, n)
            }
            )(this, e, n),
            Dr(this, n, "preventClose") || await o.getWriter().close(),
            s.getData ? s.getData() : o
        }
    }
    async function Cr(e, t) {
        const n = e.getWriter();
        try {
            await n.ready,
            e.size += Ir(t),
            await n.write(t)
        } finally {
            n.releaseLock()
        }
    }
    function _r(e) {
        if (e)
            return (i(e.getTime()) + i(116444736e5)) * i(1e4)
    }
    function Dr(e, t, n, r) {
        const s = t[n] === G ? e.options[n] : t[n];
        return s === G ? r : s
    }
    function Fr(e) {
        return e + 5 * (a.floor(e / 16383) + 1)
    }
    function Rr(e, t, n) {
        e.setUint8(t, n)
    }
    function Wr(e, t, n) {
        e.setUint16(t, n, !0)
    }
    function Er(e, t, n) {
        e.setUint32(t, n, !0)
    }
    function Tr(e, t, n) {
        e.setBigUint64(t, n, !0)
    }
    function Lr(e, t, n) {
        e.set(t, n)
    }
    function Ur(e) {
        return new g(e.buffer)
    }
    function Ir(...e) {
        let t = 0;
        return e.forEach((e => e && (t += e.length))),
        t
    }
    let Nr;
    try {
        Nr = void 0 === k && "undefined" == typeof location ? require("url").pathToFileURL(__filename).href : void 0 === k ? location.href : W && "SCRIPT" === W.tagName.toUpperCase() && W.src || new f("zip.min.js",k.baseURI).href
    } catch (e) {}
    ne({
        baseURL: Nr
    }),
    ( (e, t={}) => {
        const n = 'const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self,k=void 0,v="undefined",S="function";class z{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const C=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;C[e]=t}class x{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^C[255&(t^e[n])];this.t=t}get(){return~this.t}}class A extends p{constructor(){let e;const t=new x;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const _={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=_.i(n);return 32===r?e.concat(t):_.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+_.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=_.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=_.i(s);return r.push(_.h(t+i&31,t+i>32?n:r.pop(),1)),r}},I={bytes:{p(e){const t=_.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)3&s||(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},m(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3&~n||(t.push(r),r=0);return 3&n&&t.push(_.h(8*(3&n),r)),t}}},P=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t.A=e.A):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e.A=0,e}update(e){const t=this;"string"==typeof e&&(e=I._.m(e));const n=t.C=_.concat(t.C,e),r=t.A,i=t.A=r+_.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}P(){const e=this;let t=e.C;const n=e.S;t=_.concat(t,[_.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e.A/4294967296)),t.push(0|e.A);t.length;)e.I(t.splice(0,16));return e.reset(),n}D(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}V(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.V(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.V(5,o)+n.D(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.V(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},D={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},V={importKey:e=>new V.R(I.bytes.m(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=_;for(t=I.bytes.m(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=P,r=[[],[]];t.U=[new n,new n];const s=t.U[0].blockSize/32;e.length>s&&(e=(new n).update(e).P());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.U[0].update(r[0]),t.U[1].update(r[1]),t.K=new n(t.U[0])}reset(){const e=this;e.K=new e.M(e.U[0]),e.N=!1}update(e){this.N=!0,this.K.update(e)}digest(){const e=this,t=e.K.P(),n=new e.M(e.U[1]).update(t).P();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},R=typeof h!=v&&typeof h.getRandomValues==S,B="Invalid password",E="Invalid signature",M="zipjs-abort-check-password";function U(e){return R?h.getRandomValues(e):D.getRandomValues(e)}const K=16,N={name:"PBKDF2"},O=t.assign({hash:{name:"HMAC"}},N),T=t.assign({iterations:1e3,hash:{name:"SHA-1"}},N),W=["deriveBits"],j=[8,12,16],H=[16,24,32],L=10,F=[0,0,0,0],q=typeof h!=v,G=q&&h.subtle,J=q&&typeof G!=v,Q=I.bytes,X=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i===0||8===i&&o%i===4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i===0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},Y=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255&~(e>>24))e+=1<<24;else{let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=_.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return _.u(t,s)}},Z=V.R;let $=q&&J&&typeof G.importKey==S,ee=q&&J&&typeof G.deriveBits==S;class te extends p{constructor({password:e,rawPassword:n,signed:r,encryptionStrength:o,checkPasswordOnly:c}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:ie(e,n),signed:r,X:o-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:o,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await se(e,t,n,ce(r,0,j[t])),o=ce(r,j[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(B)})(n,o,r,ce(e,0,j[o]+2)),e=ce(e,j[o]+2),c?t.error(new s(M)):f()):await a;const l=new i(e.length-L-(e.length-L)%K);t.enqueue(re(n,e,l,0,L,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ce(o,0,o.length-L),a=ce(o,o.length-L);let l=new i;if(f.length){const e=ae(Q,f);r.update(e);const t=n.update(e);l=fe(Q,t)}if(t){const e=ce(fe(Q,r.digest()),0,L);for(let t=0;L>t;t++)if(e[t]!=a[t])throw new s(E)}e.enqueue(l)}}})}}class ne extends p{constructor({password:e,rawPassword:n,encryptionStrength:r}){let s;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:ie(e,n),X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=U(new i(j[t]));return oe(r,await se(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%K);a.set(f,0),t.enqueue(re(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:r,ready:o}=this;if(n&&t){await o;let c=new i;if(r.length){const e=t.update(ae(Q,r));n.update(e),c=fe(Q,e)}s.signature=fe(Q,n.digest()).slice(0,L),e.enqueue(oe(c,s.signature))}}}),s=this}}function re(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=oe(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%K)),u=0;l-K>=u;u+=K){const e=ae(Q,ce(t,u,u+K));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(fe(Q,s),u+r)}return e.pending=ce(t,u),n}async function se(n,r,s,o){n.password=null;const c=await(async(e,t,n,r,s)=>{if(!$)return V.importKey(t);try{return await G.importKey("raw",t,n,!1,s)}catch(e){return $=!1,V.importKey(t)}})(0,s,O,0,W),f=await(async(e,t,n)=>{if(!ee)return V.B(t,e.salt,T.iterations,n);try{return await G.deriveBits(e,t,n)}catch(r){return ee=!1,V.B(t,e.salt,T.iterations,n)}})(t.assign({salt:o},T),c,8*(2*H[r]+2)),a=new i(f),l=ae(Q,ce(a,0,H[r])),u=ae(Q,ce(a,H[r],2*H[r])),w=ce(a,2*H[r]);return t.assign(n,{keys:{key:l,$:u,passwordVerification:w},Y:new Y(new X(l),e.from(F)),Z:new Z(u)}),w}function ie(e,t){return t===k?(e=>{if(typeof w==v){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(e):t}function oe(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ce(e,t,n){return e.subarray(t,n)}function fe(e,t){return e.p(t)}function ae(e,t){return e.m(t)}class le extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;if(n.password){const t=we(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(B);e=e.subarray(12)}r?t.error(new s(M)):t.enqueue(we(n,e))}})}}class ue extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),de(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=U(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(he(n,t),0),s=12}else r=new i(e.length),s=0;r.set(he(n,e),s),t.enqueue(r)}})}}function we(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,n[r]);return n}function he(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=ye(e)^t[r],pe(e,t[r]);return n}function de(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new x(r[0]),te:new x(r[2])});for(let t=0;t<n.length;t++)pe(e,n.charCodeAt(t))}function pe(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=be(r.imul(be(s+me(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function ye(e){const t=2|e.keys[2];return me(r.imul(t,1^t)>>>8)}function me(e){return 255&e}function be(e){return 4294967295&e}const ge="deflate-raw";class ke extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=Se(super.readable);i&&!c||!f||(w=new A,d=xe(d,w)),s&&(d=Ce(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=xe(d,new ue(e)):(h=new ne(e),d=xe(d,h))),ze(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ve extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=Se(super.readable);o&&(i?d=xe(d,new le(e)):(h=new te(e),d=xe(d,h))),a&&(d=Ce(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new A,d=xe(d,w)),ze(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(E)}}))}}function Se(e){return xe(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ze(e,n,r){n=xe(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Ce(e,t,n,r,s){try{e=xe(e,new(t&&r?r:s)(ge,n))}catch(r){if(!t)return e;try{e=xe(e,new s(ge,n))}catch(t){return e}}return e}function xe(e,t){return e.pipeThrough(t)}const Ae="data",_e="close";class Ie extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=ke:s.startsWith("inflate")&&(i=ve);let o=0,c=0;const f=new i(e,n),a=super.readable,l=new p({transform(e,t){e&&e.length&&(c+=e.length,t.enqueue(e))},flush(){t.assign(r,{inputSize:c})}}),u=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=f;t.assign(r,{signature:e,outputSize:o,inputSize:c})}});t.defineProperty(r,"readable",{get:()=>a.pipeThrough(l).pipeThrough(f).pipeThrough(u)})}}class Pe extends p{constructor(e){let t;super({transform:function n(r,s){if(t){const e=new i(t.length+r.length);e.set(t),e.set(r,t.length),r=e,t=null}r.length>e?(s.enqueue(r.slice(0,e)),n(r.slice(e),s)):t=r},flush(e){t&&t.length&&e.enqueue(t)}})}}const De=new a,Ve=new a;let Re,Be=0,Ee=!0;async function Me(e){try{const{options:t,scripts:r,config:s}=e;if(r&&r.length)try{Ee?importScripts.apply(k,r):await Ue(r)}catch(e){Ee=!1,await Ue(r)}self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new z(self.Deflate)),self.Inflate&&(s.DecompressionStream=new z(self.Inflate));const i={highWaterMark:1},o=e.readable||new y({async pull(e){const t=new u((e=>De.set(Be,e)));Ke({type:"pull",messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ve.set(Be,t),Ke({type:Ae,value:e,messageId:Be}),Be=(Be+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new Ie(t,s);Re=new AbortController;const{signal:a}=Re;await o.pipeThrough(f).pipeThrough(new Pe(s.chunkSize)).pipeTo(c,{signal:a,preventClose:!0,preventAbort:!0}),await c.getWriter().close();const{signature:l,inputSize:w,outputSize:h}=f;Ke({type:_e,result:{signature:l,inputSize:w,outputSize:h}})}catch(e){Ne(e)}}async function Ue(e){for(const t of e)await import(t)}function Ke(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Ne(e=new s("Unknown error")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&Me(e),t==Ae){const e=De.get(n);De.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ve.get(n);Ve.delete(n),e()}t==_e&&Re.abort()}catch(e){Ne(e)}}));const Oe=-2;function Te(t){return We(t.map((([t,n])=>new e(t).fill(n,0,t))))}function We(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?We(n):n)),[])}const je=[0,1,2,3].concat(...Te([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function He(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Le(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}He.ge=[0,1,2,3,4,5,6,7].concat(...Te([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),He.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],He.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],He.Se=e=>256>e?je[e]:je[256+(e>>>7)],He.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],He.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],He.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],He.Ae=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Fe=Te([[144,8],[112,9],[24,7],[8,8]]);Le._e=We([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Fe[t]])));const qe=Te([[30,5]]);function Ge(e,t,n,r,s){const i=this;i.Ie=e,i.Pe=t,i.De=n,i.Ve=r,i.Re=s}Le.Be=We([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,qe[t]]))),Le.Ee=new Le(Le._e,He.ze,257,286,15),Le.Me=new Le(Le.Be,He.Ce,0,30,15),Le.Ue=new Le(null,He.xe,0,19,7);const Je=[new Ge(0,0,0,0,0),new Ge(4,4,8,4,1),new Ge(4,5,16,8,1),new Ge(4,6,32,32,1),new Ge(4,4,16,16,2),new Ge(8,16,32,32,2),new Ge(8,16,128,128,2),new Ge(8,32,128,256,2),new Ge(32,128,258,1024,2),new Ge(32,258,258,4096,2)],Qe=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],Xe=113,Ye=666,Ze=262;function $e(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function et(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,A,_,I,P,D,V,R,B,E,M,U;const K=new He,N=new He,O=new He;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ke[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!==--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(He.ge[n]+256+1)]++,M[2*He.Se(t)]++),!(8191&W)&&D>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+He.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=He.ge[s],Y(i+256+1,t),o=He.ze[i],0!==o&&(s-=He.ke[i],X(s,o)),r--,i=He.Se(r),Y(i,n),o=He.Ce[i],0!==o&&(r-=He.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ke.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;D>0?(K.ne(e),N.ne(e),o=(()=>{let t;for(G(E,K.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===U[2*He.Ae[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Le._e,Le.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*He.Ae[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-A-C,0===s&&0===C&&0===A)s=f;else if(-1==s)s--;else if(C>=f+f-Ze){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!==--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!==--e);s+=f}if(0===t.We)return;e=t.je(u,C+A,s),A+=e,3>A||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Ze>A&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=_;const o=C>f-Ze?C-(f-Ze):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>_||(r>>=2),c>A&&(c=A);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!==--r);return i>A?A:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],U=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&$e(t,r[i+1],r[i],e.le)&&i++,!$e(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Oe:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ke=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),D=S,V=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=Xe,c=0,K.re=E,K.ie=Le.Ee,N.re=M,N.ie=Le.Me,O.re=U,O.ie=Le.Ue,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;P=Je[D].Pe,R=Je[D].Ie,B=Je[D].De,I=Je[D].Ve,C=0,k=0,A=0,v=_=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=Xe&&n!=Ye?Oe:(e.Oe=null,e.Ne=null,e.Ke=null,d=null,h=null,u=null,e.Fe=null,n==Xe?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Oe:(Je[D].Re!=Je[t].Re&&0!==e.qe&&(r=e.Ye(1)),D!=t&&(D=t,P=Je[D].Pe,R=Je[D].Ie,B=Je[D].De,I=Je[D].Ve),V=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Oe;if(3>i)return 0;for(i>f-Ze&&(i=f-Ze,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Oe;if(!r.$e||!r.et&&0!==r.We||n==Ye&&4!=i)return r.Le=Qe[4],Oe;if(0===r.tt)return r.Le=Qe[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(D-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=Xe,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=Qe[7],-5;if(n==Ye&&0!==t.We)return r.Le=Qe[7],-5;if(0!==t.We||0!==A||0!=i&&n!=Ye){switch(R=-1,Je[D].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=A){if(ie(),0===A&&0==e)return 0;if(0===A)break}if(C+=A,A=0,n=k+r,(0===C||C>=n)&&(A=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Ze&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Ze||2!=V&&(v=oe(r)),3>v)n=ee(0,255&u[C]),A--,C++;else if(n=ee(C-x,v-3),A-=v,v>P||3>A)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!==--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Ze>A){if(ie(),Ze>A&&0==e)return 0;if(0===A)break}if(3>A||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),_=v,S=x,v=2,0!==s&&P>_&&f-Ze>=(C-s&65535)&&(2!=V&&(v=oe(s)),5>=v&&(1==V||3==v&&C-x>4096)&&(v=2)),3>_||v>_)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,A--,0===t.tt)return 0}else z=1,C++,A--;else{r=C+A-3,n=ee(C-1-S,_-3),A-=_-1,_-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!==--_);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Ye),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Le._e),$(),9>1+H+10-F&&(X(2,3),Y(256,Le._e),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function tt(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function nt(e){const t=new tt,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}tt.prototype={He(e,t){const n=this;return n.Fe=new et,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Oe},Qe(){const e=this;if(!e.Fe)return Oe;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Oe},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Oe},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ke.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const rt=-2,st=-3,it=-5,ot=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],ct=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],ft=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],at=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],lt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],ut=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],wt=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ht(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,A,_,I,P;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return st;if(0>(I-=n[g]))return st;for(n[g]+=I,i[1]=k=0,C=1,_=2;0!==--g;)i[_]=k+=n[C],_++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,A=-S,s[0]=0,x=0,P=0;m>=v;v++)for(p=n[v];0!==p--;){for(;v>A+S;){if(b++,A+=S,P=m-A,P=P>S?S:P,(y=1<<(k=v-A))>p+1&&(y-=p+1,_=v,P>k))for(;++k<P&&(y<<=1)>n[++_];)y-=n[_];if(P=1<<k,h[0]+P>1440)return st;s[b]=x=h[0],h[0]+=P,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>A-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-A,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-A,k=g>>>A;P>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!==(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<A)-1;(g&z)!=i[b];)b--,A-=S,z=(1<<A)-1}return 0!==I&&1!=m?it:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==st?f.Le="oversubscribed dynamic bit lengths tree":a!=it&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=st),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,at,lt,a,i,u,e,t),0!=h||0===i[0]?(h==st?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=st),h):(c(288),h=o(s,n,r,0,ut,wt,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==st?w.Le="oversubscribed distance tree":h==it?(w.Le="incomplete distance tree",h=st):-4!=h&&(w.Le="empty distance tree with lengths",h=st),h):0)}}function dt(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=ot[e],g=ot[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15,k=a[z+2]+(w&ot[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],16&u){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&ot[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!==--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!==--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(64&u)return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,st;f+=a[z+2],f+=w&ot[u],z=3*(l+f),u=a[z]}break}if(64&u)return 32&u?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,st);if(f+=a[z+2],f+=w&ot[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,A=0,_=0;for(_=y.nt,v=y.We,x=e.ot,A=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,m=p(u,w,r,h,s,d,e,y),_=y.nt,v=y.We,x=e.ot,A=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>>=n[g+1],A-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(16&k){a=15&k,i=n[g+2],t=2;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}if(32&k){t=7;break}return t=9,y.Le="invalid literal/length code",m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 2:for(b=a;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}i+=x&ot[b],x>>=b,A-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}if(g=3*(o+(x&ot[b])),x>>=n[g+1],A-=n[g+1],k=n[g],16&k){a=15&k,l=n[g+2],t=4;break}if(!(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 4:for(b=a;b>A;){if(0===v)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(_++))<<A,A+=8}l+=x&ot[b],x>>=b,A-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(A>7&&(A-=8,v++,_--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);case 9:return m=st,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m);default:return m=rt,e.ot=x,e.ct=A,y.We=v,y.qe+=_-y.nt,y.nt=_,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ht.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=ct,r[0]=ft,0);const pt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function yt(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new dt;let h=0,d=new f(4320);const p=new ht;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==it&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==it&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,A,_,I,P;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ht.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!==(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[pt[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[pt[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==st&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&ot[i]))+1],w=d[3*(u[0]+(f&ot[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&ot[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!==--o);a=v}}if(u[0]=-1,A=[],_=[],I=[],P=[],A[0]=9,_[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,A,_,I,P,d,e),0!=i)return i==st&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(A[0],_[0],d,I[0],d,P[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=st,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=rt,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const mt=13,bt=[0,0,255,255];function gt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):rt}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),rt):(e.zt=r,n.gt.kt=new yt(n,1<<r),t(n),0)),e.At=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return rt;const s=e.gt;for(t=4==t?it:0,n=it;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=mt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=mt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=mt,e.Le="incorrect header check",s.marker=5;break}if(!(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=mt,e.Le="need dictionary",s.marker=0,rt;case 7:if(n=s.kt.ut(e,n),n==st){s.mode=mt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case mt:return st;default:return rt}},e._t=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return rt;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return rt;const c=e.gt;if(c.mode!=mt&&(c.mode=mt,c.marker=0),0===(n=e.We))return it;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==bt[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?st:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Pt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():rt}function kt(){}function vt(e){const t=new kt,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t.At(0),c&&a===it){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}kt.prototype={xt(e){const t=this;return t.gt=new gt,e||(e=15),t.gt.xt(t,e)},At(e){const t=this;return t.gt?t.gt.At(t,e):rt},Ct(){const e=this;if(!e.gt)return rt;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):rt},_t(e,t){const n=this;return n.gt?n.gt._t(n,e,t):rt},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=nt,self.Inflate=vt};\n'
          , r = () => t.useDataURI ? "data:text/javascript," + encodeURIComponent(n) : f.createObjectURL(new m([n],{
            type: "text/javascript"
        }));
        e({
            workerScripts: {
                inflate: [r],
                deflate: [r]
            }
        })
    }
    )(ne),
    e.BlobReader = Pt,
    e.BlobWriter = Ht,
    e.Data64URIReader = class extends qt {
        constructor(e) {
            super();
            let t = e.length;
            for (; "=" == e.charAt(t - 1); )
                t--;
            const r = e.indexOf(",") + 1;
            n.assign(this, {
                dataURI: e,
                dataStart: r,
                size: a.floor(.75 * (t - r))
            })
        }
        readUint8Array(e, t) {
            const {dataStart: n, dataURI: r} = this
              , s = new w(t)
              , i = 4 * a.floor(e / 3)
              , o = atob(r.substring(i + n, 4 * a.ceil((e + t) / 3) + n))
              , c = e - 3 * a.floor(i / 4);
            for (let e = c; c + t > e; e++)
                s[e - c] = o.charCodeAt(e);
            return s
        }
    }
    ,
    e.Data64URIWriter = class extends Ot {
        constructor(e) {
            super(),
            n.assign(this, {
                data: "data:" + (e || "") + ";base64,",
                pending: []
            })
        }
        writeUint8Array(e) {
            const t = this;
            let n = 0
              , s = t.pending;
            const i = t.pending.length;
            for (t.pending = "",
            n = 0; n < 3 * a.floor((i + e.length) / 3) - i; n++)
                s += r.fromCharCode(e[n]);
            for (; n < e.length; n++)
                t.pending += r.fromCharCode(e[n]);
            s.length > 2 ? t.data += v(s) : t.pending = s
        }
        getData() {
            return this.data + v(this.pending)
        }
    }
    ,
    e.ERR_BAD_FORMAT = On,
    e.ERR_CENTRAL_DIRECTORY_NOT_FOUND = Mn,
    e.ERR_DUPLICATED_NAME = dr,
    e.ERR_ENCRYPTED = Zn,
    e.ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND = Hn,
    e.ERR_EOCDR_NOT_FOUND = Pn,
    e.ERR_EXTRAFIELD_ZIP64_NOT_FOUND = Vn,
    e.ERR_HTTP_RANGE = Ft,
    e.ERR_INVALID_COMMENT = wr,
    e.ERR_INVALID_ENCRYPTION_STRENGTH = mr,
    e.ERR_INVALID_ENTRY_COMMENT = pr,
    e.ERR_INVALID_ENTRY_NAME = hr,
    e.ERR_INVALID_EXTRAFIELD_DATA = br,
    e.ERR_INVALID_EXTRAFIELD_TYPE = yr,
    e.ERR_INVALID_PASSWORD = he,
    e.ERR_INVALID_SIGNATURE = ge,
    e.ERR_INVALID_VERSION = gr,
    e.ERR_ITERATOR_COMPLETED_TOO_SOON = Rt,
    e.ERR_LOCAL_FILE_HEADER_NOT_FOUND = Bn,
    e.ERR_SPLIT_ZIP_FILE = Xn,
    e.ERR_UNDEFINED_UNCOMPRESSED_SIZE = kr,
    e.ERR_UNSUPPORTED_COMPRESSION = Gn,
    e.ERR_UNSUPPORTED_ENCRYPTION = Kn,
    e.ERR_UNSUPPORTED_FORMAT = Sr,
    e.ERR_WRITER_NOT_INITIALIZED = Wt,
    e.HttpRangeReader = class extends tn {
        constructor(e, t={}) {
            t.useRangeHeader = !0,
            super(e, t)
        }
    }
    ,
    e.HttpReader = tn,
    e.Reader = qt,
    e.SplitDataReader = nn,
    e.SplitDataWriter = rn,
    e.SplitZipReader = ln,
    e.SplitZipWriter = un,
    e.TextReader = class extends Pt {
        constructor(e) {
            super(new m([e],{
                type: "text/plain"
            }))
        }
    }
    ,
    e.TextWriter = class extends Ht {
        constructor(e) {
            super(e),
            n.assign(this, {
                encoding: e,
                utf8: !e || "utf-8" == e.toLowerCase()
            })
        }
        async getData() {
            const {encoding: e, utf8: t} = this
              , r = await super.getData();
            if (r.text && t)
                return r.text();
            {
                const t = new FileReader;
                return new y(( (s, i) => {
                    n.assign(t, {
                        onload: ({target: e}) => s(e.result),
                        onerror: () => i(t.error)
                    }),
                    t.readAsText(r, e)
                }
                ))
            }
        }
    }
    ,
    e.Uint8ArrayReader = class extends qt {
        constructor(e) {
            super(),
            n.assign(this, {
                array: e,
                size: e.length
            })
        }
        readUint8Array(e, t) {
            return this.array.slice(e, e + t)
        }
    }
    ,
    e.Uint8ArrayWriter = class extends Ot {
        init(e=0) {
            n.assign(this, {
                offset: 0,
                array: new w(e)
            }),
            super.init()
        }
        writeUint8Array(e) {
            const t = this;
            if (t.offset + e.length > t.array.length) {
                const n = t.array;
                t.array = new w(n.length + e.length),
                t.array.set(n)
            }
            t.array.set(e, t.offset),
            t.offset += e.length
        }
        getData() {
            return this.array
        }
    }
    ,
    e.Writer = Ot,
    e.ZipReader = $n,
    e.ZipReaderStream = class {
        constructor(e={}) {
            const {readable: t, writable: n} = new x
              , r = new $n(t,e).getEntriesGenerator();
            this.readable = new A({
                async pull(e) {
                    const {done: t, value: n} = await r.next();
                    if (t)
                        return e.close();
                    const s = {
                        ...n,
                        readable: ( () => {
                            const {readable: e, writable: t} = new x;
                            if (n.getData)
                                return n.getData(t),
                                e
                        }
                        )()
                    };
                    delete s.getData,
                    e.enqueue(s)
                }
            }),
            this.writable = n
        }
    }
    ,
    e.ZipWriter = Ar,
    e.ZipWriterStream = class {
        constructor(e={}) {
            const {readable: t, writable: n} = new x;
            this.readable = t,
            this.zipWriter = new Ar(n,e)
        }
        transform(e) {
            const {readable: t, writable: n} = new x({
                flush: () => {
                    this.zipWriter.close()
                }
            });
            return this.zipWriter.add(e, t),
            {
                readable: this.readable,
                writable: n
            }
        }
        writable(e) {
            const {readable: t, writable: n} = new x;
            return this.zipWriter.add(e, t),
            n
        }
        close(e, t={}) {
            return this.zipWriter.close(e, t)
        }
    }
    ,
    e.configure = ne,
    e.getMimeType = () => "application/octet-stream",
    e.initReader = an,
    e.initShimAsyncCodec = (e, t={}, n) => ({
        Deflate: se(e.Deflate, t.deflate, n),
        Inflate: se(e.Inflate, t.inflate, n)
    }),
    e.initStream = sn,
    e.initWriter = on,
    e.readUint8Array = cn,
    e.terminateWorkers = async () => {
        await y.allSettled(vt.map((e => (_t(e),
        e.terminate()))))
    }
}
));

jspdf.umd.min.js:
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.789Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */

!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = t || self).jspdf = {})
}(this, (function(t) {
    "use strict";
    function e(t) {
        return (e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
            return typeof t
        }
        : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
        }
        )(t)
    }
    var r = function() {
        return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this
    }();
    function n() {
        r.console && "function" == typeof r.console.log && r.console.log.apply(r.console, arguments)
    }
    var i = {
        log: n,
        warn: function(t) {
            r.console && ("function" == typeof r.console.warn ? r.console.warn.apply(r.console, arguments) : n.call(null, arguments))
        },
        error: function(t) {
            r.console && ("function" == typeof r.console.error ? r.console.error.apply(r.console, arguments) : n(t))
        }
    };
    function a(t, e, r) {
        var n = new XMLHttpRequest;
        n.open("GET", t),
        n.responseType = "blob",
        n.onload = function() {
            l(n.response, e, r)
        }
        ,
        n.onerror = function() {
            i.error("could not download file")
        }
        ,
        n.send()
    }
    function o(t) {
        var e = new XMLHttpRequest;
        e.open("HEAD", t, !1);
        try {
            e.send()
        } catch (t) {}
        return e.status >= 200 && e.status <= 299
    }
    function s(t) {
        try {
            t.dispatchEvent(new MouseEvent("click"))
        } catch (r) {
            var e = document.createEvent("MouseEvents");
            e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null),
            t.dispatchEvent(e)
        }
    }
    var c, u, l = r.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : e(window)) || window !== r ? function() {}
    : "undefined" != typeof HTMLAnchorElement && "download"in HTMLAnchorElement.prototype ? function(t, e, n) {
        var i = r.URL || r.webkitURL
          , c = document.createElement("a");
        e = e || t.name || "download",
        c.download = e,
        c.rel = "noopener",
        "string" == typeof t ? (c.href = t,
        c.origin !== location.origin ? o(c.href) ? a(t, e, n) : s(c, c.target = "_blank") : s(c)) : (c.href = i.createObjectURL(t),
        setTimeout((function() {
            i.revokeObjectURL(c.href)
        }
        ), 4e4),
        setTimeout((function() {
            s(c)
        }
        ), 0))
    }
    : "msSaveOrOpenBlob"in navigator ? function(t, r, n) {
        if (r = r || t.name || "download",
        "string" == typeof t)
            if (o(t))
                a(t, r, n);
            else {
                var c = document.createElement("a");
                c.href = t,
                c.target = "_blank",
                setTimeout((function() {
                    s(c)
                }
                ))
            }
        else
            navigator.msSaveOrOpenBlob(function(t, r) {
                return void 0 === r ? r = {
                    autoBom: !1
                } : "object" !== e(r) && (i.warn("Deprecated: Expected third argument to be a object"),
                r = {
                    autoBom: !r
                }),
                r.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type) ? new Blob([String.fromCharCode(65279), t],{
                    type: t.type
                }) : t
            }(t, n), r)
    }
    : function(t, n, i, o) {
        if ((o = o || open("", "_blank")) && (o.document.title = o.document.body.innerText = "downloading..."),
        "string" == typeof t)
            return a(t, n, i);
        var s = "application/octet-stream" === t.type
          , c = /constructor/i.test(r.HTMLElement) || r.safari
          , u = /CriOS\/[\d]+/.test(navigator.userAgent);
        if ((u || s && c) && "object" === ("undefined" == typeof FileReader ? "undefined" : e(FileReader))) {
            var l = new FileReader;
            l.onloadend = function() {
                var t = l.result;
                t = u ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"),
                o ? o.location.href = t : location = t,
                o = null
            }
            ,
            l.readAsDataURL(t)
        } else {
            var h = r.URL || r.webkitURL
              , f = h.createObjectURL(t);
            o ? o.location = f : location.href = f,
            o = null,
            setTimeout((function() {
                h.revokeObjectURL(f)
            }
            ), 4e4)
        }
    }
    );
    /**
   * A class to parse color values
   * @author Stoyan Stefanov <sstoo@gmail.com>
   * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
   * @license Use it if you like it
   */
    function h(t) {
        var e;
        t = t || "",
        this.ok = !1,
        "#" == t.charAt(0) && (t = t.substr(1, 6));
        t = {
            aliceblue: "f0f8ff",
            antiquewhite: "faebd7",
            aqua: "00ffff",
            aquamarine: "7fffd4",
            azure: "f0ffff",
            beige: "f5f5dc",
            bisque: "ffe4c4",
            black: "000000",
            blanchedalmond: "ffebcd",
            blue: "0000ff",
            blueviolet: "8a2be2",
            brown: "a52a2a",
            burlywood: "deb887",
            cadetblue: "5f9ea0",
            chartreuse: "7fff00",
            chocolate: "d2691e",
            coral: "ff7f50",
            cornflowerblue: "6495ed",
            cornsilk: "fff8dc",
            crimson: "dc143c",
            cyan: "00ffff",
            darkblue: "00008b",
            darkcyan: "008b8b",
            darkgoldenrod: "b8860b",
            darkgray: "a9a9a9",
            darkgreen: "006400",
            darkkhaki: "bdb76b",
            darkmagenta: "8b008b",
            darkolivegreen: "556b2f",
            darkorange: "ff8c00",
            darkorchid: "9932cc",
            darkred: "8b0000",
            darksalmon: "e9967a",
            darkseagreen: "8fbc8f",
            darkslateblue: "483d8b",
            darkslategray: "2f4f4f",
            darkturquoise: "00ced1",
            darkviolet: "9400d3",
            deeppink: "ff1493",
            deepskyblue: "00bfff",
            dimgray: "696969",
            dodgerblue: "1e90ff",
            feldspar: "d19275",
            firebrick: "b22222",
            floralwhite: "fffaf0",
            forestgreen: "228b22",
            fuchsia: "ff00ff",
            gainsboro: "dcdcdc",
            ghostwhite: "f8f8ff",
            gold: "ffd700",
            goldenrod: "daa520",
            gray: "808080",
            green: "008000",
            greenyellow: "adff2f",
            honeydew: "f0fff0",
            hotpink: "ff69b4",
            indianred: "cd5c5c",
            indigo: "4b0082",
            ivory: "fffff0",
            khaki: "f0e68c",
            lavender: "e6e6fa",
            lavenderblush: "fff0f5",
            lawngreen: "7cfc00",
            lemonchiffon: "fffacd",
            lightblue: "add8e6",
            lightcoral: "f08080",
            lightcyan: "e0ffff",
            lightgoldenrodyellow: "fafad2",
            lightgrey: "d3d3d3",
            lightgreen: "90ee90",
            lightpink: "ffb6c1",
            lightsalmon: "ffa07a",
            lightseagreen: "20b2aa",
            lightskyblue: "87cefa",
            lightslateblue: "8470ff",
            lightslategray: "778899",
            lightsteelblue: "b0c4de",
            lightyellow: "ffffe0",
            lime: "00ff00",
            limegreen: "32cd32",
            linen: "faf0e6",
            magenta: "ff00ff",
            maroon: "800000",
            mediumaquamarine: "66cdaa",
            mediumblue: "0000cd",
            mediumorchid: "ba55d3",
            mediumpurple: "9370d8",
            mediumseagreen: "3cb371",
            mediumslateblue: "7b68ee",
            mediumspringgreen: "00fa9a",
            mediumturquoise: "48d1cc",
            mediumvioletred: "c71585",
            midnightblue: "191970",
            mintcream: "f5fffa",
            mistyrose: "ffe4e1",
            moccasin: "ffe4b5",
            navajowhite: "ffdead",
            navy: "000080",
            oldlace: "fdf5e6",
            olive: "808000",
            olivedrab: "6b8e23",
            orange: "ffa500",
            orangered: "ff4500",
            orchid: "da70d6",
            palegoldenrod: "eee8aa",
            palegreen: "98fb98",
            paleturquoise: "afeeee",
            palevioletred: "d87093",
            papayawhip: "ffefd5",
            peachpuff: "ffdab9",
            peru: "cd853f",
            pink: "ffc0cb",
            plum: "dda0dd",
            powderblue: "b0e0e6",
            purple: "800080",
            red: "ff0000",
            rosybrown: "bc8f8f",
            royalblue: "4169e1",
            saddlebrown: "8b4513",
            salmon: "fa8072",
            sandybrown: "f4a460",
            seagreen: "2e8b57",
            seashell: "fff5ee",
            sienna: "a0522d",
            silver: "c0c0c0",
            skyblue: "87ceeb",
            slateblue: "6a5acd",
            slategray: "708090",
            snow: "fffafa",
            springgreen: "00ff7f",
            steelblue: "4682b4",
            tan: "d2b48c",
            teal: "008080",
            thistle: "d8bfd8",
            tomato: "ff6347",
            turquoise: "40e0d0",
            violet: "ee82ee",
            violetred: "d02090",
            wheat: "f5deb3",
            white: "ffffff",
            whitesmoke: "f5f5f5",
            yellow: "ffff00",
            yellowgreen: "9acd32"
        }[t = (t = t.replace(/ /g, "")).toLowerCase()] || t;
        for (var r = [{
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
            process: function(t) {
                return [parseInt(t[1]), parseInt(t[2]), parseInt(t[3])]
            }
        }, {
            re: /^(\w{2})(\w{2})(\w{2})$/,
            example: ["#00ff00", "336699"],
            process: function(t) {
                return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)]
            }
        }, {
            re: /^(\w{1})(\w{1})(\w{1})$/,
            example: ["#fb0", "f0f"],
            process: function(t) {
                return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)]
            }
        }], n = 0; n < r.length; n++) {
            var i = r[n].re
              , a = r[n].process
              , o = i.exec(t);
            o && (e = a(o),
            this.r = e[0],
            this.g = e[1],
            this.b = e[2],
            this.ok = !0)
        }
        this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r,
        this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g,
        this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b,
        this.toRGB = function() {
            return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")"
        }
        ,
        this.toHex = function() {
            var t = this.r.toString(16)
              , e = this.g.toString(16)
              , r = this.b.toString(16);
            return 1 == t.length && (t = "0" + t),
            1 == e.length && (e = "0" + e),
            1 == r.length && (r = "0" + r),
            "#" + t + e + r
        }
    }
    /**
   * @license
   * Joseph Myers does not specify a particular license for his work.
   *
   * Author: Joseph Myers
   * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
   *
   * Modified by: Owen Leong
   */
    function f(t, e) {
        var r = t[0]
          , n = t[1]
          , i = t[2]
          , a = t[3];
        r = p(r, n, i, a, e[0], 7, -680876936),
        a = p(a, r, n, i, e[1], 12, -389564586),
        i = p(i, a, r, n, e[2], 17, 606105819),
        n = p(n, i, a, r, e[3], 22, -1044525330),
        r = p(r, n, i, a, e[4], 7, -176418897),
        a = p(a, r, n, i, e[5], 12, 1200080426),
        i = p(i, a, r, n, e[6], 17, -1473231341),
        n = p(n, i, a, r, e[7], 22, -45705983),
        r = p(r, n, i, a, e[8], 7, 1770035416),
        a = p(a, r, n, i, e[9], 12, -1958414417),
        i = p(i, a, r, n, e[10], 17, -42063),
        n = p(n, i, a, r, e[11], 22, -1990404162),
        r = p(r, n, i, a, e[12], 7, 1804603682),
        a = p(a, r, n, i, e[13], 12, -40341101),
        i = p(i, a, r, n, e[14], 17, -1502002290),
        r = g(r, n = p(n, i, a, r, e[15], 22, 1236535329), i, a, e[1], 5, -165796510),
        a = g(a, r, n, i, e[6], 9, -1069501632),
        i = g(i, a, r, n, e[11], 14, 643717713),
        n = g(n, i, a, r, e[0], 20, -373897302),
        r = g(r, n, i, a, e[5], 5, -701558691),
        a = g(a, r, n, i, e[10], 9, 38016083),
        i = g(i, a, r, n, e[15], 14, -660478335),
        n = g(n, i, a, r, e[4], 20, -405537848),
        r = g(r, n, i, a, e[9], 5, 568446438),
        a = g(a, r, n, i, e[14], 9, -1019803690),
        i = g(i, a, r, n, e[3], 14, -187363961),
        n = g(n, i, a, r, e[8], 20, 1163531501),
        r = g(r, n, i, a, e[13], 5, -1444681467),
        a = g(a, r, n, i, e[2], 9, -51403784),
        i = g(i, a, r, n, e[7], 14, 1735328473),
        r = m(r, n = g(n, i, a, r, e[12], 20, -1926607734), i, a, e[5], 4, -378558),
        a = m(a, r, n, i, e[8], 11, -2022574463),
        i = m(i, a, r, n, e[11], 16, 1839030562),
        n = m(n, i, a, r, e[14], 23, -35309556),
        r = m(r, n, i, a, e[1], 4, -1530992060),
        a = m(a, r, n, i, e[4], 11, 1272893353),
        i = m(i, a, r, n, e[7], 16, -155497632),
        n = m(n, i, a, r, e[10], 23, -1094730640),
        r = m(r, n, i, a, e[13], 4, 681279174),
        a = m(a, r, n, i, e[0], 11, -358537222),
        i = m(i, a, r, n, e[3], 16, -722521979),
        n = m(n, i, a, r, e[6], 23, 76029189),
        r = m(r, n, i, a, e[9], 4, -640364487),
        a = m(a, r, n, i, e[12], 11, -421815835),
        i = m(i, a, r, n, e[15], 16, 530742520),
        r = v(r, n = m(n, i, a, r, e[2], 23, -995338651), i, a, e[0], 6, -198630844),
        a = v(a, r, n, i, e[7], 10, 1126891415),
        i = v(i, a, r, n, e[14], 15, -1416354905),
        n = v(n, i, a, r, e[5], 21, -57434055),
        r = v(r, n, i, a, e[12], 6, 1700485571),
        a = v(a, r, n, i, e[3], 10, -1894986606),
        i = v(i, a, r, n, e[10], 15, -1051523),
        n = v(n, i, a, r, e[1], 21, -2054922799),
        r = v(r, n, i, a, e[8], 6, 1873313359),
        a = v(a, r, n, i, e[15], 10, -30611744),
        i = v(i, a, r, n, e[6], 15, -1560198380),
        n = v(n, i, a, r, e[13], 21, 1309151649),
        r = v(r, n, i, a, e[4], 6, -145523070),
        a = v(a, r, n, i, e[11], 10, -1120210379),
        i = v(i, a, r, n, e[2], 15, 718787259),
        n = v(n, i, a, r, e[9], 21, -343485551),
        t[0] = S(r, t[0]),
        t[1] = S(n, t[1]),
        t[2] = S(i, t[2]),
        t[3] = S(a, t[3])
    }
    function d(t, e, r, n, i, a) {
        return e = S(S(e, t), S(n, a)),
        S(e << i | e >>> 32 - i, r)
    }
    function p(t, e, r, n, i, a, o) {
        return d(e & r | ~e & n, t, e, i, a, o)
    }
    function g(t, e, r, n, i, a, o) {
        return d(e & n | r & ~n, t, e, i, a, o)
    }
    function m(t, e, r, n, i, a, o) {
        return d(e ^ r ^ n, t, e, i, a, o)
    }
    function v(t, e, r, n, i, a, o) {
        return d(r ^ (e | ~n), t, e, i, a, o)
    }
    function b(t) {
        var e, r = t.length, n = [1732584193, -271733879, -1732584194, 271733878];
        for (e = 64; e <= t.length; e += 64)
            f(n, y(t.substring(e - 64, e)));
        t = t.substring(e - 64);
        var i = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        for (e = 0; e < t.length; e++)
            i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);
        if (i[e >> 2] |= 128 << (e % 4 << 3),
        e > 55)
            for (f(n, i),
            e = 0; e < 16; e++)
                i[e] = 0;
        return i[14] = 8 * r,
        f(n, i),
        n
    }
    function y(t) {
        var e, r = [];
        for (e = 0; e < 64; e += 4)
            r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);
        return r
    }
    c = r.atob.bind(r),
    u = r.btoa.bind(r);
    var w = "0123456789abcdef".split("");
    function N(t) {
        for (var e = "", r = 0; r < 4; r++)
            e += w[t >> 8 * r + 4 & 15] + w[t >> 8 * r & 15];
        return e
    }
    function L(t) {
        return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24)
    }
    function A(t) {
        return function(t) {
            return t.map(L).join("")
        }(b(t))
    }
    var x = "5d41402abc4b2a76b9719d911017c592" != function(t) {
        for (var e = 0; e < t.length; e++)
            t[e] = N(t[e]);
        return t.join("")
    }(b("hello"));
    function S(t, e) {
        if (x) {
            var r = (65535 & t) + (65535 & e);
            return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r
        }
        return t + e & 4294967295
    }
    /**
   * @license
   * FPDF is released under a permissive license: there is no usage restriction.
   * You may embed it freely in your application (commercial or not), with or
   * without modifications.
   *
   * Reference: http://www.fpdf.org/en/script/script37.php
   */
    function _(t, e) {
        var r, n, i, a;
        if (t !== r) {
            for (var o = (i = t,
            a = 1 + (256 / t.length >> 0),
            new Array(a + 1).join(i)), s = [], c = 0; c < 256; c++)
                s[c] = c;
            var u = 0;
            for (c = 0; c < 256; c++) {
                var l = s[c];
                u = (u + l + o.charCodeAt(c)) % 256,
                s[c] = s[u],
                s[u] = l
            }
            r = t,
            n = s
        } else
            s = n;
        var h = e.length
          , f = 0
          , d = 0
          , p = "";
        for (c = 0; c < h; c++)
            d = (d + (l = s[f = (f + 1) % 256])) % 256,
            s[f] = s[d],
            s[d] = l,
            o = s[(s[f] + s[d]) % 256],
            p += String.fromCharCode(e.charCodeAt(c) ^ o);
        return p
    }
    /**
   * @license
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   * Author: Owen Leong (@owenl131)
   * Date: 15 Oct 2020
   * References:
   * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
   * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
   * http://www.fpdf.org/en/script/script37.php
   */
    var P = {
        print: 4,
        modify: 8,
        copy: 16,
        "annot-forms": 32
    };
    function k(t, e, r, n) {
        this.v = 1,
        this.r = 2;
        var i = 192;
        t.forEach((function(t) {
            if (void 0 !== P.perm)
                throw new Error("Invalid permission: " + t);
            i += P[t]
        }
        )),
        this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
        var a = (e + this.padding).substr(0, 32)
          , o = (r + this.padding).substr(0, 32);
        this.O = this.processOwnerPassword(a, o),
        this.P = -(1 + (255 ^ i)),
        this.encryptionKey = A(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n)).substr(0, 5),
        this.U = _(this.encryptionKey, this.padding)
    }
    function F(t) {
        if (/[^\u0000-\u00ff]/.test(t))
            throw new Error("Invalid PDF Name Object: " + t + ", Only accept ASCII characters.");
        for (var e = "", r = t.length, n = 0; n < r; n++) {
            var i = t.charCodeAt(n);
            if (i < 33 || 35 === i || 37 === i || 40 === i || 41 === i || 47 === i || 60 === i || 62 === i || 91 === i || 93 === i || 123 === i || 125 === i || i > 126)
                e += "#" + ("0" + i.toString(16)).slice(-2);
            else
                e += t[n]
        }
        return e
    }
    function I(t) {
        if ("object" !== e(t))
            throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
        var n = {};
        this.subscribe = function(t, e, r) {
            if (r = r || !1,
            "string" != typeof t || "function" != typeof e || "boolean" != typeof r)
                throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
            n.hasOwnProperty(t) || (n[t] = {});
            var i = Math.random().toString(35);
            return n[t][i] = [e, !!r],
            i
        }
        ,
        this.unsubscribe = function(t) {
            for (var e in n)
                if (n[e][t])
                    return delete n[e][t],
                    0 === Object.keys(n[e]).length && delete n[e],
                    !0;
            return !1
        }
        ,
        this.publish = function(e) {
            if (n.hasOwnProperty(e)) {
                var a = Array.prototype.slice.call(arguments, 1)
                  , o = [];
                for (var s in n[e]) {
                    var c = n[e][s];
                    try {
                        c[0].apply(t, a)
                    } catch (t) {
                        r.console && i.error("jsPDF PubSub Error", t.message, t)
                    }
                    c[1] && o.push(s)
                }
                o.length && o.forEach(this.unsubscribe)
            }
        }
        ,
        this.getTopics = function() {
            return n
        }
    }
    function C(t) {
        if (!(this instanceof C))
            return new C(t);
        var e = "opacity,stroke-opacity".split(",");
        for (var r in t)
            t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);
        this.id = "",
        this.objectNumber = -1
    }
    function j(t, e) {
        this.gState = t,
        this.matrix = e,
        this.id = "",
        this.objectNumber = -1
    }
    function O(t, e, r, n, i) {
        if (!(this instanceof O))
            return new O(t,e,r,n,i);
        this.type = "axial" === t ? 2 : 3,
        this.coords = e,
        this.colors = r,
        j.call(this, n, i)
    }
    function B(t, e, r, n, i) {
        if (!(this instanceof B))
            return new B(t,e,r,n,i);
        this.boundingBox = t,
        this.xStep = e,
        this.yStep = r,
        this.stream = "",
        this.cloneIndex = 0,
        j.call(this, n, i)
    }
    function M(t) {
        var n, a = "string" == typeof arguments[0] ? arguments[0] : "p", o = arguments[1], s = arguments[2], c = arguments[3], f = [], d = 1, p = 16, g = "S", m = null;
        "object" === e(t = t || {}) && (a = t.orientation,
        o = t.unit || o,
        s = t.format || s,
        c = t.compress || t.compressPdf || c,
        null !== (m = t.encryption || null) && (m.userPassword = m.userPassword || "",
        m.ownerPassword = m.ownerPassword || "",
        m.userPermissions = m.userPermissions || []),
        d = "number" == typeof t.userUnit ? Math.abs(t.userUnit) : 1,
        void 0 !== t.precision && (n = t.precision),
        void 0 !== t.floatPrecision && (p = t.floatPrecision),
        g = t.defaultPathOperation || "S"),
        f = t.filters || (!0 === c ? ["FlateEncode"] : f),
        o = o || "mm",
        a = ("" + (a || "P")).toLowerCase();
        var v = t.putOnlyUsedFonts || !1
          , b = {}
          , y = {
            internal: {},
            __private__: {}
        };
        y.__private__.PubSub = I;
        var w = "1.3"
          , N = y.__private__.getPdfVersion = function() {
            return w
        }
        ;
        y.__private__.setPdfVersion = function(t) {
            w = t
        }
        ;
        var L = {
            a0: [2383.94, 3370.39],
            a1: [1683.78, 2383.94],
            a2: [1190.55, 1683.78],
            a3: [841.89, 1190.55],
            a4: [595.28, 841.89],
            a5: [419.53, 595.28],
            a6: [297.64, 419.53],
            a7: [209.76, 297.64],
            a8: [147.4, 209.76],
            a9: [104.88, 147.4],
            a10: [73.7, 104.88],
            b0: [2834.65, 4008.19],
            b1: [2004.09, 2834.65],
            b2: [1417.32, 2004.09],
            b3: [1000.63, 1417.32],
            b4: [708.66, 1000.63],
            b5: [498.9, 708.66],
            b6: [354.33, 498.9],
            b7: [249.45, 354.33],
            b8: [175.75, 249.45],
            b9: [124.72, 175.75],
            b10: [87.87, 124.72],
            c0: [2599.37, 3676.54],
            c1: [1836.85, 2599.37],
            c2: [1298.27, 1836.85],
            c3: [918.43, 1298.27],
            c4: [649.13, 918.43],
            c5: [459.21, 649.13],
            c6: [323.15, 459.21],
            c7: [229.61, 323.15],
            c8: [161.57, 229.61],
            c9: [113.39, 161.57],
            c10: [79.37, 113.39],
            dl: [311.81, 623.62],
            letter: [612, 792],
            "government-letter": [576, 756],
            legal: [612, 1008],
            "junior-legal": [576, 360],
            ledger: [1224, 792],
            tabloid: [792, 1224],
            "credit-card": [153, 243]
        };
        y.__private__.getPageFormats = function() {
            return L
        }
        ;
        var A = y.__private__.getPageFormat = function(t) {
            return L[t]
        }
        ;
        s = s || "a4";
        var x = {
            COMPAT: "compat",
            ADVANCED: "advanced"
        }
          , S = x.COMPAT;
        function _() {
            this.saveGraphicsState(),
            ht(new Vt(_t,0,0,-_t,0,Rr() * _t).toString() + " cm"),
            this.setFontSize(this.getFontSize() / _t),
            g = "n",
            S = x.ADVANCED
        }
        function P() {
            this.restoreGraphicsState(),
            g = "S",
            S = x.COMPAT
        }
        var j = y.__private__.combineFontStyleAndFontWeight = function(t, e) {
            if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e)
                throw new Error("Invalid Combination of fontweight and fontstyle");
            return e && (t = 400 == e || "normal" === e ? "italic" === t ? "italic" : "normal" : 700 != e && "bold" !== e || "normal" !== t ? (700 == e ? "bold" : e) + "" + t : "bold"),
            t
        }
        ;
        y.advancedAPI = function(t) {
            var e = S === x.COMPAT;
            return e && _.call(this),
            "function" != typeof t || (t(this),
            e && P.call(this)),
            this
        }
        ,
        y.compatAPI = function(t) {
            var e = S === x.ADVANCED;
            return e && P.call(this),
            "function" != typeof t || (t(this),
            e && _.call(this)),
            this
        }
        ,
        y.isAdvancedAPI = function() {
            return S === x.ADVANCED
        }
        ;
        var E, q = function(t) {
            if (S !== x.ADVANCED)
                throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.")
        }, D = y.roundToPrecision = y.__private__.roundToPrecision = function(t, e) {
            var r = n || e;
            if (isNaN(t) || isNaN(r))
                throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
            return t.toFixed(r).replace(/0+$/, "")
        }
        ;
        E = y.hpf = y.__private__.hpf = "number" == typeof p ? function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.hpf");
            return D(t, p)
        }
        : "smart" === p ? function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.hpf");
            return D(t, t > -1 && t < 1 ? 16 : 5)
        }
        : function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.hpf");
            return D(t, 16)
        }
        ;
        var R = y.f2 = y.__private__.f2 = function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.f2");
            return D(t, 2)
        }
          , T = y.__private__.f3 = function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.f3");
            return D(t, 3)
        }
          , U = y.scale = y.__private__.scale = function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.scale");
            return S === x.COMPAT ? t * _t : S === x.ADVANCED ? t : void 0
        }
          , z = function(t) {
            return S === x.COMPAT ? Rr() - t : S === x.ADVANCED ? t : void 0
        }
          , H = function(t) {
            return U(z(t))
        };
        y.__private__.setPrecision = y.setPrecision = function(t) {
            "number" == typeof parseInt(t, 10) && (n = parseInt(t, 10))
        }
        ;
        var W, V = "00000000000000000000000000000000", G = y.__private__.getFileId = function() {
            return V
        }
        , Y = y.__private__.setFileId = function(t) {
            return V = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V.split("").map((function() {
                return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()))
            }
            )).join(""),
            null !== m && (Ye = new k(m.userPermissions,m.userPassword,m.ownerPassword,V)),
            V
        }
        ;
        y.setFileId = function(t) {
            return Y(t),
            this
        }
        ,
        y.getFileId = function() {
            return G()
        }
        ;
        var J = y.__private__.convertDateToPDFDate = function(t) {
            var e = t.getTimezoneOffset()
              , r = e < 0 ? "+" : "-"
              , n = Math.floor(Math.abs(e / 60))
              , i = Math.abs(e % 60)
              , a = [r, Q(n), "'", Q(i), "'"].join("");
            return ["D:", t.getFullYear(), Q(t.getMonth() + 1), Q(t.getDate()), Q(t.getHours()), Q(t.getMinutes()), Q(t.getSeconds()), a].join("")
        }
          , X = y.__private__.convertPDFDateToDate = function(t) {
            var e = parseInt(t.substr(2, 4), 10)
              , r = parseInt(t.substr(6, 2), 10) - 1
              , n = parseInt(t.substr(8, 2), 10)
              , i = parseInt(t.substr(10, 2), 10)
              , a = parseInt(t.substr(12, 2), 10)
              , o = parseInt(t.substr(14, 2), 10);
            return new Date(e,r,n,i,a,o,0)
        }
          , K = y.__private__.setCreationDate = function(t) {
            var e;
            if (void 0 === t && (t = new Date),
            t instanceof Date)
                e = J(t);
            else {
                if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t))
                    throw new Error("Invalid argument passed to jsPDF.setCreationDate");
                e = t
            }
            return W = e
        }
          , Z = y.__private__.getCreationDate = function(t) {
            var e = W;
            return "jsDate" === t && (e = X(W)),
            e
        }
        ;
        y.setCreationDate = function(t) {
            return K(t),
            this
        }
        ,
        y.getCreationDate = function(t) {
            return Z(t)
        }
        ;
        var $, Q = y.__private__.padd2 = function(t) {
            return ("0" + parseInt(t)).slice(-2)
        }
        , tt = y.__private__.padd2Hex = function(t) {
            return ("00" + (t = t.toString())).substr(t.length)
        }
        , et = 0, rt = [], nt = [], it = 0, at = [], ot = [], st = !1, ct = nt, ut = function() {
            et = 0,
            it = 0,
            nt = [],
            rt = [],
            at = [],
            Qt = Kt(),
            te = Kt()
        };
        y.__private__.setCustomOutputDestination = function(t) {
            st = !0,
            ct = t
        }
        ;
        var lt = function(t) {
            st || (ct = t)
        };
        y.__private__.resetCustomOutputDestination = function() {
            st = !1,
            ct = nt
        }
        ;
        var ht = y.__private__.out = function(t) {
            return t = t.toString(),
            it += t.length + 1,
            ct.push(t),
            ct
        }
          , ft = y.__private__.write = function(t) {
            return ht(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "))
        }
          , dt = y.__private__.getArrayBuffer = function(t) {
            for (var e = t.length, r = new ArrayBuffer(e), n = new Uint8Array(r); e--; )
                n[e] = t.charCodeAt(e);
            return r
        }
          , pt = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];
        y.__private__.getStandardFonts = function() {
            return pt
        }
        ;
        var gt = t.fontSize || 16;
        y.__private__.setFontSize = y.setFontSize = function(t) {
            return gt = S === x.ADVANCED ? t / _t : t,
            this
        }
        ;
        var mt, vt = y.__private__.getFontSize = y.getFontSize = function() {
            return S === x.COMPAT ? gt : gt * _t
        }
        , bt = t.R2L || !1;
        y.__private__.setR2L = y.setR2L = function(t) {
            return bt = t,
            this
        }
        ,
        y.__private__.getR2L = y.getR2L = function() {
            return bt
        }
        ;
        var yt, wt = y.__private__.setZoomMode = function(t) {
            var e = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
            if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t))
                mt = t;
            else if (isNaN(t)) {
                if (-1 === e.indexOf(t))
                    throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
                mt = t
            } else
                mt = parseInt(t, 10)
        }
        ;
        y.__private__.getZoomMode = function() {
            return mt
        }
        ;
        var Nt, Lt = y.__private__.setPageMode = function(t) {
            if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t))
                throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
            yt = t
        }
        ;
        y.__private__.getPageMode = function() {
            return yt
        }
        ;
        var At = y.__private__.setLayoutMode = function(t) {
            if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t))
                throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
            Nt = t
        }
        ;
        y.__private__.getLayoutMode = function() {
            return Nt
        }
        ,
        y.__private__.setDisplayMode = y.setDisplayMode = function(t, e, r) {
            return wt(t),
            At(e),
            Lt(r),
            this
        }
        ;
        var xt = {
            title: "",
            subject: "",
            author: "",
            keywords: "",
            creator: ""
        };
        y.__private__.getDocumentProperty = function(t) {
            if (-1 === Object.keys(xt).indexOf(t))
                throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
            return xt[t]
        }
        ,
        y.__private__.getDocumentProperties = function() {
            return xt
        }
        ,
        y.__private__.setDocumentProperties = y.setProperties = y.setDocumentProperties = function(t) {
            for (var e in xt)
                xt.hasOwnProperty(e) && t[e] && (xt[e] = t[e]);
            return this
        }
        ,
        y.__private__.setDocumentProperty = function(t, e) {
            if (-1 === Object.keys(xt).indexOf(t))
                throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
            return xt[t] = e
        }
        ;
        var St, _t, Pt, kt, Ft, It = {}, Ct = {}, jt = [], Ot = {}, Bt = {}, Mt = {}, Et = {}, qt = null, Dt = 0, Rt = [], Tt = new I(y), Ut = t.hotfixes || [], zt = {}, Ht = {}, Wt = [], Vt = function t(e, r, n, i, a, o) {
            if (!(this instanceof t))
                return new t(e,r,n,i,a,o);
            isNaN(e) && (e = 1),
            isNaN(r) && (r = 0),
            isNaN(n) && (n = 0),
            isNaN(i) && (i = 1),
            isNaN(a) && (a = 0),
            isNaN(o) && (o = 0),
            this._matrix = [e, r, n, i, a, o]
        };
        Object.defineProperty(Vt.prototype, "sx", {
            get: function() {
                return this._matrix[0]
            },
            set: function(t) {
                this._matrix[0] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "shy", {
            get: function() {
                return this._matrix[1]
            },
            set: function(t) {
                this._matrix[1] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "shx", {
            get: function() {
                return this._matrix[2]
            },
            set: function(t) {
                this._matrix[2] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "sy", {
            get: function() {
                return this._matrix[3]
            },
            set: function(t) {
                this._matrix[3] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "tx", {
            get: function() {
                return this._matrix[4]
            },
            set: function(t) {
                this._matrix[4] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "ty", {
            get: function() {
                return this._matrix[5]
            },
            set: function(t) {
                this._matrix[5] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "a", {
            get: function() {
                return this._matrix[0]
            },
            set: function(t) {
                this._matrix[0] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "b", {
            get: function() {
                return this._matrix[1]
            },
            set: function(t) {
                this._matrix[1] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "c", {
            get: function() {
                return this._matrix[2]
            },
            set: function(t) {
                this._matrix[2] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "d", {
            get: function() {
                return this._matrix[3]
            },
            set: function(t) {
                this._matrix[3] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "e", {
            get: function() {
                return this._matrix[4]
            },
            set: function(t) {
                this._matrix[4] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "f", {
            get: function() {
                return this._matrix[5]
            },
            set: function(t) {
                this._matrix[5] = t
            }
        }),
        Object.defineProperty(Vt.prototype, "rotation", {
            get: function() {
                return Math.atan2(this.shx, this.sx)
            }
        }),
        Object.defineProperty(Vt.prototype, "scaleX", {
            get: function() {
                return this.decompose().scale.sx
            }
        }),
        Object.defineProperty(Vt.prototype, "scaleY", {
            get: function() {
                return this.decompose().scale.sy
            }
        }),
        Object.defineProperty(Vt.prototype, "isIdentity", {
            get: function() {
                return 1 === this.sx && (0 === this.shy && (0 === this.shx && (1 === this.sy && (0 === this.tx && 0 === this.ty))))
            }
        }),
        Vt.prototype.join = function(t) {
            return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(E).join(t)
        }
        ,
        Vt.prototype.multiply = function(t) {
            var e = t.sx * this.sx + t.shy * this.shx
              , r = t.sx * this.shy + t.shy * this.sy
              , n = t.shx * this.sx + t.sy * this.shx
              , i = t.shx * this.shy + t.sy * this.sy
              , a = t.tx * this.sx + t.ty * this.shx + this.tx
              , o = t.tx * this.shy + t.ty * this.sy + this.ty;
            return new Vt(e,r,n,i,a,o)
        }
        ,
        Vt.prototype.decompose = function() {
            var t = this.sx
              , e = this.shy
              , r = this.shx
              , n = this.sy
              , i = this.tx
              , a = this.ty
              , o = Math.sqrt(t * t + e * e)
              , s = (t /= o) * r + (e /= o) * n;
            r -= t * s,
            n -= e * s;
            var c = Math.sqrt(r * r + n * n);
            return s /= c,
            t * (n /= c) < e * (r /= c) && (t = -t,
            e = -e,
            s = -s,
            o = -o),
            {
                scale: new Vt(o,0,0,c,0,0),
                translate: new Vt(1,0,0,1,i,a),
                rotate: new Vt(t,e,-e,t,0,0),
                skew: new Vt(1,0,s,1,0,0)
            }
        }
        ,
        Vt.prototype.toString = function(t) {
            return this.join(" ")
        }
        ,
        Vt.prototype.inversed = function() {
            var t = this.sx
              , e = this.shy
              , r = this.shx
              , n = this.sy
              , i = this.tx
              , a = this.ty
              , o = 1 / (t * n - e * r)
              , s = n * o
              , c = -e * o
              , u = -r * o
              , l = t * o;
            return new Vt(s,c,u,l,-s * i - u * a,-c * i - l * a)
        }
        ,
        Vt.prototype.applyToPoint = function(t) {
            var e = t.x * this.sx + t.y * this.shx + this.tx
              , r = t.x * this.shy + t.y * this.sy + this.ty;
            return new Cr(e,r)
        }
        ,
        Vt.prototype.applyToRectangle = function(t) {
            var e = this.applyToPoint(t)
              , r = this.applyToPoint(new Cr(t.x + t.w,t.y + t.h));
            return new jr(e.x,e.y,r.x - e.x,r.y - e.y)
        }
        ,
        Vt.prototype.clone = function() {
            var t = this.sx
              , e = this.shy
              , r = this.shx
              , n = this.sy
              , i = this.tx
              , a = this.ty;
            return new Vt(t,e,r,n,i,a)
        }
        ,
        y.Matrix = Vt;
        var Gt = y.matrixMult = function(t, e) {
            return e.multiply(t)
        }
          , Yt = new Vt(1,0,0,1,0,0);
        y.unitMatrix = y.identityMatrix = Yt;
        var Jt = function(t, e) {
            if (!Bt[t]) {
                var r = (e instanceof O ? "Sh" : "P") + (Object.keys(Ot).length + 1).toString(10);
                e.id = r,
                Bt[t] = r,
                Ot[r] = e,
                Tt.publish("addPattern", e)
            }
        };
        y.ShadingPattern = O,
        y.TilingPattern = B,
        y.addShadingPattern = function(t, e) {
            return q("addShadingPattern()"),
            Jt(t, e),
            this
        }
        ,
        y.beginTilingPattern = function(t) {
            q("beginTilingPattern()"),
            Br(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix)
        }
        ,
        y.endTilingPattern = function(t, e) {
            q("endTilingPattern()"),
            e.stream = ot[$].join("\n"),
            Jt(t, e),
            Tt.publish("endTilingPattern", e),
            Wt.pop().restore()
        }
        ;
        var Xt = y.__private__.newObject = function() {
            var t = Kt();
            return Zt(t, !0),
            t
        }
          , Kt = y.__private__.newObjectDeferred = function() {
            return et++,
            rt[et] = function() {
                return it
            }
            ,
            et
        }
          , Zt = function(t, e) {
            return e = "boolean" == typeof e && e,
            rt[t] = it,
            e && ht(t + " 0 obj"),
            t
        }
          , $t = y.__private__.newAdditionalObject = function() {
            var t = {
                objId: Kt(),
                content: ""
            };
            return at.push(t),
            t
        }
          , Qt = Kt()
          , te = Kt()
          , ee = y.__private__.decodeColorString = function(t) {
            var e = t.split(" ");
            if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
                if (5 === e.length && ("k" === e[4] || "K" === e[4])) {
                    e = [(1 - e[0]) * (1 - e[3]), (1 - e[1]) * (1 - e[3]), (1 - e[2]) * (1 - e[3]), "r"]
                }
            } else {
                var r = parseFloat(e[0]);
                e = [r, r, r, "r"]
            }
            for (var n = "#", i = 0; i < 3; i++)
                n += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);
            return n
        }
          , re = y.__private__.encodeColorString = function(t) {
            var r;
            "string" == typeof t && (t = {
                ch1: t
            });
            var n = t.ch1
              , i = t.ch2
              , a = t.ch3
              , o = t.ch4
              , s = "draw" === t.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"];
            if ("string" == typeof n && "#" !== n.charAt(0)) {
                var c = new h(n);
                if (c.ok)
                    n = c.toHex();
                else if (!/^\d*\.?\d*$/.test(n))
                    throw new Error('Invalid color "' + n + '" passed to jsPDF.encodeColorString.')
            }
            if ("string" == typeof n && /^#[0-9A-Fa-f]{3}$/.test(n) && (n = "#" + n[1] + n[1] + n[2] + n[2] + n[3] + n[3]),
            "string" == typeof n && /^#[0-9A-Fa-f]{6}$/.test(n)) {
                var u = parseInt(n.substr(1), 16);
                n = u >> 16 & 255,
                i = u >> 8 & 255,
                a = 255 & u
            }
            if (void 0 === i || void 0 === o && n === i && i === a)
                if ("string" == typeof n)
                    r = n + " " + s[0];
                else
                    switch (t.precision) {
                    case 2:
                        r = R(n / 255) + " " + s[0];
                        break;
                    case 3:
                    default:
                        r = T(n / 255) + " " + s[0]
                    }
            else if (void 0 === o || "object" === e(o)) {
                if (o && !isNaN(o.a) && 0 === o.a)
                    return r = ["1.", "1.", "1.", s[1]].join(" ");
                if ("string" == typeof n)
                    r = [n, i, a, s[1]].join(" ");
                else
                    switch (t.precision) {
                    case 2:
                        r = [R(n / 255), R(i / 255), R(a / 255), s[1]].join(" ");
                        break;
                    default:
                    case 3:
                        r = [T(n / 255), T(i / 255), T(a / 255), s[1]].join(" ")
                    }
            } else if ("string" == typeof n)
                r = [n, i, a, o, s[2]].join(" ");
            else
                switch (t.precision) {
                case 2:
                    r = [R(n), R(i), R(a), R(o), s[2]].join(" ");
                    break;
                case 3:
                default:
                    r = [T(n), T(i), T(a), T(o), s[2]].join(" ")
                }
            return r
        }
          , ne = y.__private__.getFilters = function() {
            return f
        }
          , ie = y.__private__.putStream = function(t) {
            var e = (t = t || {}).data || ""
              , r = t.filters || ne()
              , n = t.alreadyAppliedFilters || []
              , i = t.addLength1 || !1
              , a = e.length
              , o = t.objectId
              , s = function(t) {
                return t
            };
            if (null !== m && void 0 === o)
                throw new Error("ObjectId must be passed to putStream for file encryption");
            null !== m && (s = Ye.encryptor(o, 0));
            var c = {};
            !0 === r && (r = ["FlateEncode"]);
            var u = t.additionalKeyValues || []
              , l = (c = void 0 !== M.API.processDataByFilters ? M.API.processDataByFilters(e, r) : {
                data: e,
                reverseChain: []
            }).reverseChain + (Array.isArray(n) ? n.join(" ") : n.toString());
            if (0 !== c.data.length && (u.push({
                key: "Length",
                value: c.data.length
            }),
            !0 === i && u.push({
                key: "Length1",
                value: a
            })),
            0 != l.length)
                if (l.split("/").length - 1 == 1)
                    u.push({
                        key: "Filter",
                        value: l
                    });
                else {
                    u.push({
                        key: "Filter",
                        value: "[" + l + "]"
                    });
                    for (var h = 0; h < u.length; h += 1)
                        if ("DecodeParms" === u[h].key) {
                            for (var f = [], d = 0; d < c.reverseChain.split("/").length - 1; d += 1)
                                f.push("null");
                            f.push(u[h].value),
                            u[h].value = "[" + f.join(" ") + "]"
                        }
                }
            ht("<<");
            for (var p = 0; p < u.length; p++)
                ht("/" + u[p].key + " " + u[p].value);
            ht(">>"),
            0 !== c.data.length && (ht("stream"),
            ht(s(c.data)),
            ht("endstream"))
        }
          , ae = y.__private__.putPage = function(t) {
            var e = t.number
              , r = t.data
              , n = t.objId
              , i = t.contentsObjId;
            Zt(n, !0),
            ht("<</Type /Page"),
            ht("/Parent " + t.rootDictionaryObjId + " 0 R"),
            ht("/Resources " + t.resourceDictionaryObjId + " 0 R"),
            ht("/MediaBox [" + parseFloat(E(t.mediaBox.bottomLeftX)) + " " + parseFloat(E(t.mediaBox.bottomLeftY)) + " " + E(t.mediaBox.topRightX) + " " + E(t.mediaBox.topRightY) + "]"),
            null !== t.cropBox && ht("/CropBox [" + E(t.cropBox.bottomLeftX) + " " + E(t.cropBox.bottomLeftY) + " " + E(t.cropBox.topRightX) + " " + E(t.cropBox.topRightY) + "]"),
            null !== t.bleedBox && ht("/BleedBox [" + E(t.bleedBox.bottomLeftX) + " " + E(t.bleedBox.bottomLeftY) + " " + E(t.bleedBox.topRightX) + " " + E(t.bleedBox.topRightY) + "]"),
            null !== t.trimBox && ht("/TrimBox [" + E(t.trimBox.bottomLeftX) + " " + E(t.trimBox.bottomLeftY) + " " + E(t.trimBox.topRightX) + " " + E(t.trimBox.topRightY) + "]"),
            null !== t.artBox && ht("/ArtBox [" + E(t.artBox.bottomLeftX) + " " + E(t.artBox.bottomLeftY) + " " + E(t.artBox.topRightX) + " " + E(t.artBox.topRightY) + "]"),
            "number" == typeof t.userUnit && 1 !== t.userUnit && ht("/UserUnit " + t.userUnit),
            Tt.publish("putPage", {
                objId: n,
                pageContext: Rt[e],
                pageNumber: e,
                page: r
            }),
            ht("/Contents " + i + " 0 R"),
            ht(">>"),
            ht("endobj");
            var a = r.join("\n");
            return S === x.ADVANCED && (a += "\nQ"),
            Zt(i, !0),
            ie({
                data: a,
                filters: ne(),
                objectId: i
            }),
            ht("endobj"),
            n
        }
          , oe = y.__private__.putPages = function() {
            var t, e, r = [];
            for (t = 1; t <= Dt; t++)
                Rt[t].objId = Kt(),
                Rt[t].contentsObjId = Kt();
            for (t = 1; t <= Dt; t++)
                r.push(ae({
                    number: t,
                    data: ot[t],
                    objId: Rt[t].objId,
                    contentsObjId: Rt[t].contentsObjId,
                    mediaBox: Rt[t].mediaBox,
                    cropBox: Rt[t].cropBox,
                    bleedBox: Rt[t].bleedBox,
                    trimBox: Rt[t].trimBox,
                    artBox: Rt[t].artBox,
                    userUnit: Rt[t].userUnit,
                    rootDictionaryObjId: Qt,
                    resourceDictionaryObjId: te
                }));
            Zt(Qt, !0),
            ht("<</Type /Pages");
            var n = "/Kids [";
            for (e = 0; e < Dt; e++)
                n += r[e] + " 0 R ";
            ht(n + "]"),
            ht("/Count " + Dt),
            ht(">>"),
            ht("endobj"),
            Tt.publish("postPutPages")
        }
          , se = function(t) {
            Tt.publish("putFont", {
                font: t,
                out: ht,
                newObject: Xt,
                putStream: ie
            }),
            !0 !== t.isAlreadyPutted && (t.objectNumber = Xt(),
            ht("<<"),
            ht("/Type /Font"),
            ht("/BaseFont /" + F(t.postScriptName)),
            ht("/Subtype /Type1"),
            "string" == typeof t.encoding && ht("/Encoding /" + t.encoding),
            ht("/FirstChar 32"),
            ht("/LastChar 255"),
            ht(">>"),
            ht("endobj"))
        }
          , ce = function() {
            for (var t in It)
                It.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && se(It[t])
        }
          , ue = function(t) {
            t.objectNumber = Xt();
            var e = [];
            e.push({
                key: "Type",
                value: "/XObject"
            }),
            e.push({
                key: "Subtype",
                value: "/Form"
            }),
            e.push({
                key: "BBox",
                value: "[" + [E(t.x), E(t.y), E(t.x + t.width), E(t.y + t.height)].join(" ") + "]"
            }),
            e.push({
                key: "Matrix",
                value: "[" + t.matrix.toString() + "]"
            });
            var r = t.pages[1].join("\n");
            ie({
                data: r,
                additionalKeyValues: e,
                objectId: t.objectNumber
            }),
            ht("endobj")
        }
          , le = function() {
            for (var t in zt)
                zt.hasOwnProperty(t) && ue(zt[t])
        }
          , he = function(t, e) {
            var r, n = [], i = 1 / (e - 1);
            for (r = 0; r < 1; r += i)
                n.push(r);
            if (n.push(1),
            0 != t[0].offset) {
                var a = {
                    offset: 0,
                    color: t[0].color
                };
                t.unshift(a)
            }
            if (1 != t[t.length - 1].offset) {
                var o = {
                    offset: 1,
                    color: t[t.length - 1].color
                };
                t.push(o)
            }
            for (var s = "", c = 0, u = 0; u < n.length; u++) {
                for (r = n[u]; r > t[c + 1].offset; )
                    c++;
                var l = t[c].offset
                  , h = (r - l) / (t[c + 1].offset - l)
                  , f = t[c].color
                  , d = t[c + 1].color;
                s += tt(Math.round((1 - h) * f[0] + h * d[0]).toString(16)) + tt(Math.round((1 - h) * f[1] + h * d[1]).toString(16)) + tt(Math.round((1 - h) * f[2] + h * d[2]).toString(16))
            }
            return s.trim()
        }
          , fe = function(t, e) {
            e || (e = 21);
            var r = Xt()
              , n = he(t.colors, e)
              , i = [];
            i.push({
                key: "FunctionType",
                value: "0"
            }),
            i.push({
                key: "Domain",
                value: "[0.0 1.0]"
            }),
            i.push({
                key: "Size",
                value: "[" + e + "]"
            }),
            i.push({
                key: "BitsPerSample",
                value: "8"
            }),
            i.push({
                key: "Range",
                value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
            }),
            i.push({
                key: "Decode",
                value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
            }),
            ie({
                data: n,
                additionalKeyValues: i,
                alreadyAppliedFilters: ["/ASCIIHexDecode"],
                objectId: r
            }),
            ht("endobj"),
            t.objectNumber = Xt(),
            ht("<< /ShadingType " + t.type),
            ht("/ColorSpace /DeviceRGB");
            var a = "/Coords [" + E(parseFloat(t.coords[0])) + " " + E(parseFloat(t.coords[1])) + " ";
            2 === t.type ? a += E(parseFloat(t.coords[2])) + " " + E(parseFloat(t.coords[3])) : a += E(parseFloat(t.coords[2])) + " " + E(parseFloat(t.coords[3])) + " " + E(parseFloat(t.coords[4])) + " " + E(parseFloat(t.coords[5])),
            ht(a += "]"),
            t.matrix && ht("/Matrix [" + t.matrix.toString() + "]"),
            ht("/Function " + r + " 0 R"),
            ht("/Extend [true true]"),
            ht(">>"),
            ht("endobj")
        }
          , de = function(t, e) {
            var r = Kt()
              , n = Xt();
            e.push({
                resourcesOid: r,
                objectOid: n
            }),
            t.objectNumber = n;
            var i = [];
            i.push({
                key: "Type",
                value: "/Pattern"
            }),
            i.push({
                key: "PatternType",
                value: "1"
            }),
            i.push({
                key: "PaintType",
                value: "1"
            }),
            i.push({
                key: "TilingType",
                value: "1"
            }),
            i.push({
                key: "BBox",
                value: "[" + t.boundingBox.map(E).join(" ") + "]"
            }),
            i.push({
                key: "XStep",
                value: E(t.xStep)
            }),
            i.push({
                key: "YStep",
                value: E(t.yStep)
            }),
            i.push({
                key: "Resources",
                value: r + " 0 R"
            }),
            t.matrix && i.push({
                key: "Matrix",
                value: "[" + t.matrix.toString() + "]"
            }),
            ie({
                data: t.stream,
                additionalKeyValues: i,
                objectId: t.objectNumber
            }),
            ht("endobj")
        }
          , pe = function(t) {
            var e;
            for (e in Ot)
                Ot.hasOwnProperty(e) && (Ot[e]instanceof O ? fe(Ot[e]) : Ot[e]instanceof B && de(Ot[e], t))
        }
          , ge = function(t) {
            for (var e in t.objectNumber = Xt(),
            ht("<<"),
            t)
                switch (e) {
                case "opacity":
                    ht("/ca " + R(t[e]));
                    break;
                case "stroke-opacity":
                    ht("/CA " + R(t[e]))
                }
            ht(">>"),
            ht("endobj")
        }
          , me = function() {
            var t;
            for (t in Mt)
                Mt.hasOwnProperty(t) && ge(Mt[t])
        }
          , ve = function() {
            for (var t in ht("/XObject <<"),
            zt)
                zt.hasOwnProperty(t) && zt[t].objectNumber >= 0 && ht("/" + t + " " + zt[t].objectNumber + " 0 R");
            Tt.publish("putXobjectDict"),
            ht(">>")
        }
          , be = function() {
            Ye.oid = Xt(),
            ht("<<"),
            ht("/Filter /Standard"),
            ht("/V " + Ye.v),
            ht("/R " + Ye.r),
            ht("/U <" + Ye.toHexString(Ye.U) + ">"),
            ht("/O <" + Ye.toHexString(Ye.O) + ">"),
            ht("/P " + Ye.P),
            ht(">>"),
            ht("endobj")
        }
          , ye = function() {
            for (var t in ht("/Font <<"),
            It)
                It.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && ht("/" + t + " " + It[t].objectNumber + " 0 R");
            ht(">>")
        }
          , we = function() {
            if (Object.keys(Ot).length > 0) {
                for (var t in ht("/Shading <<"),
                Ot)
                    Ot.hasOwnProperty(t) && Ot[t]instanceof O && Ot[t].objectNumber >= 0 && ht("/" + t + " " + Ot[t].objectNumber + " 0 R");
                Tt.publish("putShadingPatternDict"),
                ht(">>")
            }
        }
          , Ne = function(t) {
            if (Object.keys(Ot).length > 0) {
                for (var e in ht("/Pattern <<"),
                Ot)
                    Ot.hasOwnProperty(e) && Ot[e]instanceof y.TilingPattern && Ot[e].objectNumber >= 0 && Ot[e].objectNumber < t && ht("/" + e + " " + Ot[e].objectNumber + " 0 R");
                Tt.publish("putTilingPatternDict"),
                ht(">>")
            }
        }
          , Le = function() {
            if (Object.keys(Mt).length > 0) {
                var t;
                for (t in ht("/ExtGState <<"),
                Mt)
                    Mt.hasOwnProperty(t) && Mt[t].objectNumber >= 0 && ht("/" + t + " " + Mt[t].objectNumber + " 0 R");
                Tt.publish("putGStateDict"),
                ht(">>")
            }
        }
          , Ae = function(t) {
            Zt(t.resourcesOid, !0),
            ht("<<"),
            ht("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"),
            ye(),
            we(),
            Ne(t.objectOid),
            Le(),
            ve(),
            ht(">>"),
            ht("endobj")
        }
          , xe = function() {
            var t = [];
            ce(),
            me(),
            le(),
            pe(t),
            Tt.publish("putResources"),
            t.forEach(Ae),
            Ae({
                resourcesOid: te,
                objectOid: Number.MAX_SAFE_INTEGER
            }),
            Tt.publish("postPutResources")
        }
          , Se = function() {
            Tt.publish("putAdditionalObjects");
            for (var t = 0; t < at.length; t++) {
                var e = at[t];
                Zt(e.objId, !0),
                ht(e.content),
                ht("endobj")
            }
            Tt.publish("postPutAdditionalObjects")
        }
          , _e = function(t) {
            Ct[t.fontName] = Ct[t.fontName] || {},
            Ct[t.fontName][t.fontStyle] = t.id
        }
          , Pe = function(t, e, r, n, i) {
            var a = {
                id: "F" + (Object.keys(It).length + 1).toString(10),
                postScriptName: t,
                fontName: e,
                fontStyle: r,
                encoding: n,
                isStandardFont: i || !1,
                metadata: {}
            };
            return Tt.publish("addFont", {
                font: a,
                instance: this
            }),
            It[a.id] = a,
            _e(a),
            a.id
        }
          , ke = function(t) {
            for (var e = 0, r = pt.length; e < r; e++) {
                var n = Pe.call(this, t[e][0], t[e][1], t[e][2], pt[e][3], !0);
                !1 === v && (b[n] = !0);
                var i = t[e][0].split("-");
                _e({
                    id: n,
                    fontName: i[0],
                    fontStyle: i[1] || ""
                })
            }
            Tt.publish("addFonts", {
                fonts: It,
                dictionary: Ct
            })
        }
          , Fe = function(t) {
            return t.foo = function() {
                try {
                    return t.apply(this, arguments)
                } catch (t) {
                    var e = t.stack || "";
                    ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
                    var n = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
                    if (!r.console)
                        throw new Error(n);
                    r.console.error(n, t),
                    r.alert && alert(n)
                }
            }
            ,
            t.foo.bar = t,
            t.foo
        }
          , Ie = function(t, e) {
            var r, n, i, a, o, s, c, u, l;
            if (i = (e = e || {}).sourceEncoding || "Unicode",
            o = e.outputEncoding,
            (e.autoencode || o) && It[St].metadata && It[St].metadata[i] && It[St].metadata[i].encoding && (a = It[St].metadata[i].encoding,
            !o && It[St].encoding && (o = It[St].encoding),
            !o && a.codePages && (o = a.codePages[0]),
            "string" == typeof o && (o = a[o]),
            o)) {
                for (c = !1,
                s = [],
                r = 0,
                n = t.length; r < n; r++)
                    (u = o[t.charCodeAt(r)]) ? s.push(String.fromCharCode(u)) : s.push(t[r]),
                    s[r].charCodeAt(0) >> 8 && (c = !0);
                t = s.join("")
            }
            for (r = t.length; void 0 === c && 0 !== r; )
                t.charCodeAt(r - 1) >> 8 && (c = !0),
                r--;
            if (!c)
                return t;
            for (s = e.noBOM ? [] : [254, 255],
            r = 0,
            n = t.length; r < n; r++) {
                if ((l = (u = t.charCodeAt(r)) >> 8) >> 8)
                    throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
                s.push(l),
                s.push(u - (l << 8))
            }
            return String.fromCharCode.apply(void 0, s)
        }
          , Ce = y.__private__.pdfEscape = y.pdfEscape = function(t, e) {
            return Ie(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)")
        }
          , je = y.__private__.beginPage = function(t) {
            ot[++Dt] = [],
            Rt[Dt] = {
                objId: 0,
                contentsObjId: 0,
                userUnit: Number(d),
                artBox: null,
                bleedBox: null,
                cropBox: null,
                trimBox: null,
                mediaBox: {
                    bottomLeftX: 0,
                    bottomLeftY: 0,
                    topRightX: Number(t[0]),
                    topRightY: Number(t[1])
                }
            },
            Me(Dt),
            lt(ot[$])
        }
          , Oe = function(t, e) {
            var r, n, o;
            switch (a = e || a,
            "string" == typeof t && (r = A(t.toLowerCase()),
            Array.isArray(r) && (n = r[0],
            o = r[1])),
            Array.isArray(t) && (n = t[0] * _t,
            o = t[1] * _t),
            isNaN(n) && (n = s[0],
            o = s[1]),
            (n > 14400 || o > 14400) && (i.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"),
            n = Math.min(14400, n),
            o = Math.min(14400, o)),
            s = [n, o],
            a.substr(0, 1)) {
            case "l":
                o > n && (s = [o, n]);
                break;
            case "p":
                n > o && (s = [o, n])
            }
            je(s),
            pr(fr),
            ht(Lr),
            0 !== kr && ht(kr + " J"),
            0 !== Fr && ht(Fr + " j"),
            Tt.publish("addPage", {
                pageNumber: Dt
            })
        }
          , Be = function(t) {
            t > 0 && t <= Dt && (ot.splice(t, 1),
            Rt.splice(t, 1),
            Dt--,
            $ > Dt && ($ = Dt),
            this.setPage($))
        }
          , Me = function(t) {
            t > 0 && t <= Dt && ($ = t)
        }
          , Ee = y.__private__.getNumberOfPages = y.getNumberOfPages = function() {
            return ot.length - 1
        }
          , qe = function(t, e, r) {
            var n, a = void 0;
            return r = r || {},
            t = void 0 !== t ? t : It[St].fontName,
            e = void 0 !== e ? e : It[St].fontStyle,
            n = t.toLowerCase(),
            void 0 !== Ct[n] && void 0 !== Ct[n][e] ? a = Ct[n][e] : void 0 !== Ct[t] && void 0 !== Ct[t][e] ? a = Ct[t][e] : !1 === r.disableWarning && i.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."),
            a || r.noFallback || null == (a = Ct.times[e]) && (a = Ct.times.normal),
            a
        }
          , De = y.__private__.putInfo = function() {
            var t = Xt()
              , e = function(t) {
                return t
            };
            for (var r in null !== m && (e = Ye.encryptor(t, 0)),
            ht("<<"),
            ht("/Producer (" + Ce(e("jsPDF " + M.version)) + ")"),
            xt)
                xt.hasOwnProperty(r) && xt[r] && ht("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ce(e(xt[r])) + ")");
            ht("/CreationDate (" + Ce(e(W)) + ")"),
            ht(">>"),
            ht("endobj")
        }
          , Re = y.__private__.putCatalog = function(t) {
            var e = (t = t || {}).rootDictionaryObjId || Qt;
            switch (Xt(),
            ht("<<"),
            ht("/Type /Catalog"),
            ht("/Pages " + e + " 0 R"),
            mt || (mt = "fullwidth"),
            mt) {
            case "fullwidth":
                ht("/OpenAction [3 0 R /FitH null]");
                break;
            case "fullheight":
                ht("/OpenAction [3 0 R /FitV null]");
                break;
            case "fullpage":
                ht("/OpenAction [3 0 R /Fit]");
                break;
            case "original":
                ht("/OpenAction [3 0 R /XYZ null null 1]");
                break;
            default:
                var r = "" + mt;
                "%" === r.substr(r.length - 1) && (mt = parseInt(mt) / 100),
                "number" == typeof mt && ht("/OpenAction [3 0 R /XYZ null null " + R(mt) + "]")
            }
            switch (Nt || (Nt = "continuous"),
            Nt) {
            case "continuous":
                ht("/PageLayout /OneColumn");
                break;
            case "single":
                ht("/PageLayout /SinglePage");
                break;
            case "two":
            case "twoleft":
                ht("/PageLayout /TwoColumnLeft");
                break;
            case "tworight":
                ht("/PageLayout /TwoColumnRight")
            }
            yt && ht("/PageMode /" + yt),
            Tt.publish("putCatalog"),
            ht(">>"),
            ht("endobj")
        }
          , Te = y.__private__.putTrailer = function() {
            ht("trailer"),
            ht("<<"),
            ht("/Size " + (et + 1)),
            ht("/Root " + et + " 0 R"),
            ht("/Info " + (et - 1) + " 0 R"),
            null !== m && ht("/Encrypt " + Ye.oid + " 0 R"),
            ht("/ID [ <" + V + "> <" + V + "> ]"),
            ht(">>")
        }
          , Ue = y.__private__.putHeader = function() {
            ht("%PDF-" + w),
            ht("%ºß¬à")
        }
          , ze = y.__private__.putXRef = function() {
            var t = "0000000000";
            ht("xref"),
            ht("0 " + (et + 1)),
            ht("0000000000 65535 f ");
            for (var e = 1; e <= et; e++) {
                "function" == typeof rt[e] ? ht((t + rt[e]()).slice(-10) + " 00000 n ") : void 0 !== rt[e] ? ht((t + rt[e]).slice(-10) + " 00000 n ") : ht("0000000000 00000 n ")
            }
        }
          , He = y.__private__.buildDocument = function() {
            ut(),
            lt(nt),
            Tt.publish("buildDocument"),
            Ue(),
            oe(),
            Se(),
            xe(),
            null !== m && be(),
            De(),
            Re();
            var t = it;
            return ze(),
            Te(),
            ht("startxref"),
            ht("" + t),
            ht("%%EOF"),
            lt(ot[$]),
            nt.join("\n")
        }
          , We = y.__private__.getBlob = function(t) {
            return new Blob([dt(t)],{
                type: "application/pdf"
            })
        }
          , Ve = y.output = y.__private__.output = Fe((function(t, e) {
            switch ("string" == typeof (e = e || {}) ? e = {
                filename: e
            } : e.filename = e.filename || "generated.pdf",
            t) {
            case void 0:
                return He();
            case "save":
                y.save(e.filename);
                break;
            case "arraybuffer":
                return dt(He());
            case "blob":
                return We(He());
            case "bloburi":
            case "bloburl":
                if (void 0 !== r.URL && "function" == typeof r.URL.createObjectURL)
                    return r.URL && r.URL.createObjectURL(We(He())) || void 0;
                i.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
                break;
            case "datauristring":
            case "dataurlstring":
                var n = ""
                  , a = He();
                try {
                    n = u(a)
                } catch (t) {
                    n = u(unescape(encodeURIComponent(a)))
                }
                return "data:application/pdf;filename=" + e.filename + ";base64," + n;
            case "pdfobjectnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(r)) {
                    var o = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js"
                      , s = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
                    e.pdfObjectUrl && (o = e.pdfObjectUrl,
                    s = "");
                    var c = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o + '"' + s + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");<\/script></body></html>"
                      , l = r.open();
                    return null !== l && l.document.write(c),
                    l
                }
                throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
            case "pdfjsnewwindow":
                if ("[object Window]" === Object.prototype.toString.call(r)) {
                    var h = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>'
                      , f = r.open();
                    if (null !== f) {
                        f.document.write(h);
                        var d = this;
                        f.document.documentElement.querySelector("#pdfViewer").onload = function() {
                            f.document.title = e.filename,
                            f.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d.output("bloburl"))
                        }
                    }
                    return f
                }
                throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
            case "dataurlnewwindow":
                if ("[object Window]" !== Object.prototype.toString.call(r))
                    throw new Error("The option dataurlnewwindow just works in a browser-environment.");
                var p = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>'
                  , g = r.open();
                if (null !== g && (g.document.write(p),
                g.document.title = e.filename),
                g || "undefined" == typeof safari)
                    return g;
                break;
            case "datauri":
            case "dataurl":
                return r.document.location.href = this.output("datauristring", e);
            default:
                return null
            }
        }
        ))
          , Ge = function(t) {
            return !0 === Array.isArray(Ut) && Ut.indexOf(t) > -1
        };
        switch (o) {
        case "pt":
            _t = 1;
            break;
        case "mm":
            _t = 72 / 25.4;
            break;
        case "cm":
            _t = 72 / 2.54;
            break;
        case "in":
            _t = 72;
            break;
        case "px":
            _t = 1 == Ge("px_scaling") ? .75 : 96 / 72;
            break;
        case "pc":
        case "em":
            _t = 12;
            break;
        case "ex":
            _t = 6;
            break;
        default:
            if ("number" != typeof o)
                throw new Error("Invalid unit: " + o);
            _t = o
        }
        var Ye = null;
        K(),
        Y();
        var Je = function(t) {
            return null !== m ? Ye.encryptor(t, 0) : function(t) {
                return t
            }
        }
          , Xe = y.__private__.getPageInfo = y.getPageInfo = function(t) {
            if (isNaN(t) || t % 1 != 0)
                throw new Error("Invalid argument passed to jsPDF.getPageInfo");
            return {
                objId: Rt[t].objId,
                pageNumber: t,
                pageContext: Rt[t]
            }
        }
          , Ke = y.__private__.getPageInfoByObjId = function(t) {
            if (isNaN(t) || t % 1 != 0)
                throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
            for (var e in Rt)
                if (Rt[e].objId === t)
                    break;
            return Xe(e)
        }
          , Ze = y.__private__.getCurrentPageInfo = y.getCurrentPageInfo = function() {
            return {
                objId: Rt[$].objId,
                pageNumber: $,
                pageContext: Rt[$]
            }
        }
        ;
        y.addPage = function() {
            return Oe.apply(this, arguments),
            this
        }
        ,
        y.setPage = function() {
            return Me.apply(this, arguments),
            lt.call(this, ot[$]),
            this
        }
        ,
        y.insertPage = function(t) {
            return this.addPage(),
            this.movePage($, t),
            this
        }
        ,
        y.movePage = function(t, e) {
            var r, n;
            if (t > e) {
                r = ot[t],
                n = Rt[t];
                for (var i = t; i > e; i--)
                    ot[i] = ot[i - 1],
                    Rt[i] = Rt[i - 1];
                ot[e] = r,
                Rt[e] = n,
                this.setPage(e)
            } else if (t < e) {
                r = ot[t],
                n = Rt[t];
                for (var a = t; a < e; a++)
                    ot[a] = ot[a + 1],
                    Rt[a] = Rt[a + 1];
                ot[e] = r,
                Rt[e] = n,
                this.setPage(e)
            }
            return this
        }
        ,
        y.deletePage = function() {
            return Be.apply(this, arguments),
            this
        }
        ,
        y.__private__.text = y.text = function(t, r, n, i, a) {
            var o, s, c, u, l, h, f, d, p, g = (i = i || {}).scope || this;
            if ("number" == typeof t && "number" == typeof r && ("string" == typeof n || Array.isArray(n))) {
                var m = n;
                n = r,
                r = t,
                t = m
            }
            if (arguments[3]instanceof Vt == !1 ? (c = arguments[4],
            u = arguments[5],
            "object" === e(f = arguments[3]) && null !== f || ("string" == typeof c && (u = c,
            c = null),
            "string" == typeof f && (u = f,
            f = null),
            "number" == typeof f && (c = f,
            f = null),
            i = {
                flags: f,
                angle: c,
                align: u
            })) : (q("The transform parameter of text() with a Matrix value"),
            p = a),
            isNaN(r) || isNaN(n) || null == t)
                throw new Error("Invalid arguments passed to jsPDF.text");
            if (0 === t.length)
                return g;
            var v = ""
              , y = !1
              , w = "number" == typeof i.lineHeightFactor ? i.lineHeightFactor : hr
              , N = g.internal.scaleFactor;
            function L(t) {
                return t = t.split("\t").join(Array(i.TabLen || 9).join(" ")),
                Ce(t, f)
            }
            function A(t) {
                for (var e, r = t.concat(), n = [], i = r.length; i--; )
                    "string" == typeof (e = r.shift()) ? n.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n.push(e[0]) : n.push([e[0], e[1], e[2]]);
                return n
            }
            function _(t, e) {
                var r;
                if ("string" == typeof t)
                    r = e(t)[0];
                else if (Array.isArray(t)) {
                    for (var n, i, a = t.concat(), o = [], s = a.length; s--; )
                        "string" == typeof (n = a.shift()) ? o.push(e(n)[0]) : Array.isArray(n) && "string" == typeof n[0] && (i = e(n[0], n[1], n[2]),
                        o.push([i[0], i[1], i[2]]));
                    r = o
                }
                return r
            }
            var P = !1
              , k = !0;
            if ("string" == typeof t)
                P = !0;
            else if (Array.isArray(t)) {
                var F = t.concat();
                s = [];
                for (var I, C = F.length; C--; )
                    ("string" != typeof (I = F.shift()) || Array.isArray(I) && "string" != typeof I[0]) && (k = !1);
                P = k
            }
            if (!1 === P)
                throw new Error('Type of text must be string or Array. "' + t + '" is not recognized.');
            "string" == typeof t && (t = t.match(/[\r?\n]/) ? t.split(/\r\n|\r|\n/g) : [t]);
            var j = gt / g.internal.scaleFactor
              , O = j * (w - 1);
            switch (i.baseline) {
            case "bottom":
                n -= O;
                break;
            case "top":
                n += j - O;
                break;
            case "hanging":
                n += j - 2 * O;
                break;
            case "middle":
                n += j / 2 - O
            }
            if ((h = i.maxWidth || 0) > 0 && ("string" == typeof t ? t = g.splitTextToSize(t, h) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce((function(t, e) {
                return t.concat(g.splitTextToSize(e, h))
            }
            ), []))),
            o = {
                text: t,
                x: r,
                y: n,
                options: i,
                mutex: {
                    pdfEscape: Ce,
                    activeFontKey: St,
                    fonts: It,
                    activeFontSize: gt
                }
            },
            Tt.publish("preProcessText", o),
            t = o.text,
            c = (i = o.options).angle,
            p instanceof Vt == !1 && c && "number" == typeof c) {
                c *= Math.PI / 180,
                0 === i.rotationDirection && (c = -c),
                S === x.ADVANCED && (c = -c);
                var B = Math.cos(c)
                  , M = Math.sin(c);
                p = new Vt(B,M,-M,B,0,0)
            } else
                c && c instanceof Vt && (p = c);
            S !== x.ADVANCED || p || (p = Yt),
            void 0 !== (l = i.charSpace || _r) && (v += E(U(l)) + " Tc\n",
            this.setCharSpace(this.getCharSpace() || 0)),
            void 0 !== (d = i.horizontalScale) && (v += E(100 * d) + " Tz\n");
            i.lang;
            var D = -1
              , R = void 0 !== i.renderingMode ? i.renderingMode : i.stroke
              , T = g.internal.getCurrentPageInfo().pageContext;
            switch (R) {
            case 0:
            case !1:
            case "fill":
                D = 0;
                break;
            case 1:
            case !0:
            case "stroke":
                D = 1;
                break;
            case 2:
            case "fillThenStroke":
                D = 2;
                break;
            case 3:
            case "invisible":
                D = 3;
                break;
            case 4:
            case "fillAndAddForClipping":
                D = 4;
                break;
            case 5:
            case "strokeAndAddPathForClipping":
                D = 5;
                break;
            case 6:
            case "fillThenStrokeAndAddToPathForClipping":
                D = 6;
                break;
            case 7:
            case "addToPathForClipping":
                D = 7
            }
            var z = void 0 !== T.usedRenderingMode ? T.usedRenderingMode : -1;
            -1 !== D ? v += D + " Tr\n" : -1 !== z && (v += "0 Tr\n"),
            -1 !== D && (T.usedRenderingMode = D),
            u = i.align || "left";
            var H, W = gt * w, V = g.internal.pageSize.getWidth(), G = It[St];
            l = i.charSpace || _r,
            h = i.maxWidth || 0,
            f = Object.assign({
                autoencode: !0,
                noBOM: !0
            }, i.flags);
            var Y = [];
            if ("[object Array]" === Object.prototype.toString.call(t)) {
                var J;
                s = A(t),
                "left" !== u && (H = s.map((function(t) {
                    return g.getStringUnitWidth(t, {
                        font: G,
                        charSpace: l,
                        fontSize: gt,
                        doKerning: !1
                    }) * gt / N
                }
                )));
                var X, K = 0;
                if ("right" === u) {
                    r -= H[0],
                    t = [],
                    C = s.length;
                    for (var Z = 0; Z < C; Z++)
                        0 === Z ? (X = br(r),
                        J = yr(n)) : (X = U(K - H[Z]),
                        J = -W),
                        t.push([s[Z], X, J]),
                        K = H[Z]
                } else if ("center" === u) {
                    r -= H[0] / 2,
                    t = [],
                    C = s.length;
                    for (var $ = 0; $ < C; $++)
                        0 === $ ? (X = br(r),
                        J = yr(n)) : (X = U((K - H[$]) / 2),
                        J = -W),
                        t.push([s[$], X, J]),
                        K = H[$]
                } else if ("left" === u) {
                    t = [],
                    C = s.length;
                    for (var Q = 0; Q < C; Q++)
                        t.push(s[Q])
                } else {
                    if ("justify" !== u)
                        throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
                    t = [],
                    C = s.length,
                    h = 0 !== h ? h : V;
                    for (var tt = 0; tt < C; tt++)
                        J = 0 === tt ? yr(n) : -W,
                        X = 0 === tt ? br(r) : 0,
                        tt < C - 1 ? Y.push(E(U((h - H[tt]) / (s[tt].split(" ").length - 1)))) : Y.push(0),
                        t.push([s[tt], X, J])
                }
            }
            var et = "boolean" == typeof i.R2L ? i.R2L : bt;
            !0 === et && (t = _(t, (function(t, e, r) {
                return [t.split("").reverse().join(""), e, r]
            }
            ))),
            o = {
                text: t,
                x: r,
                y: n,
                options: i,
                mutex: {
                    pdfEscape: Ce,
                    activeFontKey: St,
                    fonts: It,
                    activeFontSize: gt
                }
            },
            Tt.publish("postProcessText", o),
            t = o.text,
            y = o.mutex.isHex || !1;
            var rt = It[St].encoding;
            "WinAnsiEncoding" !== rt && "StandardEncoding" !== rt || (t = _(t, (function(t, e, r) {
                return [L(t), e, r]
            }
            ))),
            s = A(t),
            t = [];
            for (var nt, it, at, ot = 0, st = 1, ct = Array.isArray(s[0]) ? st : ot, ut = "", lt = function(t, e, r) {
                var n = "";
                return r instanceof Vt ? (r = "number" == typeof i.angle ? Gt(r, new Vt(1,0,0,1,t,e)) : Gt(new Vt(1,0,0,1,t,e), r),
                S === x.ADVANCED && (r = Gt(new Vt(1,0,0,-1,0,0), r)),
                n = r.join(" ") + " Tm\n") : n = E(t) + " " + E(e) + " Td\n",
                n
            }, ft = 0; ft < s.length; ft++) {
                switch (ut = "",
                ct) {
                case st:
                    at = (y ? "<" : "(") + s[ft][0] + (y ? ">" : ")"),
                    nt = parseFloat(s[ft][1]),
                    it = parseFloat(s[ft][2]);
                    break;
                case ot:
                    at = (y ? "<" : "(") + s[ft] + (y ? ">" : ")"),
                    nt = br(r),
                    it = yr(n)
                }
                void 0 !== Y && void 0 !== Y[ft] && (ut = Y[ft] + " Tw\n"),
                0 === ft ? t.push(ut + lt(nt, it, p) + at) : ct === ot ? t.push(ut + at) : ct === st && t.push(ut + lt(nt, it, p) + at)
            }
            t = ct === ot ? t.join(" Tj\nT* ") : t.join(" Tj\n"),
            t += " Tj\n";
            var dt = "BT\n/";
            return dt += St + " " + gt + " Tf\n",
            dt += E(gt * w) + " TL\n",
            dt += xr + "\n",
            dt += v,
            dt += t,
            ht(dt += "ET"),
            b[St] = !0,
            g
        }
        ;
        var $e = y.__private__.clip = y.clip = function(t) {
            return ht("evenodd" === t ? "W*" : "W"),
            this
        }
        ;
        y.clipEvenOdd = function() {
            return $e("evenodd")
        }
        ,
        y.__private__.discardPath = y.discardPath = function() {
            return ht("n"),
            this
        }
        ;
        var Qe = y.__private__.isValidStyle = function(t) {
            var e = !1;
            return -1 !== [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"].indexOf(t) && (e = !0),
            e
        }
        ;
        y.__private__.setDefaultPathOperation = y.setDefaultPathOperation = function(t) {
            return Qe(t) && (g = t),
            this
        }
        ;
        var tr = y.__private__.getStyle = y.getStyle = function(t) {
            var e = g;
            switch (t) {
            case "D":
            case "S":
                e = "S";
                break;
            case "F":
                e = "f";
                break;
            case "FD":
            case "DF":
                e = "B";
                break;
            case "f":
            case "f*":
            case "B":
            case "B*":
                e = t
            }
            return e
        }
          , er = y.close = function() {
            return ht("h"),
            this
        }
        ;
        y.stroke = function() {
            return ht("S"),
            this
        }
        ,
        y.fill = function(t) {
            return rr("f", t),
            this
        }
        ,
        y.fillEvenOdd = function(t) {
            return rr("f*", t),
            this
        }
        ,
        y.fillStroke = function(t) {
            return rr("B", t),
            this
        }
        ,
        y.fillStrokeEvenOdd = function(t) {
            return rr("B*", t),
            this
        }
        ;
        var rr = function(t, r) {
            "object" === e(r) ? ar(r, t) : ht(t)
        }
          , nr = function(t) {
            null === t || S === x.ADVANCED && void 0 === t || (t = tr(t),
            ht(t))
        };
        function ir(t, e, r, n, i) {
            var a = new B(e || this.boundingBox,r || this.xStep,n || this.yStep,this.gState,i || this.matrix);
            a.stream = this.stream;
            var o = t + "$$" + this.cloneIndex++ + "$$";
            return Jt(o, a),
            a
        }
        var ar = function(t, e) {
            var r = Bt[t.key]
              , n = Ot[r];
            if (n instanceof O)
                ht("q"),
                ht(or(e)),
                n.gState && y.setGState(n.gState),
                ht(t.matrix.toString() + " cm"),
                ht("/" + r + " sh"),
                ht("Q");
            else if (n instanceof B) {
                var i = new Vt(1,0,0,-1,0,Rr());
                t.matrix && (i = i.multiply(t.matrix || Yt),
                r = ir.call(n, t.key, t.boundingBox, t.xStep, t.yStep, i).id),
                ht("q"),
                ht("/Pattern cs"),
                ht("/" + r + " scn"),
                n.gState && y.setGState(n.gState),
                ht(e),
                ht("Q")
            }
        }
          , or = function(t) {
            switch (t) {
            case "f":
            case "F":
                return "W n";
            case "f*":
                return "W* n";
            case "B":
                return "W S";
            case "B*":
                return "W* S";
            case "S":
                return "W S";
            case "n":
                return "W n"
            }
        }
          , sr = y.moveTo = function(t, e) {
            return ht(E(U(t)) + " " + E(H(e)) + " m"),
            this
        }
          , cr = y.lineTo = function(t, e) {
            return ht(E(U(t)) + " " + E(H(e)) + " l"),
            this
        }
          , ur = y.curveTo = function(t, e, r, n, i, a) {
            return ht([E(U(t)), E(H(e)), E(U(r)), E(H(n)), E(U(i)), E(H(a)), "c"].join(" ")),
            this
        }
        ;
        y.__private__.line = y.line = function(t, e, r, n, i) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i))
                throw new Error("Invalid arguments passed to jsPDF.line");
            return S === x.COMPAT ? this.lines([[r - t, n - e]], t, e, [1, 1], i || "S") : this.lines([[r - t, n - e]], t, e, [1, 1]).stroke()
        }
        ,
        y.__private__.lines = y.lines = function(t, e, r, n, i, a) {
            var o, s, c, u, l, h, f, d, p, g, m, v;
            if ("number" == typeof t && (v = r,
            r = e,
            e = t,
            t = v),
            n = n || [1, 1],
            a = a || !1,
            isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n) || !Qe(i) || "boolean" != typeof a)
                throw new Error("Invalid arguments passed to jsPDF.lines");
            for (sr(e, r),
            o = n[0],
            s = n[1],
            u = t.length,
            g = e,
            m = r,
            c = 0; c < u; c++)
                2 === (l = t[c]).length ? (g = l[0] * o + g,
                m = l[1] * s + m,
                cr(g, m)) : (h = l[0] * o + g,
                f = l[1] * s + m,
                d = l[2] * o + g,
                p = l[3] * s + m,
                g = l[4] * o + g,
                m = l[5] * s + m,
                ur(h, f, d, p, g, m));
            return a && er(),
            nr(i),
            this
        }
        ,
        y.path = function(t) {
            for (var e = 0; e < t.length; e++) {
                var r = t[e]
                  , n = r.c;
                switch (r.op) {
                case "m":
                    sr(n[0], n[1]);
                    break;
                case "l":
                    cr(n[0], n[1]);
                    break;
                case "c":
                    ur.apply(this, n);
                    break;
                case "h":
                    er()
                }
            }
            return this
        }
        ,
        y.__private__.rect = y.rect = function(t, e, r, n, i) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i))
                throw new Error("Invalid arguments passed to jsPDF.rect");
            return S === x.COMPAT && (n = -n),
            ht([E(U(t)), E(H(e)), E(U(r)), E(U(n)), "re"].join(" ")),
            nr(i),
            this
        }
        ,
        y.__private__.triangle = y.triangle = function(t, e, r, n, i, a, o) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o))
                throw new Error("Invalid arguments passed to jsPDF.triangle");
            return this.lines([[r - t, n - e], [i - r, a - n], [t - i, e - a]], t, e, [1, 1], o, !0),
            this
        }
        ,
        y.__private__.roundedRect = y.roundedRect = function(t, e, r, n, i, a, o) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o))
                throw new Error("Invalid arguments passed to jsPDF.roundedRect");
            var s = 4 / 3 * (Math.SQRT2 - 1);
            return i = Math.min(i, .5 * r),
            a = Math.min(a, .5 * n),
            this.lines([[r - 2 * i, 0], [i * s, 0, i, a - a * s, i, a], [0, n - 2 * a], [0, a * s, -i * s, a, -i, a], [2 * i - r, 0], [-i * s, 0, -i, -a * s, -i, -a], [0, 2 * a - n], [0, -a * s, i * s, -a, i, -a]], t + i, e, [1, 1], o, !0),
            this
        }
        ,
        y.__private__.ellipse = y.ellipse = function(t, e, r, n, i) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i))
                throw new Error("Invalid arguments passed to jsPDF.ellipse");
            var a = 4 / 3 * (Math.SQRT2 - 1) * r
              , o = 4 / 3 * (Math.SQRT2 - 1) * n;
            return sr(t + r, e),
            ur(t + r, e - o, t + a, e - n, t, e - n),
            ur(t - a, e - n, t - r, e - o, t - r, e),
            ur(t - r, e + o, t - a, e + n, t, e + n),
            ur(t + a, e + n, t + r, e + o, t + r, e),
            nr(i),
            this
        }
        ,
        y.__private__.circle = y.circle = function(t, e, r, n) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || !Qe(n))
                throw new Error("Invalid arguments passed to jsPDF.circle");
            return this.ellipse(t, e, r, r, n)
        }
        ,
        y.setFont = function(t, e, r) {
            return r && (e = j(e, r)),
            St = qe(t, e, {
                disableWarning: !1
            }),
            this
        }
        ;
        var lr = y.__private__.getFont = y.getFont = function() {
            return It[qe.apply(y, arguments)]
        }
        ;
        y.__private__.getFontList = y.getFontList = function() {
            var t, e, r = {};
            for (t in Ct)
                if (Ct.hasOwnProperty(t))
                    for (e in r[t] = [],
                    Ct[t])
                        Ct[t].hasOwnProperty(e) && r[t].push(e);
            return r
        }
        ,
        y.addFont = function(t, e, r, n, i) {
            var a = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
            return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (r = j(r, n)),
            i = i || "Identity-H",
            Pe.call(this, t, e, r, i)
        }
        ;
        var hr, fr = t.lineWidth || .200025, dr = y.__private__.getLineWidth = y.getLineWidth = function() {
            return fr
        }
        , pr = y.__private__.setLineWidth = y.setLineWidth = function(t) {
            return fr = t,
            ht(E(U(t)) + " w"),
            this
        }
        ;
        y.__private__.setLineDash = M.API.setLineDash = M.API.setLineDashPattern = function(t, e) {
            if (t = t || [],
            e = e || 0,
            isNaN(e) || !Array.isArray(t))
                throw new Error("Invalid arguments passed to jsPDF.setLineDash");
            return t = t.map((function(t) {
                return E(U(t))
            }
            )).join(" "),
            e = E(U(e)),
            ht("[" + t + "] " + e + " d"),
            this
        }
        ;
        var gr = y.__private__.getLineHeight = y.getLineHeight = function() {
            return gt * hr
        }
        ;
        y.__private__.getLineHeight = y.getLineHeight = function() {
            return gt * hr
        }
        ;
        var mr = y.__private__.setLineHeightFactor = y.setLineHeightFactor = function(t) {
            return "number" == typeof (t = t || 1.15) && (hr = t),
            this
        }
          , vr = y.__private__.getLineHeightFactor = y.getLineHeightFactor = function() {
            return hr
        }
        ;
        mr(t.lineHeight);
        var br = y.__private__.getHorizontalCoordinate = function(t) {
            return U(t)
        }
          , yr = y.__private__.getVerticalCoordinate = function(t) {
            return S === x.ADVANCED ? t : Rt[$].mediaBox.topRightY - Rt[$].mediaBox.bottomLeftY - U(t)
        }
          , wr = y.__private__.getHorizontalCoordinateString = y.getHorizontalCoordinateString = function(t) {
            return E(br(t))
        }
          , Nr = y.__private__.getVerticalCoordinateString = y.getVerticalCoordinateString = function(t) {
            return E(yr(t))
        }
          , Lr = t.strokeColor || "0 G";
        y.__private__.getStrokeColor = y.getDrawColor = function() {
            return ee(Lr)
        }
        ,
        y.__private__.setStrokeColor = y.setDrawColor = function(t, e, r, n) {
            return Lr = re({
                ch1: t,
                ch2: e,
                ch3: r,
                ch4: n,
                pdfColorType: "draw",
                precision: 2
            }),
            ht(Lr),
            this
        }
        ;
        var Ar = t.fillColor || "0 g";
        y.__private__.getFillColor = y.getFillColor = function() {
            return ee(Ar)
        }
        ,
        y.__private__.setFillColor = y.setFillColor = function(t, e, r, n) {
            return Ar = re({
                ch1: t,
                ch2: e,
                ch3: r,
                ch4: n,
                pdfColorType: "fill",
                precision: 2
            }),
            ht(Ar),
            this
        }
        ;
        var xr = t.textColor || "0 g"
          , Sr = y.__private__.getTextColor = y.getTextColor = function() {
            return ee(xr)
        }
        ;
        y.__private__.setTextColor = y.setTextColor = function(t, e, r, n) {
            return xr = re({
                ch1: t,
                ch2: e,
                ch3: r,
                ch4: n,
                pdfColorType: "text",
                precision: 3
            }),
            this
        }
        ;
        var _r = t.charSpace
          , Pr = y.__private__.getCharSpace = y.getCharSpace = function() {
            return parseFloat(_r || 0)
        }
        ;
        y.__private__.setCharSpace = y.setCharSpace = function(t) {
            if (isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.setCharSpace");
            return _r = t,
            this
        }
        ;
        var kr = 0;
        y.CapJoinStyles = {
            0: 0,
            butt: 0,
            but: 0,
            miter: 0,
            1: 1,
            round: 1,
            rounded: 1,
            circle: 1,
            2: 2,
            projecting: 2,
            project: 2,
            square: 2,
            bevel: 2
        },
        y.__private__.setLineCap = y.setLineCap = function(t) {
            var e = y.CapJoinStyles[t];
            if (void 0 === e)
                throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
            return kr = e,
            ht(e + " J"),
            this
        }
        ;
        var Fr = 0;
        y.__private__.setLineJoin = y.setLineJoin = function(t) {
            var e = y.CapJoinStyles[t];
            if (void 0 === e)
                throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
            return Fr = e,
            ht(e + " j"),
            this
        }
        ,
        y.__private__.setLineMiterLimit = y.__private__.setMiterLimit = y.setLineMiterLimit = y.setMiterLimit = function(t) {
            if (t = t || 0,
            isNaN(t))
                throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
            return ht(E(U(t)) + " M"),
            this
        }
        ,
        y.GState = C,
        y.setGState = function(t) {
            (t = "string" == typeof t ? Mt[Et[t]] : Ir(null, t)).equals(qt) || (ht("/" + t.id + " gs"),
            qt = t)
        }
        ;
        var Ir = function(t, e) {
            if (!t || !Et[t]) {
                var r = !1;
                for (var n in Mt)
                    if (Mt.hasOwnProperty(n) && Mt[n].equals(e)) {
                        r = !0;
                        break
                    }
                if (r)
                    e = Mt[n];
                else {
                    var i = "GS" + (Object.keys(Mt).length + 1).toString(10);
                    Mt[i] = e,
                    e.id = i
                }
                return t && (Et[t] = e.id),
                Tt.publish("addGState", e),
                e
            }
        };
        y.addGState = function(t, e) {
            return Ir(t, e),
            this
        }
        ,
        y.saveGraphicsState = function() {
            return ht("q"),
            jt.push({
                key: St,
                size: gt,
                color: xr
            }),
            this
        }
        ,
        y.restoreGraphicsState = function() {
            ht("Q");
            var t = jt.pop();
            return St = t.key,
            gt = t.size,
            xr = t.color,
            qt = null,
            this
        }
        ,
        y.setCurrentTransformationMatrix = function(t) {
            return ht(t.toString() + " cm"),
            this
        }
        ,
        y.comment = function(t) {
            return ht("#" + t),
            this
        }
        ;
        var Cr = function(t, e) {
            var r = t || 0;
            Object.defineProperty(this, "x", {
                enumerable: !0,
                get: function() {
                    return r
                },
                set: function(t) {
                    isNaN(t) || (r = parseFloat(t))
                }
            });
            var n = e || 0;
            Object.defineProperty(this, "y", {
                enumerable: !0,
                get: function() {
                    return n
                },
                set: function(t) {
                    isNaN(t) || (n = parseFloat(t))
                }
            });
            var i = "pt";
            return Object.defineProperty(this, "type", {
                enumerable: !0,
                get: function() {
                    return i
                },
                set: function(t) {
                    i = t.toString()
                }
            }),
            this
        }
          , jr = function(t, e, r, n) {
            Cr.call(this, t, e),
            this.type = "rect";
            var i = r || 0;
            Object.defineProperty(this, "w", {
                enumerable: !0,
                get: function() {
                    return i
                },
                set: function(t) {
                    isNaN(t) || (i = parseFloat(t))
                }
            });
            var a = n || 0;
            return Object.defineProperty(this, "h", {
                enumerable: !0,
                get: function() {
                    return a
                },
                set: function(t) {
                    isNaN(t) || (a = parseFloat(t))
                }
            }),
            this
        }
          , Or = function() {
            this.page = Dt,
            this.currentPage = $,
            this.pages = ot.slice(0),
            this.pagesContext = Rt.slice(0),
            this.x = Pt,
            this.y = kt,
            this.matrix = Ft,
            this.width = qr($),
            this.height = Rr($),
            this.outputDestination = ct,
            this.id = "",
            this.objectNumber = -1
        };
        Or.prototype.restore = function() {
            Dt = this.page,
            $ = this.currentPage,
            Rt = this.pagesContext,
            ot = this.pages,
            Pt = this.x,
            kt = this.y,
            Ft = this.matrix,
            Dr($, this.width),
            Tr($, this.height),
            ct = this.outputDestination
        }
        ;
        var Br = function(t, e, r, n, i) {
            Wt.push(new Or),
            Dt = $ = 0,
            ot = [],
            Pt = t,
            kt = e,
            Ft = i,
            je([r, n])
        }
          , Mr = function(t) {
            if (Ht[t])
                Wt.pop().restore();
            else {
                var e = new Or
                  , r = "Xo" + (Object.keys(zt).length + 1).toString(10);
                e.id = r,
                Ht[t] = r,
                zt[r] = e,
                Tt.publish("addFormObject", e),
                Wt.pop().restore()
            }
        };
        for (var Er in y.beginFormObject = function(t, e, r, n, i) {
            return Br(t, e, r, n, i),
            this
        }
        ,
        y.endFormObject = function(t) {
            return Mr(t),
            this
        }
        ,
        y.doFormObject = function(t, e) {
            var r = zt[Ht[t]];
            return ht("q"),
            ht(e.toString() + " cm"),
            ht("/" + r.id + " Do"),
            ht("Q"),
            this
        }
        ,
        y.getFormObject = function(t) {
            var e = zt[Ht[t]];
            return {
                x: e.x,
                y: e.y,
                width: e.width,
                height: e.height,
                matrix: e.matrix
            }
        }
        ,
        y.save = function(t, e) {
            return t = t || "generated.pdf",
            (e = e || {}).returnPromise = e.returnPromise || !1,
            !1 === e.returnPromise ? (l(We(He()), t),
            "function" == typeof l.unload && r.setTimeout && setTimeout(l.unload, 911),
            this) : new Promise((function(e, n) {
                try {
                    var i = l(We(He()), t);
                    "function" == typeof l.unload && r.setTimeout && setTimeout(l.unload, 911),
                    e(i)
                } catch (t) {
                    n(t.message)
                }
            }
            ))
        }
        ,
        M.API)
            M.API.hasOwnProperty(Er) && ("events" === Er && M.API.events.length ? function(t, e) {
                var r, n, i;
                for (i = e.length - 1; -1 !== i; i--)
                    r = e[i][0],
                    n = e[i][1],
                    t.subscribe.apply(t, [r].concat("function" == typeof n ? [n] : n))
            }(Tt, M.API.events) : y[Er] = M.API[Er]);
        var qr = y.getPageWidth = function(t) {
            return (Rt[t = t || $].mediaBox.topRightX - Rt[t].mediaBox.bottomLeftX) / _t
        }
          , Dr = y.setPageWidth = function(t, e) {
            Rt[t].mediaBox.topRightX = e * _t + Rt[t].mediaBox.bottomLeftX
        }
          , Rr = y.getPageHeight = function(t) {
            return (Rt[t = t || $].mediaBox.topRightY - Rt[t].mediaBox.bottomLeftY) / _t
        }
          , Tr = y.setPageHeight = function(t, e) {
            Rt[t].mediaBox.topRightY = e * _t + Rt[t].mediaBox.bottomLeftY
        }
        ;
        return y.internal = {
            pdfEscape: Ce,
            getStyle: tr,
            getFont: lr,
            getFontSize: vt,
            getCharSpace: Pr,
            getTextColor: Sr,
            getLineHeight: gr,
            getLineHeightFactor: vr,
            getLineWidth: dr,
            write: ft,
            getHorizontalCoordinate: br,
            getVerticalCoordinate: yr,
            getCoordinateString: wr,
            getVerticalCoordinateString: Nr,
            collections: {},
            newObject: Xt,
            newAdditionalObject: $t,
            newObjectDeferred: Kt,
            newObjectDeferredBegin: Zt,
            getFilters: ne,
            putStream: ie,
            events: Tt,
            scaleFactor: _t,
            pageSize: {
                getWidth: function() {
                    return qr($)
                },
                setWidth: function(t) {
                    Dr($, t)
                },
                getHeight: function() {
                    return Rr($)
                },
                setHeight: function(t) {
                    Tr($, t)
                }
            },
            encryptionOptions: m,
            encryption: Ye,
            getEncryptor: Je,
            output: Ve,
            getNumberOfPages: Ee,
            pages: ot,
            out: ht,
            f2: R,
            f3: T,
            getPageInfo: Xe,
            getPageInfoByObjId: Ke,
            getCurrentPageInfo: Ze,
            getPDFVersion: N,
            Point: Cr,
            Rectangle: jr,
            Matrix: Vt,
            hasHotfix: Ge
        },
        Object.defineProperty(y.internal.pageSize, "width", {
            get: function() {
                return qr($)
            },
            set: function(t) {
                Dr($, t)
            },
            enumerable: !0,
            configurable: !0
        }),
        Object.defineProperty(y.internal.pageSize, "height", {
            get: function() {
                return Rr($)
            },
            set: function(t) {
                Tr($, t)
            },
            enumerable: !0,
            configurable: !0
        }),
        ke.call(y, pt),
        St = "F1",
        Oe(s, a),
        Tt.publish("initialized"),
        y
    }
    k.prototype.lsbFirstWord = function(t) {
        return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255)
    }
    ,
    k.prototype.toHexString = function(t) {
        return t.split("").map((function(t) {
            return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2)
        }
        )).join("")
    }
    ,
    k.prototype.hexToBytes = function(t) {
        for (var e = [], r = 0; r < t.length; r += 2)
            e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));
        return e.join("")
    }
    ,
    k.prototype.processOwnerPassword = function(t, e) {
        return _(A(e).substr(0, 5), t)
    }
    ,
    k.prototype.encryptor = function(t, e) {
        var r = A(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
        return function(t) {
            return _(r, t)
        }
    }
    ,
    C.prototype.equals = function(t) {
        var r, n = "id,objectNumber,equals";
        if (!t || e(t) !== e(this))
            return !1;
        var i = 0;
        for (r in this)
            if (!(n.indexOf(r) >= 0)) {
                if (this.hasOwnProperty(r) && !t.hasOwnProperty(r))
                    return !1;
                if (this[r] !== t[r])
                    return !1;
                i++
            }
        for (r in t)
            t.hasOwnProperty(r) && n.indexOf(r) < 0 && i--;
        return 0 === i
    }
    ,
    M.API = {
        events: []
    },
    M.version = "2.5.1";
    var E = M.API
      , q = 1
      , D = function(t) {
        return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)")
    }
      , R = function(t) {
        return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")")
    }
      , T = function(t) {
        return t.toFixed(2)
    }
      , U = function(t) {
        return t.toFixed(5)
    };
    E.__acroform__ = {};
    var z = function(t, e) {
        t.prototype = Object.create(e.prototype),
        t.prototype.constructor = t
    }
      , H = function(t) {
        return t * q
    }
      , W = function(t) {
        var e = new ct
          , r = Lt.internal.getHeight(t) || 0
          , n = Lt.internal.getWidth(t) || 0;
        return e.BBox = [0, 0, Number(T(n)), Number(T(r))],
        e
    }
      , V = E.__acroform__.setBit = function(t, e) {
        if (t = t || 0,
        e = e || 0,
        isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
        return t |= 1 << e
    }
      , G = E.__acroform__.clearBit = function(t, e) {
        if (t = t || 0,
        e = e || 0,
        isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
        return t &= ~(1 << e)
    }
      , Y = E.__acroform__.getBit = function(t, e) {
        if (isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
        return 0 == (t & 1 << e) ? 0 : 1
    }
      , J = E.__acroform__.getBitForPdf = function(t, e) {
        if (isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
        return Y(t, e - 1)
    }
      , X = E.__acroform__.setBitForPdf = function(t, e) {
        if (isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
        return V(t, e - 1)
    }
      , K = E.__acroform__.clearBitForPdf = function(t, e) {
        if (isNaN(t) || isNaN(e))
            throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
        return G(t, e - 1)
    }
      , Z = E.__acroform__.calculateCoordinates = function(t, e) {
        var r = e.internal.getHorizontalCoordinate
          , n = e.internal.getVerticalCoordinate
          , i = t[0]
          , a = t[1]
          , o = t[2]
          , s = t[3]
          , c = {};
        return c.lowerLeft_X = r(i) || 0,
        c.lowerLeft_Y = n(a + s) || 0,
        c.upperRight_X = r(i + o) || 0,
        c.upperRight_Y = n(a) || 0,
        [Number(T(c.lowerLeft_X)), Number(T(c.lowerLeft_Y)), Number(T(c.upperRight_X)), Number(T(c.upperRight_Y))]
    }
      , $ = function(t) {
        if (t.appearanceStreamContent)
            return t.appearanceStreamContent;
        if (t.V || t.DV) {
            var e = []
              , r = t._V || t.DV
              , n = Q(t, r)
              , i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
            e.push("/Tx BMC"),
            e.push("q"),
            e.push("BT"),
            e.push(t.scope.__private__.encodeColorString(t.color)),
            e.push("/" + i + " " + T(n.fontSize) + " Tf"),
            e.push("1 0 0 1 0 0 Tm"),
            e.push(n.text),
            e.push("ET"),
            e.push("Q"),
            e.push("EMC");
            var a = W(t);
            return a.scope = t.scope,
            a.stream = e.join("\n"),
            a
        }
    }
      , Q = function(t, e) {
        var r = 0 === t.fontSize ? t.maxFontSize : t.fontSize
          , n = {
            text: "",
            fontSize: ""
        }
          , i = (e = ")" == (e = "(" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(" ");
        i = t.multiline ? i.map((function(t) {
            return t.split("\n")
        }
        )) : i.map((function(t) {
            return [t]
        }
        ));
        var a = r
          , o = Lt.internal.getHeight(t) || 0;
        o = o < 0 ? -o : o;
        var s = Lt.internal.getWidth(t) || 0;
        s = s < 0 ? -s : s;
        var c = function(e, r, n) {
            if (e + 1 < i.length) {
                var a = r + " " + i[e + 1][0];
                return tt(a, t, n).width <= s - 4
            }
            return !1
        };
        a++;
        t: for (; a > 0; ) {
            e = "",
            a--;
            var u, l, h = tt("3", t, a).height, f = t.multiline ? o - a : (o - h) / 2, d = f += 2, p = 0, g = 0, m = 0;
            if (a <= 0) {
                e = "(...) Tj\n",
                e += "% Width of Text: " + tt(e, t, a = 12).width + ", FieldWidth:" + s + "\n";
                break
            }
            for (var v = "", b = 0, y = 0; y < i.length; y++)
                if (i.hasOwnProperty(y)) {
                    var w = !1;
                    if (1 !== i[y].length && m !== i[y].length - 1) {
                        if ((h + 2) * (b + 2) + 2 > o)
                            continue t;
                        v += i[y][m],
                        w = !0,
                        g = y,
                        y--
                    } else {
                        v = " " == (v += i[y][m] + " ").substr(v.length - 1) ? v.substr(0, v.length - 1) : v;
                        var N = parseInt(y)
                          , L = c(N, v, a)
                          , A = y >= i.length - 1;
                        if (L && !A) {
                            v += " ",
                            m = 0;
                            continue
                        }
                        if (L || A) {
                            if (A)
                                g = N;
                            else if (t.multiline && (h + 2) * (b + 2) + 2 > o)
                                continue t
                        } else {
                            if (!t.multiline)
                                continue t;
                            if ((h + 2) * (b + 2) + 2 > o)
                                continue t;
                            g = N
                        }
                    }
                    for (var x = "", S = p; S <= g; S++) {
                        var _ = i[S];
                        if (t.multiline) {
                            if (S === g) {
                                x += _[m] + " ",
                                m = (m + 1) % _.length;
                                continue
                            }
                            if (S === p) {
                                x += _[_.length - 1] + " ";
                                continue
                            }
                        }
                        x += _[0] + " "
                    }
                    switch (x = " " == x.substr(x.length - 1) ? x.substr(0, x.length - 1) : x,
                    l = tt(x, t, a).width,
                    t.textAlign) {
                    case "right":
                        u = s - l - 2;
                        break;
                    case "center":
                        u = (s - l) / 2;
                        break;
                    case "left":
                    default:
                        u = 2
                    }
                    e += T(u) + " " + T(d) + " Td\n",
                    e += "(" + D(x) + ") Tj\n",
                    e += -T(u) + " 0 Td\n",
                    d = -(a + 2),
                    l = 0,
                    p = w ? g : g + 1,
                    b++,
                    v = ""
                } else
                    ;
            break
        }
        return n.text = e,
        n.fontSize = a,
        n
    }
      , tt = function(t, e, r) {
        var n = e.scope.internal.getFont(e.fontName, e.fontStyle)
          , i = e.scope.getStringUnitWidth(t, {
            font: n,
            fontSize: parseFloat(r),
            charSpace: 0
        }) * parseFloat(r);
        return {
            height: e.scope.getStringUnitWidth("3", {
                font: n,
                fontSize: parseFloat(r),
                charSpace: 0
            }) * parseFloat(r) * 1.5,
            width: i
        }
    }
      , et = {
        fields: [],
        xForms: [],
        acroFormDictionaryRoot: null,
        printedOut: !1,
        internal: null,
        isInitialized: !1
    }
      , rt = function(t, e) {
        var r = {
            type: "reference",
            object: t
        };
        void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find((function(t) {
            return t.type === r.type && t.object === r.object
        }
        )) && e.internal.getPageInfo(t.page).pageContext.annotations.push(r)
    }
      , nt = function(t, r) {
        for (var n in t)
            if (t.hasOwnProperty(n)) {
                var i = n
                  , a = t[n];
                r.internal.newObjectDeferredBegin(a.objId, !0),
                "object" === e(a) && "function" == typeof a.putStream && a.putStream(),
                delete t[i]
            }
    }
      , it = function(t, r) {
        if (r.scope = t,
        void 0 !== t.internal && (void 0 === t.internal.acroformPlugin || !1 === t.internal.acroformPlugin.isInitialized)) {
            if (lt.FieldNum = 0,
            t.internal.acroformPlugin = JSON.parse(JSON.stringify(et)),
            t.internal.acroformPlugin.acroFormDictionaryRoot)
                throw new Error("Exception while creating AcroformDictionary");
            q = t.internal.scaleFactor,
            t.internal.acroformPlugin.acroFormDictionaryRoot = new ut,
            t.internal.acroformPlugin.acroFormDictionaryRoot.scope = t,
            t.internal.acroformPlugin.acroFormDictionaryRoot._eventID = t.internal.events.subscribe("postPutResources", (function() {
                !function(t) {
                    t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID),
                    delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID,
                    t.internal.acroformPlugin.printedOut = !0
                }(t)
            }
            )),
            t.internal.events.subscribe("buildDocument", (function() {
                !function(t) {
                    t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
                    var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
                    for (var r in e)
                        if (e.hasOwnProperty(r)) {
                            var n = e[r];
                            n.objId = void 0,
                            n.hasAnnotation && rt(n, t)
                        }
                }(t)
            }
            )),
            t.internal.events.subscribe("putCatalog", (function() {
                !function(t) {
                    if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot)
                        throw new Error("putCatalogCallback: Root missing.");
                    t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R")
                }(t)
            }
            )),
            t.internal.events.subscribe("postPutPages", (function(r) {
                !function(t, r) {
                    var n = !t;
                    for (var i in t || (r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0),
                    r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),
                    t = t || r.internal.acroformPlugin.acroFormDictionaryRoot.Kids)
                        if (t.hasOwnProperty(i)) {
                            var a = t[i]
                              , o = []
                              , s = a.Rect;
                            if (a.Rect && (a.Rect = Z(a.Rect, r)),
                            r.internal.newObjectDeferredBegin(a.objId, !0),
                            a.DA = Lt.createDefaultAppearanceStream(a),
                            "object" === e(a) && "function" == typeof a.getKeyValueListForStream && (o = a.getKeyValueListForStream()),
                            a.Rect = s,
                            a.hasAppearanceStream && !a.appearanceStreamContent) {
                                var c = $(a);
                                o.push({
                                    key: "AP",
                                    value: "<</N " + c + ">>"
                                }),
                                r.internal.acroformPlugin.xForms.push(c)
                            }
                            if (a.appearanceStreamContent) {
                                var u = "";
                                for (var l in a.appearanceStreamContent)
                                    if (a.appearanceStreamContent.hasOwnProperty(l)) {
                                        var h = a.appearanceStreamContent[l];
                                        if (u += "/" + l + " ",
                                        u += "<<",
                                        Object.keys(h).length >= 1 || Array.isArray(h)) {
                                            for (var i in h)
                                                if (h.hasOwnProperty(i)) {
                                                    var f = h[i];
                                                    "function" == typeof f && (f = f.call(r, a)),
                                                    u += "/" + i + " " + f + " ",
                                                    r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f)
                                                }
                                        } else
                                            "function" == typeof (f = h) && (f = f.call(r, a)),
                                            u += "/" + i + " " + f,
                                            r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                                        u += ">>"
                                    }
                                o.push({
                                    key: "AP",
                                    value: "<<\n" + u + ">>"
                                })
                            }
                            r.internal.putStream({
                                additionalKeyValues: o,
                                objectId: a.objId
                            }),
                            r.internal.out("endobj")
                        }
                    n && nt(r.internal.acroformPlugin.xForms, r)
                }(r, t)
            }
            )),
            t.internal.acroformPlugin.isInitialized = !0
        }
    }
      , at = E.__acroform__.arrayToPdfArray = function(t, r, n) {
        var i = function(t) {
            return t
        };
        if (Array.isArray(t)) {
            for (var a = "[", o = 0; o < t.length; o++)
                switch (0 !== o && (a += " "),
                e(t[o])) {
                case "boolean":
                case "number":
                case "object":
                    a += t[o].toString();
                    break;
                case "string":
                    "/" !== t[o].substr(0, 1) ? (void 0 !== r && n && (i = n.internal.getEncryptor(r)),
                    a += "(" + D(i(t[o].toString())) + ")") : a += t[o].toString()
                }
            return a += "]"
        }
        throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray")
    }
    ;
    var ot = function(t, e, r) {
        var n = function(t) {
            return t
        };
        return void 0 !== e && r && (n = r.internal.getEncryptor(e)),
        (t = t || "").toString(),
        t = "(" + D(n(t)) + ")"
    }
      , st = function() {
        this._objId = void 0,
        this._scope = void 0,
        Object.defineProperty(this, "objId", {
            get: function() {
                if (void 0 === this._objId) {
                    if (void 0 === this.scope)
                        return;
                    this._objId = this.scope.internal.newObjectDeferred()
                }
                return this._objId
            },
            set: function(t) {
                this._objId = t
            }
        }),
        Object.defineProperty(this, "scope", {
            value: this._scope,
            writable: !0
        })
    };
    st.prototype.toString = function() {
        return this.objId + " 0 R"
    }
    ,
    st.prototype.putStream = function() {
        var t = this.getKeyValueListForStream();
        this.scope.internal.putStream({
            data: this.stream,
            additionalKeyValues: t,
            objectId: this.objId
        }),
        this.scope.internal.out("endobj")
    }
    ,
    st.prototype.getKeyValueListForStream = function() {
        var t = []
          , e = Object.getOwnPropertyNames(this).filter((function(t) {
            return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1)
        }
        ));
        for (var r in e)
            if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
                var n = e[r]
                  , i = this[n];
                i && (Array.isArray(i) ? t.push({
                    key: n,
                    value: at(i, this.objId, this.scope)
                }) : i instanceof st ? (i.scope = this.scope,
                t.push({
                    key: n,
                    value: i.objId + " 0 R"
                })) : "function" != typeof i && t.push({
                    key: n,
                    value: i
                }))
            }
        return t
    }
    ;
    var ct = function() {
        st.call(this),
        Object.defineProperty(this, "Type", {
            value: "/XObject",
            configurable: !1,
            writable: !0
        }),
        Object.defineProperty(this, "Subtype", {
            value: "/Form",
            configurable: !1,
            writable: !0
        }),
        Object.defineProperty(this, "FormType", {
            value: 1,
            configurable: !1,
            writable: !0
        });
        var t, e = [];
        Object.defineProperty(this, "BBox", {
            configurable: !1,
            get: function() {
                return e
            },
            set: function(t) {
                e = t
            }
        }),
        Object.defineProperty(this, "Resources", {
            value: "2 0 R",
            configurable: !1,
            writable: !0
        }),
        Object.defineProperty(this, "stream", {
            enumerable: !1,
            configurable: !0,
            set: function(e) {
                t = e.trim()
            },
            get: function() {
                return t || null
            }
        })
    };
    z(ct, st);
    var ut = function() {
        st.call(this);
        var t, e = [];
        Object.defineProperty(this, "Kids", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return e.length > 0 ? e : void 0
            }
        }),
        Object.defineProperty(this, "Fields", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return e
            }
        }),
        Object.defineProperty(this, "DA", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                if (t) {
                    var e = function(t) {
                        return t
                    };
                    return this.scope && (e = this.scope.internal.getEncryptor(this.objId)),
                    "(" + D(e(t)) + ")"
                }
            },
            set: function(e) {
                t = e
            }
        })
    };
    z(ut, st);
    var lt = function t() {
        st.call(this);
        var e = 4;
        Object.defineProperty(this, "F", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return e
            },
            set: function(t) {
                if (isNaN(t))
                    throw new Error('Invalid value "' + t + '" for attribute F supplied.');
                e = t
            }
        }),
        Object.defineProperty(this, "showWhenPrinted", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(e, 3))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.F = X(e, 3) : this.F = K(e, 3)
            }
        });
        var r = 0;
        Object.defineProperty(this, "Ff", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return r
            },
            set: function(t) {
                if (isNaN(t))
                    throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
                r = t
            }
        });
        var n = [];
        Object.defineProperty(this, "Rect", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                if (0 !== n.length)
                    return n
            },
            set: function(t) {
                n = void 0 !== t ? t : []
            }
        }),
        Object.defineProperty(this, "x", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return !n || isNaN(n[0]) ? 0 : n[0]
            },
            set: function(t) {
                n[0] = t
            }
        }),
        Object.defineProperty(this, "y", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return !n || isNaN(n[1]) ? 0 : n[1]
            },
            set: function(t) {
                n[1] = t
            }
        }),
        Object.defineProperty(this, "width", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return !n || isNaN(n[2]) ? 0 : n[2]
            },
            set: function(t) {
                n[2] = t
            }
        }),
        Object.defineProperty(this, "height", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return !n || isNaN(n[3]) ? 0 : n[3]
            },
            set: function(t) {
                n[3] = t
            }
        });
        var i = "";
        Object.defineProperty(this, "FT", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return i
            },
            set: function(t) {
                switch (t) {
                case "/Btn":
                case "/Tx":
                case "/Ch":
                case "/Sig":
                    i = t;
                    break;
                default:
                    throw new Error('Invalid value "' + t + '" for attribute FT supplied.')
                }
            }
        });
        var a = null;
        Object.defineProperty(this, "T", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                if (!a || a.length < 1) {
                    if (this instanceof bt)
                        return;
                    a = "FieldObject" + t.FieldNum++
                }
                var e = function(t) {
                    return t
                };
                return this.scope && (e = this.scope.internal.getEncryptor(this.objId)),
                "(" + D(e(a)) + ")"
            },
            set: function(t) {
                a = t.toString()
            }
        }),
        Object.defineProperty(this, "fieldName", {
            configurable: !0,
            enumerable: !0,
            get: function() {
                return a
            },
            set: function(t) {
                a = t
            }
        });
        var o = "helvetica";
        Object.defineProperty(this, "fontName", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return o
            },
            set: function(t) {
                o = t
            }
        });
        var s = "normal";
        Object.defineProperty(this, "fontStyle", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return s
            },
            set: function(t) {
                s = t
            }
        });
        var c = 0;
        Object.defineProperty(this, "fontSize", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return c
            },
            set: function(t) {
                c = t
            }
        });
        var u = void 0;
        Object.defineProperty(this, "maxFontSize", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return void 0 === u ? 50 / q : u
            },
            set: function(t) {
                u = t
            }
        });
        var l = "black";
        Object.defineProperty(this, "color", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return l
            },
            set: function(t) {
                l = t
            }
        });
        var h = "/F1 0 Tf 0 g";
        Object.defineProperty(this, "DA", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                if (!(!h || this instanceof bt || this instanceof wt))
                    return ot(h, this.objId, this.scope)
            },
            set: function(t) {
                t = t.toString(),
                h = t
            }
        });
        var f = null;
        Object.defineProperty(this, "DV", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                if (f)
                    return this instanceof gt == !1 ? ot(f, this.objId, this.scope) : f
            },
            set: function(t) {
                t = t.toString(),
                f = this instanceof gt == !1 ? "(" === t.substr(0, 1) ? R(t.substr(1, t.length - 2)) : R(t) : t
            }
        }),
        Object.defineProperty(this, "defaultValue", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return this instanceof gt == !0 ? R(f.substr(1, f.length - 1)) : f
            },
            set: function(t) {
                t = t.toString(),
                f = this instanceof gt == !0 ? "/" + t : t
            }
        });
        var d = null;
        Object.defineProperty(this, "_V", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                if (d)
                    return d
            },
            set: function(t) {
                this.V = t
            }
        }),
        Object.defineProperty(this, "V", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                if (d)
                    return this instanceof gt == !1 ? ot(d, this.objId, this.scope) : d
            },
            set: function(t) {
                t = t.toString(),
                d = this instanceof gt == !1 ? "(" === t.substr(0, 1) ? R(t.substr(1, t.length - 2)) : R(t) : t
            }
        }),
        Object.defineProperty(this, "value", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return this instanceof gt == !0 ? R(d.substr(1, d.length - 1)) : d
            },
            set: function(t) {
                t = t.toString(),
                d = this instanceof gt == !0 ? "/" + t : t
            }
        }),
        Object.defineProperty(this, "hasAnnotation", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return this.Rect
            }
        }),
        Object.defineProperty(this, "Type", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return this.hasAnnotation ? "/Annot" : null
            }
        }),
        Object.defineProperty(this, "Subtype", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return this.hasAnnotation ? "/Widget" : null
            }
        });
        var p, g = !1;
        Object.defineProperty(this, "hasAppearanceStream", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return g
            },
            set: function(t) {
                t = Boolean(t),
                g = t
            }
        }),
        Object.defineProperty(this, "page", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                if (p)
                    return p
            },
            set: function(t) {
                p = t
            }
        }),
        Object.defineProperty(this, "readOnly", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 1))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 1) : this.Ff = K(this.Ff, 1)
            }
        }),
        Object.defineProperty(this, "required", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 2))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 2) : this.Ff = K(this.Ff, 2)
            }
        }),
        Object.defineProperty(this, "noExport", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 3))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 3) : this.Ff = K(this.Ff, 3)
            }
        });
        var m = null;
        Object.defineProperty(this, "Q", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                if (null !== m)
                    return m
            },
            set: function(t) {
                if (-1 === [0, 1, 2].indexOf(t))
                    throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
                m = t
            }
        }),
        Object.defineProperty(this, "textAlign", {
            get: function() {
                var t;
                switch (m) {
                case 0:
                default:
                    t = "left";
                    break;
                case 1:
                    t = "center";
                    break;
                case 2:
                    t = "right"
                }
                return t
            },
            configurable: !0,
            enumerable: !0,
            set: function(t) {
                switch (t) {
                case "right":
                case 2:
                    m = 2;
                    break;
                case "center":
                case 1:
                    m = 1;
                    break;
                case "left":
                case 0:
                default:
                    m = 0
                }
            }
        })
    };
    z(lt, st);
    var ht = function() {
        lt.call(this),
        this.FT = "/Ch",
        this.V = "()",
        this.fontName = "zapfdingbats";
        var t = 0;
        Object.defineProperty(this, "TI", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return t
            },
            set: function(e) {
                t = e
            }
        }),
        Object.defineProperty(this, "topIndex", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return t
            },
            set: function(e) {
                t = e
            }
        });
        var e = [];
        Object.defineProperty(this, "Opt", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return at(e, this.objId, this.scope)
            },
            set: function(t) {
                var r, n;
                n = [],
                "string" == typeof (r = t) && (n = function(t, e, r) {
                    r || (r = 1);
                    for (var n, i = []; n = e.exec(t); )
                        i.push(n[r]);
                    return i
                }(r, /\((.*?)\)/g)),
                e = n
            }
        }),
        this.getOptions = function() {
            return e
        }
        ,
        this.setOptions = function(t) {
            e = t,
            this.sort && e.sort()
        }
        ,
        this.addOption = function(t) {
            t = (t = t || "").toString(),
            e.push(t),
            this.sort && e.sort()
        }
        ,
        this.removeOption = function(t, r) {
            for (r = r || !1,
            t = (t = t || "").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1),
            !1 !== r); )
                ;
        }
        ,
        Object.defineProperty(this, "combo", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 18))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 18) : this.Ff = K(this.Ff, 18)
            }
        }),
        Object.defineProperty(this, "edit", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 19))
            },
            set: function(t) {
                !0 === this.combo && (!0 === Boolean(t) ? this.Ff = X(this.Ff, 19) : this.Ff = K(this.Ff, 19))
            }
        }),
        Object.defineProperty(this, "sort", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 20))
            },
            set: function(t) {
                !0 === Boolean(t) ? (this.Ff = X(this.Ff, 20),
                e.sort()) : this.Ff = K(this.Ff, 20)
            }
        }),
        Object.defineProperty(this, "multiSelect", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 22))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 22) : this.Ff = K(this.Ff, 22)
            }
        }),
        Object.defineProperty(this, "doNotSpellCheck", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 23))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 23) : this.Ff = K(this.Ff, 23)
            }
        }),
        Object.defineProperty(this, "commitOnSelChange", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 27))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 27) : this.Ff = K(this.Ff, 27)
            }
        }),
        this.hasAppearanceStream = !1
    };
    z(ht, lt);
    var ft = function() {
        ht.call(this),
        this.fontName = "helvetica",
        this.combo = !1
    };
    z(ft, ht);
    var dt = function() {
        ft.call(this),
        this.combo = !0
    };
    z(dt, ft);
    var pt = function() {
        dt.call(this),
        this.edit = !0
    };
    z(pt, dt);
    var gt = function() {
        lt.call(this),
        this.FT = "/Btn",
        Object.defineProperty(this, "noToggleToOff", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 15))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 15) : this.Ff = K(this.Ff, 15)
            }
        }),
        Object.defineProperty(this, "radio", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 16))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 16) : this.Ff = K(this.Ff, 16)
            }
        }),
        Object.defineProperty(this, "pushButton", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 17))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 17) : this.Ff = K(this.Ff, 17)
            }
        }),
        Object.defineProperty(this, "radioIsUnison", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 26))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 26) : this.Ff = K(this.Ff, 26)
            }
        });
        var t, r = {};
        Object.defineProperty(this, "MK", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                var t = function(t) {
                    return t
                };
                if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)),
                0 !== Object.keys(r).length) {
                    var e, n = [];
                    for (e in n.push("<<"),
                    r)
                        n.push("/" + e + " (" + D(t(r[e])) + ")");
                    return n.push(">>"),
                    n.join("\n")
                }
            },
            set: function(t) {
                "object" === e(t) && (r = t)
            }
        }),
        Object.defineProperty(this, "caption", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return r.CA || ""
            },
            set: function(t) {
                "string" == typeof t && (r.CA = t)
            }
        }),
        Object.defineProperty(this, "AS", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return t
            },
            set: function(e) {
                t = e
            }
        }),
        Object.defineProperty(this, "appearanceState", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return t.substr(1, t.length - 1)
            },
            set: function(e) {
                t = "/" + e
            }
        })
    };
    z(gt, lt);
    var mt = function() {
        gt.call(this),
        this.pushButton = !0
    };
    z(mt, gt);
    var vt = function() {
        gt.call(this),
        this.radio = !0,
        this.pushButton = !1;
        var t = [];
        Object.defineProperty(this, "Kids", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return t
            },
            set: function(e) {
                t = void 0 !== e ? e : []
            }
        })
    };
    z(vt, gt);
    var bt = function() {
        var t, r;
        lt.call(this),
        Object.defineProperty(this, "Parent", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return t
            },
            set: function(e) {
                t = e
            }
        }),
        Object.defineProperty(this, "optionName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
                return r
            },
            set: function(t) {
                r = t
            }
        });
        var n, i = {};
        Object.defineProperty(this, "MK", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                var t = function(t) {
                    return t
                };
                this.scope && (t = this.scope.internal.getEncryptor(this.objId));
                var e, r = [];
                for (e in r.push("<<"),
                i)
                    r.push("/" + e + " (" + D(t(i[e])) + ")");
                return r.push(">>"),
                r.join("\n")
            },
            set: function(t) {
                "object" === e(t) && (i = t)
            }
        }),
        Object.defineProperty(this, "caption", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return i.CA || ""
            },
            set: function(t) {
                "string" == typeof t && (i.CA = t)
            }
        }),
        Object.defineProperty(this, "AS", {
            enumerable: !1,
            configurable: !1,
            get: function() {
                return n
            },
            set: function(t) {
                n = t
            }
        }),
        Object.defineProperty(this, "appearanceState", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return n.substr(1, n.length - 1)
            },
            set: function(t) {
                n = "/" + t
            }
        }),
        this.caption = "l",
        this.appearanceState = "Off",
        this._AppearanceType = Lt.RadioButton.Circle,
        this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName)
    };
    z(bt, lt),
    vt.prototype.setAppearance = function(t) {
        if (!("createAppearanceStream"in t) || !("getCA"in t))
            throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
        for (var e in this.Kids)
            if (this.Kids.hasOwnProperty(e)) {
                var r = this.Kids[e];
                r.appearanceStreamContent = t.createAppearanceStream(r.optionName),
                r.caption = t.getCA()
            }
    }
    ,
    vt.prototype.createOption = function(t) {
        var e = new bt;
        return e.Parent = this,
        e.optionName = t,
        this.Kids.push(e),
        At.call(this.scope, e),
        e
    }
    ;
    var yt = function() {
        gt.call(this),
        this.fontName = "zapfdingbats",
        this.caption = "3",
        this.appearanceState = "On",
        this.value = "On",
        this.textAlign = "center",
        this.appearanceStreamContent = Lt.CheckBox.createAppearanceStream()
    };
    z(yt, gt);
    var wt = function() {
        lt.call(this),
        this.FT = "/Tx",
        Object.defineProperty(this, "multiline", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 13))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 13) : this.Ff = K(this.Ff, 13)
            }
        }),
        Object.defineProperty(this, "fileSelect", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 21))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 21) : this.Ff = K(this.Ff, 21)
            }
        }),
        Object.defineProperty(this, "doNotSpellCheck", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 23))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 23) : this.Ff = K(this.Ff, 23)
            }
        }),
        Object.defineProperty(this, "doNotScroll", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 24))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 24) : this.Ff = K(this.Ff, 24)
            }
        }),
        Object.defineProperty(this, "comb", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 25))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 25) : this.Ff = K(this.Ff, 25)
            }
        }),
        Object.defineProperty(this, "richText", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 26))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 26) : this.Ff = K(this.Ff, 26)
            }
        });
        var t = null;
        Object.defineProperty(this, "MaxLen", {
            enumerable: !0,
            configurable: !1,
            get: function() {
                return t
            },
            set: function(e) {
                t = e
            }
        }),
        Object.defineProperty(this, "maxLength", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return t
            },
            set: function(e) {
                Number.isInteger(e) && (t = e)
            }
        }),
        Object.defineProperty(this, "hasAppearanceStream", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return this.V || this.DV
            }
        })
    };
    z(wt, lt);
    var Nt = function() {
        wt.call(this),
        Object.defineProperty(this, "password", {
            enumerable: !0,
            configurable: !0,
            get: function() {
                return Boolean(J(this.Ff, 14))
            },
            set: function(t) {
                !0 === Boolean(t) ? this.Ff = X(this.Ff, 14) : this.Ff = K(this.Ff, 14)
            }
        }),
        this.password = !0
    };
    z(Nt, wt);
    var Lt = {
        CheckBox: {
            createAppearanceStream: function() {
                return {
                    N: {
                        On: Lt.CheckBox.YesNormal
                    },
                    D: {
                        On: Lt.CheckBox.YesPushDown,
                        Off: Lt.CheckBox.OffPushDown
                    }
                }
            },
            YesPushDown: function(t) {
                var e = W(t);
                e.scope = t.scope;
                var r = []
                  , n = t.scope.internal.getFont(t.fontName, t.fontStyle).id
                  , i = t.scope.__private__.encodeColorString(t.color)
                  , a = Q(t, t.caption);
                return r.push("0.749023 g"),
                r.push("0 0 " + T(Lt.internal.getWidth(t)) + " " + T(Lt.internal.getHeight(t)) + " re"),
                r.push("f"),
                r.push("BMC"),
                r.push("q"),
                r.push("0 0 1 rg"),
                r.push("/" + n + " " + T(a.fontSize) + " Tf " + i),
                r.push("BT"),
                r.push(a.text),
                r.push("ET"),
                r.push("Q"),
                r.push("EMC"),
                e.stream = r.join("\n"),
                e
            },
            YesNormal: function(t) {
                var e = W(t);
                e.scope = t.scope;
                var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id
                  , n = t.scope.__private__.encodeColorString(t.color)
                  , i = []
                  , a = Lt.internal.getHeight(t)
                  , o = Lt.internal.getWidth(t)
                  , s = Q(t, t.caption);
                return i.push("1 g"),
                i.push("0 0 " + T(o) + " " + T(a) + " re"),
                i.push("f"),
                i.push("q"),
                i.push("0 0 1 rg"),
                i.push("0 0 " + T(o - 1) + " " + T(a - 1) + " re"),
                i.push("W"),
                i.push("n"),
                i.push("0 g"),
                i.push("BT"),
                i.push("/" + r + " " + T(s.fontSize) + " Tf " + n),
                i.push(s.text),
                i.push("ET"),
                i.push("Q"),
                e.stream = i.join("\n"),
                e
            },
            OffPushDown: function(t) {
                var e = W(t);
                e.scope = t.scope;
                var r = [];
                return r.push("0.749023 g"),
                r.push("0 0 " + T(Lt.internal.getWidth(t)) + " " + T(Lt.internal.getHeight(t)) + " re"),
                r.push("f"),
                e.stream = r.join("\n"),
                e
            }
        },
        RadioButton: {
            Circle: {
                createAppearanceStream: function(t) {
                    var e = {
                        D: {
                            Off: Lt.RadioButton.Circle.OffPushDown
                        },
                        N: {}
                    };
                    return e.N[t] = Lt.RadioButton.Circle.YesNormal,
                    e.D[t] = Lt.RadioButton.Circle.YesPushDown,
                    e
                },
                getCA: function() {
                    return "l"
                },
                YesNormal: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = []
                      , n = Lt.internal.getWidth(t) <= Lt.internal.getHeight(t) ? Lt.internal.getWidth(t) / 4 : Lt.internal.getHeight(t) / 4;
                    n = Number((.9 * n).toFixed(5));
                    var i = Lt.internal.Bezier_C
                      , a = Number((n * i).toFixed(5));
                    return r.push("q"),
                    r.push("1 0 0 1 " + U(Lt.internal.getWidth(t) / 2) + " " + U(Lt.internal.getHeight(t) / 2) + " cm"),
                    r.push(n + " 0 m"),
                    r.push(n + " " + a + " " + a + " " + n + " 0 " + n + " c"),
                    r.push("-" + a + " " + n + " -" + n + " " + a + " -" + n + " 0 c"),
                    r.push("-" + n + " -" + a + " -" + a + " -" + n + " 0 -" + n + " c"),
                    r.push(a + " -" + n + " " + n + " -" + a + " " + n + " 0 c"),
                    r.push("f"),
                    r.push("Q"),
                    e.stream = r.join("\n"),
                    e
                },
                YesPushDown: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = []
                      , n = Lt.internal.getWidth(t) <= Lt.internal.getHeight(t) ? Lt.internal.getWidth(t) / 4 : Lt.internal.getHeight(t) / 4;
                    n = Number((.9 * n).toFixed(5));
                    var i = Number((2 * n).toFixed(5))
                      , a = Number((i * Lt.internal.Bezier_C).toFixed(5))
                      , o = Number((n * Lt.internal.Bezier_C).toFixed(5));
                    return r.push("0.749023 g"),
                    r.push("q"),
                    r.push("1 0 0 1 " + U(Lt.internal.getWidth(t) / 2) + " " + U(Lt.internal.getHeight(t) / 2) + " cm"),
                    r.push(i + " 0 m"),
                    r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"),
                    r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"),
                    r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"),
                    r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"),
                    r.push("f"),
                    r.push("Q"),
                    r.push("0 g"),
                    r.push("q"),
                    r.push("1 0 0 1 " + U(Lt.internal.getWidth(t) / 2) + " " + U(Lt.internal.getHeight(t) / 2) + " cm"),
                    r.push(n + " 0 m"),
                    r.push(n + " " + o + " " + o + " " + n + " 0 " + n + " c"),
                    r.push("-" + o + " " + n + " -" + n + " " + o + " -" + n + " 0 c"),
                    r.push("-" + n + " -" + o + " -" + o + " -" + n + " 0 -" + n + " c"),
                    r.push(o + " -" + n + " " + n + " -" + o + " " + n + " 0 c"),
                    r.push("f"),
                    r.push("Q"),
                    e.stream = r.join("\n"),
                    e
                },
                OffPushDown: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = []
                      , n = Lt.internal.getWidth(t) <= Lt.internal.getHeight(t) ? Lt.internal.getWidth(t) / 4 : Lt.internal.getHeight(t) / 4;
                    n = Number((.9 * n).toFixed(5));
                    var i = Number((2 * n).toFixed(5))
                      , a = Number((i * Lt.internal.Bezier_C).toFixed(5));
                    return r.push("0.749023 g"),
                    r.push("q"),
                    r.push("1 0 0 1 " + U(Lt.internal.getWidth(t) / 2) + " " + U(Lt.internal.getHeight(t) / 2) + " cm"),
                    r.push(i + " 0 m"),
                    r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"),
                    r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"),
                    r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"),
                    r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"),
                    r.push("f"),
                    r.push("Q"),
                    e.stream = r.join("\n"),
                    e
                }
            },
            Cross: {
                createAppearanceStream: function(t) {
                    var e = {
                        D: {
                            Off: Lt.RadioButton.Cross.OffPushDown
                        },
                        N: {}
                    };
                    return e.N[t] = Lt.RadioButton.Cross.YesNormal,
                    e.D[t] = Lt.RadioButton.Cross.YesPushDown,
                    e
                },
                getCA: function() {
                    return "8"
                },
                YesNormal: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = []
                      , n = Lt.internal.calculateCross(t);
                    return r.push("q"),
                    r.push("1 1 " + T(Lt.internal.getWidth(t) - 2) + " " + T(Lt.internal.getHeight(t) - 2) + " re"),
                    r.push("W"),
                    r.push("n"),
                    r.push(T(n.x1.x) + " " + T(n.x1.y) + " m"),
                    r.push(T(n.x2.x) + " " + T(n.x2.y) + " l"),
                    r.push(T(n.x4.x) + " " + T(n.x4.y) + " m"),
                    r.push(T(n.x3.x) + " " + T(n.x3.y) + " l"),
                    r.push("s"),
                    r.push("Q"),
                    e.stream = r.join("\n"),
                    e
                },
                YesPushDown: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = Lt.internal.calculateCross(t)
                      , n = [];
                    return n.push("0.749023 g"),
                    n.push("0 0 " + T(Lt.internal.getWidth(t)) + " " + T(Lt.internal.getHeight(t)) + " re"),
                    n.push("f"),
                    n.push("q"),
                    n.push("1 1 " + T(Lt.internal.getWidth(t) - 2) + " " + T(Lt.internal.getHeight(t) - 2) + " re"),
                    n.push("W"),
                    n.push("n"),
                    n.push(T(r.x1.x) + " " + T(r.x1.y) + " m"),
                    n.push(T(r.x2.x) + " " + T(r.x2.y) + " l"),
                    n.push(T(r.x4.x) + " " + T(r.x4.y) + " m"),
                    n.push(T(r.x3.x) + " " + T(r.x3.y) + " l"),
                    n.push("s"),
                    n.push("Q"),
                    e.stream = n.join("\n"),
                    e
                },
                OffPushDown: function(t) {
                    var e = W(t);
                    e.scope = t.scope;
                    var r = [];
                    return r.push("0.749023 g"),
                    r.push("0 0 " + T(Lt.internal.getWidth(t)) + " " + T(Lt.internal.getHeight(t)) + " re"),
                    r.push("f"),
                    e.stream = r.join("\n"),
                    e
                }
            }
        },
        createDefaultAppearanceStream: function(t) {
            var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id
              , r = t.scope.__private__.encodeColorString(t.color);
            return "/" + e + " " + t.fontSize + " Tf " + r
        }
    };
    Lt.internal = {
        Bezier_C: .551915024494,
        calculateCross: function(t) {
            var e = Lt.internal.getWidth(t)
              , r = Lt.internal.getHeight(t)
              , n = Math.min(e, r);
            return {
                x1: {
                    x: (e - n) / 2,
                    y: (r - n) / 2 + n
                },
                x2: {
                    x: (e - n) / 2 + n,
                    y: (r - n) / 2
                },
                x3: {
                    x: (e - n) / 2,
                    y: (r - n) / 2
                },
                x4: {
                    x: (e - n) / 2 + n,
                    y: (r - n) / 2 + n
                }
            }
        }
    },
    Lt.internal.getWidth = function(t) {
        var r = 0;
        return "object" === e(t) && (r = H(t.Rect[2])),
        r
    }
    ,
    Lt.internal.getHeight = function(t) {
        var r = 0;
        return "object" === e(t) && (r = H(t.Rect[3])),
        r
    }
    ;
    var At = E.addField = function(t) {
        if (it(this, t),
        !(t instanceof lt))
            throw new Error("Invalid argument passed to jsPDF.addField.");
        var e;
        return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1,
        e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null),
        e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e),
        t.page = t.scope.internal.getCurrentPageInfo().pageNumber,
        this
    }
    ;
    E.AcroFormChoiceField = ht,
    E.AcroFormListBox = ft,
    E.AcroFormComboBox = dt,
    E.AcroFormEditBox = pt,
    E.AcroFormButton = gt,
    E.AcroFormPushButton = mt,
    E.AcroFormRadioButton = vt,
    E.AcroFormCheckBox = yt,
    E.AcroFormTextField = wt,
    E.AcroFormPasswordField = Nt,
    E.AcroFormAppearance = Lt,
    E.AcroForm = {
        ChoiceField: ht,
        ListBox: ft,
        ComboBox: dt,
        EditBox: pt,
        Button: gt,
        PushButton: mt,
        RadioButton: vt,
        CheckBox: yt,
        TextField: wt,
        PasswordField: Nt,
        Appearance: Lt
    },
    M.AcroForm = {
        ChoiceField: ht,
        ListBox: ft,
        ComboBox: dt,
        EditBox: pt,
        Button: gt,
        PushButton: mt,
        RadioButton: vt,
        CheckBox: yt,
        TextField: wt,
        PasswordField: Nt,
        Appearance: Lt
    };
    var xt = M.AcroForm;
    function St(t) {
        return t.reduce((function(t, e, r) {
            return t[e] = r,
            t
        }
        ), {})
    }
    !function(t) {
        t.__addimage__ = {};
        var r = "UNKNOWN"
          , n = {
            PNG: [[137, 80, 78, 71]],
            TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]],
            JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0], [255, 216, 255, 219], [255, 216, 255, 238]],
            JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
            GIF87a: [[71, 73, 70, 56, 55, 97]],
            GIF89a: [[71, 73, 70, 56, 57, 97]],
            WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]],
            BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]]
        }
          , i = t.__addimage__.getImageFileTypeByImageData = function(t, e) {
            var i, a, o, s, c, u = r;
            if ("RGBA" === (e = e || r) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && "height"in t && "width"in t)
                return "RGBA";
            if (x(t))
                for (c in n)
                    for (o = n[c],
                    i = 0; i < o.length; i += 1) {
                        for (s = !0,
                        a = 0; a < o[i].length; a += 1)
                            if (void 0 !== o[i][a] && o[i][a] !== t[a]) {
                                s = !1;
                                break
                            }
                        if (!0 === s) {
                            u = c;
                            break
                        }
                    }
            else
                for (c in n)
                    for (o = n[c],
                    i = 0; i < o.length; i += 1) {
                        for (s = !0,
                        a = 0; a < o[i].length; a += 1)
                            if (void 0 !== o[i][a] && o[i][a] !== t.charCodeAt(a)) {
                                s = !1;
                                break
                            }
                        if (!0 === s) {
                            u = c;
                            break
                        }
                    }
            return u === r && e !== r && (u = e),
            u
        }
          , a = function t(e) {
            for (var r = this.internal.write, n = this.internal.putStream, i = (0,
            this.internal.getFilters)(); -1 !== i.indexOf("FlateEncode"); )
                i.splice(i.indexOf("FlateEncode"), 1);
            e.objectId = this.internal.newObject();
            var a = [];
            if (a.push({
                key: "Type",
                value: "/XObject"
            }),
            a.push({
                key: "Subtype",
                value: "/Image"
            }),
            a.push({
                key: "Width",
                value: e.width
            }),
            a.push({
                key: "Height",
                value: e.height
            }),
            e.colorSpace === b.INDEXED ? a.push({
                key: "ColorSpace",
                value: "[/Indexed /DeviceRGB " + (e.palette.length / 3 - 1) + " " + ("sMask"in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + " 0 R]"
            }) : (a.push({
                key: "ColorSpace",
                value: "/" + e.colorSpace
            }),
            e.colorSpace === b.DEVICE_CMYK && a.push({
                key: "Decode",
                value: "[1 0 1 0 1 0 1 0]"
            })),
            a.push({
                key: "BitsPerComponent",
                value: e.bitsPerComponent
            }),
            "decodeParameters"in e && void 0 !== e.decodeParameters && a.push({
                key: "DecodeParms",
                value: "<<" + e.decodeParameters + ">>"
            }),
            "transparency"in e && Array.isArray(e.transparency)) {
                for (var o = "", s = 0, c = e.transparency.length; s < c; s++)
                    o += e.transparency[s] + " " + e.transparency[s] + " ";
                a.push({
                    key: "Mask",
                    value: "[" + o + "]"
                })
            }
            void 0 !== e.sMask && a.push({
                key: "SMask",
                value: e.objectId + 1 + " 0 R"
            });
            var u = void 0 !== e.filter ? ["/" + e.filter] : void 0;
            if (n({
                data: e.data,
                additionalKeyValues: a,
                alreadyAppliedFilters: u,
                objectId: e.objectId
            }),
            r("endobj"),
            "sMask"in e && void 0 !== e.sMask) {
                var l = "/Predictor " + e.predictor + " /Colors 1 /BitsPerComponent " + e.bitsPerComponent + " /Columns " + e.width
                  , h = {
                    width: e.width,
                    height: e.height,
                    colorSpace: "DeviceGray",
                    bitsPerComponent: e.bitsPerComponent,
                    decodeParameters: l,
                    data: e.sMask
                };
                "filter"in e && (h.filter = e.filter),
                t.call(this, h)
            }
            if (e.colorSpace === b.INDEXED) {
                var f = this.internal.newObject();
                n({
                    data: _(new Uint8Array(e.palette)),
                    objectId: f
                }),
                r("endobj")
            }
        }
          , o = function() {
            var t = this.internal.collections.addImage_images;
            for (var e in t)
                a.call(this, t[e])
        }
          , s = function() {
            var t, e = this.internal.collections.addImage_images, r = this.internal.write;
            for (var n in e)
                r("/I" + (t = e[n]).index, t.objectId, "0", "R")
        }
          , u = function() {
            this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {},
            this.internal.events.subscribe("putResources", o),
            this.internal.events.subscribe("putXobjectDict", s))
        }
          , l = function() {
            var t = this.internal.collections.addImage_images;
            return u.call(this),
            t
        }
          , h = function() {
            return Object.keys(this.internal.collections.addImage_images).length
        }
          , f = function(e) {
            return "function" == typeof t["process" + e.toUpperCase()]
        }
          , d = function(t) {
            return "object" === e(t) && 1 === t.nodeType
        }
          , p = function(e, r) {
            if ("IMG" === e.nodeName && e.hasAttribute("src")) {
                var n = "" + e.getAttribute("src");
                if (0 === n.indexOf("data:image/"))
                    return c(unescape(n).split("base64,").pop());
                var i = t.loadFile(n, !0);
                if (void 0 !== i)
                    return i
            }
            if ("CANVAS" === e.nodeName) {
                if (0 === e.width || 0 === e.height)
                    throw new Error("Given canvas must have data. Canvas width: " + e.width + ", height: " + e.height);
                var a;
                switch (r) {
                case "PNG":
                    a = "image/png";
                    break;
                case "WEBP":
                    a = "image/webp";
                    break;
                case "JPEG":
                case "JPG":
                default:
                    a = "image/jpeg"
                }
                return c(e.toDataURL(a, 1).split("base64,").pop())
            }
        }
          , g = function(t) {
            var e = this.internal.collections.addImage_images;
            if (e)
                for (var r in e)
                    if (t === e[r].alias)
                        return e[r]
        }
          , m = function(t, e, r) {
            return t || e || (t = -96,
            e = -96),
            t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor),
            e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor),
            0 === t && (t = e * r.width / r.height),
            0 === e && (e = t * r.height / r.width),
            [t, e]
        }
          , v = function(t, e, r, n, i, a) {
            var o = m.call(this, r, n, i)
              , s = this.internal.getCoordinateString
              , c = this.internal.getVerticalCoordinateString
              , u = l.call(this);
            if (r = o[0],
            n = o[1],
            u[i.index] = i,
            a) {
                a *= Math.PI / 180;
                var h = Math.cos(a)
                  , f = Math.sin(a)
                  , d = function(t) {
                    return t.toFixed(4)
                }
                  , p = [d(h), d(f), d(-1 * f), d(h), 0, 0, "cm"]
            }
            this.internal.write("q"),
            a ? (this.internal.write([1, "0", "0", 1, s(t), c(e + n), "cm"].join(" ")),
            this.internal.write(p.join(" ")),
            this.internal.write([s(r), "0", "0", s(n), "0", "0", "cm"].join(" "))) : this.internal.write([s(r), "0", "0", s(n), s(t), c(e + n), "cm"].join(" ")),
            this.isAdvancedAPI() && this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" ")),
            this.internal.write("/I" + i.index + " Do"),
            this.internal.write("Q")
        }
          , b = t.color_spaces = {
            DEVICE_RGB: "DeviceRGB",
            DEVICE_GRAY: "DeviceGray",
            DEVICE_CMYK: "DeviceCMYK",
            CAL_GREY: "CalGray",
            CAL_RGB: "CalRGB",
            LAB: "Lab",
            ICC_BASED: "ICCBased",
            INDEXED: "Indexed",
            PATTERN: "Pattern",
            SEPARATION: "Separation",
            DEVICE_N: "DeviceN"
        };
        t.decode = {
            DCT_DECODE: "DCTDecode",
            FLATE_DECODE: "FlateDecode",
            LZW_DECODE: "LZWDecode",
            JPX_DECODE: "JPXDecode",
            JBIG2_DECODE: "JBIG2Decode",
            ASCII85_DECODE: "ASCII85Decode",
            ASCII_HEX_DECODE: "ASCIIHexDecode",
            RUN_LENGTH_DECODE: "RunLengthDecode",
            CCITT_FAX_DECODE: "CCITTFaxDecode"
        };
        var y = t.image_compression = {
            NONE: "NONE",
            FAST: "FAST",
            MEDIUM: "MEDIUM",
            SLOW: "SLOW"
        }
          , w = t.__addimage__.sHashCode = function(t) {
            var e, r, n = 0;
            if ("string" == typeof t)
                for (r = t.length,
                e = 0; e < r; e++)
                    n = (n << 5) - n + t.charCodeAt(e),
                    n |= 0;
            else if (x(t))
                for (r = t.byteLength / 2,
                e = 0; e < r; e++)
                    n = (n << 5) - n + t[e],
                    n |= 0;
            return n
        }
          , N = t.__addimage__.validateStringAsBase64 = function(t) {
            (t = t || "").toString().trim();
            var e = !0;
            return 0 === t.length && (e = !1),
            t.length % 4 != 0 && (e = !1),
            !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1),
            !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1),
            e
        }
          , L = t.__addimage__.extractImageFromDataUrl = function(t) {
            var e = (t = t || "").split("base64,")
              , r = null;
            if (2 === e.length) {
                var n = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
                Array.isArray(n) && (r = {
                    mimeType: n[1],
                    charset: n[2],
                    data: e[1]
                })
            }
            return r
        }
          , A = t.__addimage__.supportsArrayBuffer = function() {
            return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array
        }
        ;
        t.__addimage__.isArrayBuffer = function(t) {
            return A() && t instanceof ArrayBuffer
        }
        ;
        var x = t.__addimage__.isArrayBufferView = function(t) {
            return A() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array)
        }
          , S = t.__addimage__.binaryStringToUint8Array = function(t) {
            for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++)
                r[n] = t.charCodeAt(n);
            return r
        }
          , _ = t.__addimage__.arrayBufferToBinaryString = function(t) {
            for (var e = "", r = x(t) ? t : new Uint8Array(t), n = 0; n < r.length; n += 8192)
                e += String.fromCharCode.apply(null, r.subarray(n, n + 8192));
            return e
        }
        ;
        t.addImage = function() {
            var t, n, i, a, o, s, c, l, h;
            if ("number" == typeof arguments[1] ? (n = r,
            i = arguments[1],
            a = arguments[2],
            o = arguments[3],
            s = arguments[4],
            c = arguments[5],
            l = arguments[6],
            h = arguments[7]) : (n = arguments[1],
            i = arguments[2],
            a = arguments[3],
            o = arguments[4],
            s = arguments[5],
            c = arguments[6],
            l = arguments[7],
            h = arguments[8]),
            "object" === e(t = arguments[0]) && !d(t) && "imageData"in t) {
                var f = t;
                t = f.imageData,
                n = f.format || n || r,
                i = f.x || i || 0,
                a = f.y || a || 0,
                o = f.w || f.width || o,
                s = f.h || f.height || s,
                c = f.alias || c,
                l = f.compression || l,
                h = f.rotation || f.angle || h
            }
            var p = this.internal.getFilters();
            if (void 0 === l && -1 !== p.indexOf("FlateEncode") && (l = "SLOW"),
            isNaN(i) || isNaN(a))
                throw new Error("Invalid coordinates passed to jsPDF.addImage");
            u.call(this);
            var g = P.call(this, t, n, c, l);
            return v.call(this, i, a, o, s, g, h),
            this
        }
        ;
        var P = function(e, n, a, o) {
            var s, c, u;
            if ("string" == typeof e && i(e) === r) {
                e = unescape(e);
                var l = k(e, !1);
                ("" !== l || void 0 !== (l = t.loadFile(e, !0))) && (e = l)
            }
            if (d(e) && (e = p(e, n)),
            n = i(e, n),
            !f(n))
                throw new Error("addImage does not support files of type '" + n + "', please ensure that a plugin for '" + n + "' support is added.");
            if ((null == (u = a) || 0 === u.length) && (a = function(t) {
                return "string" == typeof t || x(t) ? w(t) : x(t.data) ? w(t.data) : null
            }(e)),
            (s = g.call(this, a)) || (A() && (e instanceof Uint8Array || "RGBA" === n || (c = e,
            e = S(e))),
            s = this["process" + n.toUpperCase()](e, h.call(this), a, function(e) {
                return e && "string" == typeof e && (e = e.toUpperCase()),
                e in t.image_compression ? e : y.NONE
            }(o), c)),
            !s)
                throw new Error("An unknown error occurred whilst processing the image.");
            return s
        }
          , k = t.__addimage__.convertBase64ToBinaryString = function(t, e) {
            var r;
            e = "boolean" != typeof e || e;
            var n, i = "";
            if ("string" == typeof t) {
                n = null !== (r = L(t)) ? r.data : t;
                try {
                    i = c(n)
                } catch (t) {
                    if (e)
                        throw N(n) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ")
                }
            }
            return i
        }
        ;
        t.getImageProperties = function(e) {
            var n, a, o = "";
            if (d(e) && (e = p(e)),
            "string" == typeof e && i(e) === r && ("" === (o = k(e, !1)) && (o = t.loadFile(e) || ""),
            e = o),
            a = i(e),
            !f(a))
                throw new Error("addImage does not support files of type '" + a + "', please ensure that a plugin for '" + a + "' support is added.");
            if (!A() || e instanceof Uint8Array || (e = S(e)),
            !(n = this["process" + a.toUpperCase()](e)))
                throw new Error("An unknown error occurred whilst processing the image");
            return n.fileType = a,
            n
        }
    }(M.API),
    /**
   * @license
   * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = function(t) {
            if (void 0 !== t && "" != t)
                return !0
        };
        M.API.events.push(["addPage", function(t) {
            this.internal.getPageInfo(t.pageNumber).pageContext.annotations = []
        }
        ]),
        t.events.push(["putPage", function(t) {
            for (var r, n, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), c = t.pageContext.annotations, u = !1, l = 0; l < c.length && !u; l++)
                switch ((r = c[l]).type) {
                case "link":
                    (e(r.options.url) || e(r.options.pageNumber)) && (u = !0);
                    break;
                case "reference":
                case "text":
                case "freetext":
                    u = !0
                }
            if (0 != u) {
                this.internal.write("/Annots [");
                for (var h = 0; h < c.length; h++) {
                    r = c[h];
                    var f = this.internal.pdfEscape
                      , d = this.internal.getEncryptor(t.objId);
                    switch (r.type) {
                    case "reference":
                        this.internal.write(" " + r.object.objId + " 0 R ");
                        break;
                    case "text":
                        var p = this.internal.newAdditionalObject()
                          , g = this.internal.newAdditionalObject()
                          , m = this.internal.getEncryptor(p.objId)
                          , v = r.title || "Note";
                        i = "<</Type /Annot /Subtype /Text " + (n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y) + "] ") + "/Contents (" + f(m(r.contents)) + ")",
                        i += " /Popup " + g.objId + " 0 R",
                        i += " /P " + s.objId + " 0 R",
                        i += " /T (" + f(m(v)) + ") >>",
                        p.content = i;
                        var b = p.objId + " 0 R";
                        i = "<</Type /Annot /Subtype /Popup " + (n = "/Rect [" + a(r.bounds.x + 30) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w + 30) + " " + o(r.bounds.y) + "] ") + " /Parent " + b,
                        r.open && (i += " /Open true"),
                        i += " >>",
                        g.content = i,
                        this.internal.write(p.objId, "0 R", g.objId, "0 R");
                        break;
                    case "freetext":
                        n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y + r.bounds.h) + "] ";
                        var y = r.color || "#000000";
                        i = "<</Type /Annot /Subtype /FreeText " + n + "/Contents (" + f(d(r.contents)) + ")",
                        i += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y + ")",
                        i += " /Border [0 0 0]",
                        i += " >>",
                        this.internal.write(i);
                        break;
                    case "link":
                        if (r.options.name) {
                            var w = this.annotations._nameMap[r.options.name];
                            r.options.pageNumber = w.page,
                            r.options.top = w.y
                        } else
                            r.options.top || (r.options.top = 0);
                        if (n = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ",
                        i = "",
                        r.options.url)
                            i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /A <</S /URI /URI (" + f(d(r.options.url)) + ") >>";
                        else if (r.options.pageNumber) {
                            switch (i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R",
                            r.options.magFactor = r.options.magFactor || "XYZ",
                            r.options.magFactor) {
                            case "Fit":
                                i += " /Fit]";
                                break;
                            case "FitH":
                                i += " /FitH " + r.options.top + "]";
                                break;
                            case "FitV":
                                r.options.left = r.options.left || 0,
                                i += " /FitV " + r.options.left + "]";
                                break;
                            case "XYZ":
                            default:
                                var N = o(r.options.top);
                                r.options.left = r.options.left || 0,
                                void 0 === r.options.zoom && (r.options.zoom = 0),
                                i += " /XYZ " + r.options.left + " " + N + " " + r.options.zoom + "]"
                            }
                        }
                        "" != i && (i += " >>",
                        this.internal.write(i))
                    }
                }
                this.internal.write("]")
            }
        }
        ]),
        t.createAnnotation = function(t) {
            var e = this.internal.getCurrentPageInfo();
            switch (t.type) {
            case "link":
                this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
                break;
            case "text":
            case "freetext":
                e.pageContext.annotations.push(t)
            }
        }
        ,
        t.link = function(t, e, r, n, i) {
            var a = this.internal.getCurrentPageInfo()
              , o = this.internal.getCoordinateString
              , s = this.internal.getVerticalCoordinateString;
            a.pageContext.annotations.push({
                finalBounds: {
                    x: o(t),
                    y: s(e),
                    w: o(t + r),
                    h: s(e + n)
                },
                options: i,
                type: "link"
            })
        }
        ,
        t.textWithLink = function(t, e, r, n) {
            var i, a, o = this.getTextWidth(t), s = this.internal.getLineHeight() / this.internal.scaleFactor;
            if (void 0 !== n.maxWidth) {
                a = n.maxWidth;
                var c = this.splitTextToSize(t, a).length;
                i = Math.ceil(s * c)
            } else
                a = o,
                i = s;
            return this.text(t, e, r, n),
            r += .2 * s,
            "center" === n.align && (e -= o / 2),
            "right" === n.align && (e -= o),
            this.link(e, r - s, a, i, n),
            o
        }
        ,
        t.getTextWidth = function(t) {
            var e = this.internal.getFontSize();
            return this.getStringUnitWidth(t) * e / this.internal.scaleFactor
        }
    }(M.API),
    /**
   * @license
   * Copyright (c) 2017 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = {
            1569: [65152],
            1570: [65153, 65154],
            1571: [65155, 65156],
            1572: [65157, 65158],
            1573: [65159, 65160],
            1574: [65161, 65162, 65163, 65164],
            1575: [65165, 65166],
            1576: [65167, 65168, 65169, 65170],
            1577: [65171, 65172],
            1578: [65173, 65174, 65175, 65176],
            1579: [65177, 65178, 65179, 65180],
            1580: [65181, 65182, 65183, 65184],
            1581: [65185, 65186, 65187, 65188],
            1582: [65189, 65190, 65191, 65192],
            1583: [65193, 65194],
            1584: [65195, 65196],
            1585: [65197, 65198],
            1586: [65199, 65200],
            1587: [65201, 65202, 65203, 65204],
            1588: [65205, 65206, 65207, 65208],
            1589: [65209, 65210, 65211, 65212],
            1590: [65213, 65214, 65215, 65216],
            1591: [65217, 65218, 65219, 65220],
            1592: [65221, 65222, 65223, 65224],
            1593: [65225, 65226, 65227, 65228],
            1594: [65229, 65230, 65231, 65232],
            1601: [65233, 65234, 65235, 65236],
            1602: [65237, 65238, 65239, 65240],
            1603: [65241, 65242, 65243, 65244],
            1604: [65245, 65246, 65247, 65248],
            1605: [65249, 65250, 65251, 65252],
            1606: [65253, 65254, 65255, 65256],
            1607: [65257, 65258, 65259, 65260],
            1608: [65261, 65262],
            1609: [65263, 65264, 64488, 64489],
            1610: [65265, 65266, 65267, 65268],
            1649: [64336, 64337],
            1655: [64477],
            1657: [64358, 64359, 64360, 64361],
            1658: [64350, 64351, 64352, 64353],
            1659: [64338, 64339, 64340, 64341],
            1662: [64342, 64343, 64344, 64345],
            1663: [64354, 64355, 64356, 64357],
            1664: [64346, 64347, 64348, 64349],
            1667: [64374, 64375, 64376, 64377],
            1668: [64370, 64371, 64372, 64373],
            1670: [64378, 64379, 64380, 64381],
            1671: [64382, 64383, 64384, 64385],
            1672: [64392, 64393],
            1676: [64388, 64389],
            1677: [64386, 64387],
            1678: [64390, 64391],
            1681: [64396, 64397],
            1688: [64394, 64395],
            1700: [64362, 64363, 64364, 64365],
            1702: [64366, 64367, 64368, 64369],
            1705: [64398, 64399, 64400, 64401],
            1709: [64467, 64468, 64469, 64470],
            1711: [64402, 64403, 64404, 64405],
            1713: [64410, 64411, 64412, 64413],
            1715: [64406, 64407, 64408, 64409],
            1722: [64414, 64415],
            1723: [64416, 64417, 64418, 64419],
            1726: [64426, 64427, 64428, 64429],
            1728: [64420, 64421],
            1729: [64422, 64423, 64424, 64425],
            1733: [64480, 64481],
            1734: [64473, 64474],
            1735: [64471, 64472],
            1736: [64475, 64476],
            1737: [64482, 64483],
            1739: [64478, 64479],
            1740: [64508, 64509, 64510, 64511],
            1744: [64484, 64485, 64486, 64487],
            1746: [64430, 64431],
            1747: [64432, 64433]
        }
          , r = {
            65247: {
                65154: 65269,
                65156: 65271,
                65160: 65273,
                65166: 65275
            },
            65248: {
                65154: 65270,
                65156: 65272,
                65160: 65274,
                65166: 65276
            },
            65165: {
                65247: {
                    65248: {
                        65258: 65010
                    }
                }
            },
            1617: {
                1612: 64606,
                1613: 64607,
                1614: 64608,
                1615: 64609,
                1616: 64610
            }
        }
          , n = {
            1612: 64606,
            1613: 64607,
            1614: 64608,
            1615: 64609,
            1616: 64610
        }
          , i = [1570, 1571, 1573, 1575];
        t.__arabicParser__ = {};
        var a = t.__arabicParser__.isInArabicSubstitutionA = function(t) {
            return void 0 !== e[t.charCodeAt(0)]
        }
          , o = t.__arabicParser__.isArabicLetter = function(t) {
            return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t)
        }
          , s = t.__arabicParser__.isArabicEndLetter = function(t) {
            return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2
        }
          , c = t.__arabicParser__.isArabicAlfLetter = function(t) {
            return o(t) && i.indexOf(t.charCodeAt(0)) >= 0
        }
        ;
        t.__arabicParser__.arabicLetterHasIsolatedForm = function(t) {
            return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1
        }
        ;
        var u = t.__arabicParser__.arabicLetterHasFinalForm = function(t) {
            return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2
        }
        ;
        t.__arabicParser__.arabicLetterHasInitialForm = function(t) {
            return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3
        }
        ;
        var l = t.__arabicParser__.arabicLetterHasMedialForm = function(t) {
            return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length
        }
          , h = t.__arabicParser__.resolveLigatures = function(t) {
            var e = 0
              , n = r
              , i = ""
              , a = 0;
            for (e = 0; e < t.length; e += 1)
                void 0 !== n[t.charCodeAt(e)] ? (a++,
                "number" == typeof (n = n[t.charCodeAt(e)]) && (i += String.fromCharCode(n),
                n = r,
                a = 0),
                e === t.length - 1 && (n = r,
                i += t.charAt(e - (a - 1)),
                e -= a - 1,
                a = 0)) : (n = r,
                i += t.charAt(e - a),
                e -= a,
                a = 0);
            return i
        }
        ;
        t.__arabicParser__.isArabicDiacritic = function(t) {
            return void 0 !== t && void 0 !== n[t.charCodeAt(0)]
        }
        ;
        var f = t.__arabicParser__.getCorrectForm = function(t, e, r) {
            return o(t) ? !1 === a(t) ? -1 : !u(t) || !o(e) && !o(r) || !o(r) && s(e) || s(t) && !o(e) || s(t) && c(e) || s(t) && s(e) ? 0 : l(t) && o(e) && !s(e) && o(r) && u(r) ? 3 : s(t) || !o(r) ? 1 : 2 : -1
        }
          , d = function(t) {
            var r = 0
              , n = 0
              , i = 0
              , a = ""
              , s = ""
              , c = ""
              , u = (t = t || "").split("\\s+")
              , l = [];
            for (r = 0; r < u.length; r += 1) {
                for (l.push(""),
                n = 0; n < u[r].length; n += 1)
                    a = u[r][n],
                    s = u[r][n - 1],
                    c = u[r][n + 1],
                    o(a) ? (i = f(a, s, c),
                    l[r] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : l[r] += a;
                l[r] = h(l[r])
            }
            return l.join(" ")
        }
          , p = t.__arabicParser__.processArabic = t.processArabic = function() {
            var t, e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text, r = [];
            if (Array.isArray(e)) {
                var n = 0;
                for (r = [],
                n = 0; n < e.length; n += 1)
                    Array.isArray(e[n]) ? r.push([d(e[n][0]), e[n][1], e[n][2]]) : r.push([d(e[n])]);
                t = r
            } else
                t = d(e);
            return "string" == typeof arguments[0] ? t : (arguments[0].text = t,
            arguments[0])
        }
        ;
        t.events.push(["preProcessText", p])
    }(M.API),
    /** @license
   * jsPDF Autoprint Plugin
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        t.autoPrint = function(t) {
            var e;
            switch ((t = t || {}).variant = t.variant || "non-conform",
            t.variant) {
            case "javascript":
                this.addJS("print({});");
                break;
            case "non-conform":
            default:
                this.internal.events.subscribe("postPutResources", (function() {
                    e = this.internal.newObject(),
                    this.internal.out("<<"),
                    this.internal.out("/S /Named"),
                    this.internal.out("/Type /Action"),
                    this.internal.out("/N /Print"),
                    this.internal.out(">>"),
                    this.internal.out("endobj")
                }
                )),
                this.internal.events.subscribe("putCatalog", (function() {
                    this.internal.out("/OpenAction " + e + " 0 R")
                }
                ))
            }
            return this
        }
    }(M.API),
    /**
   * @license
   * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = function() {
            var t = void 0;
            Object.defineProperty(this, "pdf", {
                get: function() {
                    return t
                },
                set: function(e) {
                    t = e
                }
            });
            var e = 150;
            Object.defineProperty(this, "width", {
                get: function() {
                    return e
                },
                set: function(t) {
                    e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t,
                    this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e + 1)
                }
            });
            var r = 300;
            Object.defineProperty(this, "height", {
                get: function() {
                    return r
                },
                set: function(t) {
                    r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t,
                    this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1)
                }
            });
            var n = [];
            Object.defineProperty(this, "childNodes", {
                get: function() {
                    return n
                },
                set: function(t) {
                    n = t
                }
            });
            var i = {};
            Object.defineProperty(this, "style", {
                get: function() {
                    return i
                },
                set: function(t) {
                    i = t
                }
            }),
            Object.defineProperty(this, "parentNode", {})
        };
        e.prototype.getContext = function(t, e) {
            var r;
            if ("2d" !== (t = t || "2d"))
                return null;
            for (r in e)
                this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);
            return this.pdf.context2d._canvas = this,
            this.pdf.context2d
        }
        ,
        e.prototype.toDataURL = function() {
            throw new Error("toDataURL is not implemented.")
        }
        ,
        t.events.push(["initialized", function() {
            this.canvas = new e,
            this.canvas.pdf = this
        }
        ])
    }(M.API),
    function(t) {
        var r = {
            left: 0,
            top: 0,
            bottom: 0,
            right: 0
        }
          , n = !1
          , i = function() {
            void 0 === this.internal.__cell__ && (this.internal.__cell__ = {},
            this.internal.__cell__.padding = 3,
            this.internal.__cell__.headerFunction = void 0,
            this.internal.__cell__.margins = Object.assign({}, r),
            this.internal.__cell__.margins.width = this.getPageWidth(),
            a.call(this))
        }
          , a = function() {
            this.internal.__cell__.lastCell = new o,
            this.internal.__cell__.pages = 1
        }
          , o = function() {
            var t = arguments[0];
            Object.defineProperty(this, "x", {
                enumerable: !0,
                get: function() {
                    return t
                },
                set: function(e) {
                    t = e
                }
            });
            var e = arguments[1];
            Object.defineProperty(this, "y", {
                enumerable: !0,
                get: function() {
                    return e
                },
                set: function(t) {
                    e = t
                }
            });
            var r = arguments[2];
            Object.defineProperty(this, "width", {
                enumerable: !0,
                get: function() {
                    return r
                },
                set: function(t) {
                    r = t
                }
            });
            var n = arguments[3];
            Object.defineProperty(this, "height", {
                enumerable: !0,
                get: function() {
                    return n
                },
                set: function(t) {
                    n = t
                }
            });
            var i = arguments[4];
            Object.defineProperty(this, "text", {
                enumerable: !0,
                get: function() {
                    return i
                },
                set: function(t) {
                    i = t
                }
            });
            var a = arguments[5];
            Object.defineProperty(this, "lineNumber", {
                enumerable: !0,
                get: function() {
                    return a
                },
                set: function(t) {
                    a = t
                }
            });
            var o = arguments[6];
            return Object.defineProperty(this, "align", {
                enumerable: !0,
                get: function() {
                    return o
                },
                set: function(t) {
                    o = t
                }
            }),
            this
        };
        o.prototype.clone = function() {
            return new o(this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align)
        }
        ,
        o.prototype.toArray = function() {
            return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align]
        }
        ,
        t.setHeaderFunction = function(t) {
            return i.call(this),
            this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0,
            this
        }
        ,
        t.getTextDimensions = function(t, e) {
            i.call(this);
            var r = (e = e || {}).fontSize || this.getFontSize()
              , n = e.font || this.getFont()
              , a = e.scaleFactor || this.internal.scaleFactor
              , o = 0
              , s = 0
              , c = 0
              , u = this;
            if (!Array.isArray(t) && "string" != typeof t) {
                if ("number" != typeof t)
                    throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
                t = String(t)
            }
            var l = e.maxWidth;
            l > 0 ? "string" == typeof t ? t = this.splitTextToSize(t, l) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce((function(t, e) {
                return t.concat(u.splitTextToSize(e, l))
            }
            ), [])) : t = Array.isArray(t) ? t : [t];
            for (var h = 0; h < t.length; h++)
                o < (c = this.getStringUnitWidth(t[h], {
                    font: n
                }) * r) && (o = c);
            return 0 !== o && (s = t.length),
            {
                w: o /= a,
                h: Math.max((s * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a, 0)
            }
        }
        ,
        t.cellAddPage = function() {
            i.call(this),
            this.addPage();
            var t = this.internal.__cell__.margins || r;
            return this.internal.__cell__.lastCell = new o(t.left,t.top,void 0,void 0),
            this.internal.__cell__.pages += 1,
            this
        }
        ;
        var s = t.cell = function() {
            var t;
            t = arguments[0]instanceof o ? arguments[0] : new o(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),
            i.call(this);
            var e = this.internal.__cell__.lastCell
              , a = this.internal.__cell__.padding
              , s = this.internal.__cell__.margins || r
              , c = this.internal.__cell__.tableHeaderRow
              , u = this.internal.__cell__.printHeaders;
            return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0),
            t.y = e.y || 0) : e.y + e.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(),
            t.y = s.top,
            u && c && (this.printHeaderRow(t.lineNumber, !0),
            t.y += c[0].height)) : t.y = e.y + e.height || t.y),
            void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === n ? "FD" : void 0),
            "right" === t.align ? this.text(t.text, t.x + t.width - a, t.y + a, {
                align: "right",
                baseline: "top"
            }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a, {
                align: "center",
                baseline: "top",
                maxWidth: t.width - a - a
            }) : this.text(t.text, t.x + a, t.y + a, {
                align: "left",
                baseline: "top",
                maxWidth: t.width - a - a
            })),
            this.internal.__cell__.lastCell = t,
            this
        }
        ;
        t.table = function(t, n, u, l, h) {
            if (i.call(this),
            !u)
                throw new Error("No data for PDF table.");
            var f, d, p, g, m = [], v = [], b = [], y = {}, w = {}, N = [], L = [], A = (h = h || {}).autoSize || !1, x = !1 !== h.printHeaders, S = h.css && void 0 !== h.css["font-size"] ? 16 * h.css["font-size"] : h.fontSize || 12, _ = h.margins || Object.assign({
                width: this.getPageWidth()
            }, r), P = "number" == typeof h.padding ? h.padding : 3, k = h.headerBackgroundColor || "#c8c8c8", F = h.headerTextColor || "#000";
            if (a.call(this),
            this.internal.__cell__.printHeaders = x,
            this.internal.__cell__.margins = _,
            this.internal.__cell__.table_font_size = S,
            this.internal.__cell__.padding = P,
            this.internal.__cell__.headerBackgroundColor = k,
            this.internal.__cell__.headerTextColor = F,
            this.setFontSize(S),
            null == l)
                v = m = Object.keys(u[0]),
                b = m.map((function() {
                    return "left"
                }
                ));
            else if (Array.isArray(l) && "object" === e(l[0]))
                for (m = l.map((function(t) {
                    return t.name
                }
                )),
                v = l.map((function(t) {
                    return t.prompt || t.name || ""
                }
                )),
                b = l.map((function(t) {
                    return t.align || "left"
                }
                )),
                f = 0; f < l.length; f += 1)
                    w[l[f].name] = l[f].width * (19.049976 / 25.4);
            else
                Array.isArray(l) && "string" == typeof l[0] && (v = m = l,
                b = m.map((function() {
                    return "left"
                }
                )));
            if (A || Array.isArray(l) && "string" == typeof l[0])
                for (f = 0; f < m.length; f += 1) {
                    for (y[g = m[f]] = u.map((function(t) {
                        return t[g]
                    }
                    )),
                    this.setFont(void 0, "bold"),
                    N.push(this.getTextDimensions(v[f], {
                        fontSize: this.internal.__cell__.table_font_size,
                        scaleFactor: this.internal.scaleFactor
                    }).w),
                    d = y[g],
                    this.setFont(void 0, "normal"),
                    p = 0; p < d.length; p += 1)
                        N.push(this.getTextDimensions(d[p], {
                            fontSize: this.internal.__cell__.table_font_size,
                            scaleFactor: this.internal.scaleFactor
                        }).w);
                    w[g] = Math.max.apply(null, N) + P + P,
                    N = []
                }
            if (x) {
                var I = {};
                for (f = 0; f < m.length; f += 1)
                    I[m[f]] = {},
                    I[m[f]].text = v[f],
                    I[m[f]].align = b[f];
                var C = c.call(this, I, w);
                L = m.map((function(e) {
                    return new o(t,n,w[e],C,I[e].text,void 0,I[e].align)
                }
                )),
                this.setTableHeaderRow(L),
                this.printHeaderRow(1, !1)
            }
            var j = l.reduce((function(t, e) {
                return t[e.name] = e.align,
                t
            }
            ), {});
            for (f = 0; f < u.length; f += 1) {
                "rowStart"in h && h.rowStart instanceof Function && h.rowStart({
                    row: f,
                    data: u[f]
                }, this);
                var O = c.call(this, u[f], w);
                for (p = 0; p < m.length; p += 1) {
                    var B = u[f][m[p]];
                    "cellStart"in h && h.cellStart instanceof Function && h.cellStart({
                        row: f,
                        col: p,
                        data: B
                    }, this),
                    s.call(this, new o(t,n,w[m[p]],O,B,f + 2,j[m[p]]))
                }
            }
            return this.internal.__cell__.table_x = t,
            this.internal.__cell__.table_y = n,
            this
        }
        ;
        var c = function(t, e) {
            var r = this.internal.__cell__.padding
              , n = this.internal.__cell__.table_font_size
              , i = this.internal.scaleFactor;
            return Object.keys(t).map((function(n) {
                var i = t[n];
                return this.splitTextToSize(i.hasOwnProperty("text") ? i.text : i, e[n] - r - r)
            }
            ), this).map((function(t) {
                return this.getLineHeightFactor() * t.length * n / i + r + r
            }
            ), this).reduce((function(t, e) {
                return Math.max(t, e)
            }
            ), 0)
        };
        t.setTableHeaderRow = function(t) {
            i.call(this),
            this.internal.__cell__.tableHeaderRow = t
        }
        ,
        t.printHeaderRow = function(t, e) {
            if (i.call(this),
            !this.internal.__cell__.tableHeaderRow)
                throw new Error("Property tableHeaderRow does not exist.");
            var r;
            if (n = !0,
            "function" == typeof this.internal.__cell__.headerFunction) {
                var a = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
                this.internal.__cell__.lastCell = new o(a[0],a[1],a[2],a[3],void 0,-1)
            }
            this.setFont(void 0, "bold");
            for (var c = [], u = 0; u < this.internal.__cell__.tableHeaderRow.length; u += 1) {
                r = this.internal.__cell__.tableHeaderRow[u].clone(),
                e && (r.y = this.internal.__cell__.margins.top || 0,
                c.push(r)),
                r.lineNumber = t;
                var l = this.getTextColor();
                this.setTextColor(this.internal.__cell__.headerTextColor),
                this.setFillColor(this.internal.__cell__.headerBackgroundColor),
                s.call(this, r),
                this.setTextColor(l)
            }
            c.length > 0 && this.setTableHeaderRow(c),
            this.setFont(void 0, "normal"),
            n = !1
        }
    }(M.API);
    var _t = {
        italic: ["italic", "oblique", "normal"],
        oblique: ["oblique", "italic", "normal"],
        normal: ["normal", "oblique", "italic"]
    }
      , Pt = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"]
      , kt = St(Pt)
      , Ft = [100, 200, 300, 400, 500, 600, 700, 800, 900]
      , It = St(Ft);
    function Ct(t) {
        var e = t.family.replace(/"|'/g, "").toLowerCase()
          , r = function(t) {
            return _t[t = t || "normal"] ? t : "normal"
        }(t.style)
          , n = function(t) {
            if (!t)
                return 400;
            if ("number" == typeof t)
                return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
            if (/^\d00$/.test(t))
                return parseInt(t);
            switch (t) {
            case "bold":
                return 700;
            case "normal":
            default:
                return 400
            }
        }(t.weight)
          , i = function(t) {
            return "number" == typeof kt[t = t || "normal"] ? t : "normal"
        }(t.stretch);
        return {
            family: e,
            style: r,
            weight: n,
            stretch: i,
            src: t.src || [],
            ref: t.ref || {
                name: e,
                style: [i, r, n].join(" ")
            }
        }
    }
    function jt(t, e, r, n) {
        var i;
        for (i = r; i >= 0 && i < e.length; i += n)
            if (t[e[i]])
                return t[e[i]];
        for (i = r; i >= 0 && i < e.length; i -= n)
            if (t[e[i]])
                return t[e[i]]
    }
    var Ot = {
        "sans-serif": "helvetica",
        fixed: "courier",
        monospace: "courier",
        terminal: "courier",
        cursive: "times",
        fantasy: "times",
        serif: "times"
    }
      , Bt = {
        caption: "times",
        icon: "times",
        menu: "times",
        "message-box": "times",
        "small-caption": "times",
        "status-bar": "times"
    };
    function Mt(t) {
        return [t.stretch, t.style, t.weight, t.family].join(" ")
    }
    function Et(t, e, r) {
        for (var n = (r = r || {}).defaultFontFamily || "times", i = Object.assign({}, Ot, r.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s)
            if (i[(a = Ct(e[s])).family] && (a.family = i[a.family]),
            t.hasOwnProperty(a.family)) {
                o = t[a.family];
                break
            }
        if (!(o = o || t[n]))
            throw new Error("Could not find a font-family for the rule '" + Mt(a) + "' and default family '" + n + "'.");
        if (o = function(t, e) {
            if (e[t])
                return e[t];
            var r = kt[t]
              , n = r <= kt.normal ? -1 : 1
              , i = jt(e, Pt, r, n);
            if (!i)
                throw new Error("Could not find a matching font-stretch value for " + t);
            return i
        }(a.stretch, o),
        o = function(t, e) {
            if (e[t])
                return e[t];
            for (var r = _t[t], n = 0; n < r.length; ++n)
                if (e[r[n]])
                    return e[r[n]];
            throw new Error("Could not find a matching font-style for " + t)
        }(a.style, o),
        !(o = function(t, e) {
            if (e[t])
                return e[t];
            if (400 === t && e[500])
                return e[500];
            if (500 === t && e[400])
                return e[400];
            var r = It[t]
              , n = jt(e, Ft, r, t < 400 ? -1 : 1);
            if (!n)
                throw new Error("Could not find a matching font-weight for value " + t);
            return n
        }(a.weight, o)))
            throw new Error("Failed to resolve a font for the rule '" + Mt(a) + "'.");
        return o
    }
    function qt(t) {
        return t.trimLeft()
    }
    function Dt(t, e) {
        for (var r = 0; r < t.length; ) {
            if (t.charAt(r) === e)
                return [t.substring(0, r), t.substring(r + 1)];
            r += 1
        }
        return null
    }
    function Rt(t) {
        var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
        return null === e ? null : [e[0], t.substring(e[0].length)]
    }
    var Tt = ["times"];
    !function(t) {
        var r, n, a, o, s, c, u, l, f, d = function(t) {
            return t = t || {},
            this.isStrokeTransparent = t.isStrokeTransparent || !1,
            this.strokeOpacity = t.strokeOpacity || 1,
            this.strokeStyle = t.strokeStyle || "#000000",
            this.fillStyle = t.fillStyle || "#000000",
            this.isFillTransparent = t.isFillTransparent || !1,
            this.fillOpacity = t.fillOpacity || 1,
            this.font = t.font || "10px sans-serif",
            this.textBaseline = t.textBaseline || "alphabetic",
            this.textAlign = t.textAlign || "left",
            this.lineWidth = t.lineWidth || 1,
            this.lineJoin = t.lineJoin || "miter",
            this.lineCap = t.lineCap || "butt",
            this.path = t.path || [],
            this.transform = void 0 !== t.transform ? t.transform.clone() : new l,
            this.globalCompositeOperation = t.globalCompositeOperation || "normal",
            this.globalAlpha = t.globalAlpha || 1,
            this.clip_path = t.clip_path || [],
            this.currentPoint = t.currentPoint || new c,
            this.miterLimit = t.miterLimit || 10,
            this.lastPoint = t.lastPoint || new c,
            this.lineDashOffset = t.lineDashOffset || 0,
            this.lineDash = t.lineDash || [],
            this.margin = t.margin || [0, 0, 0, 0],
            this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0,
            this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect,
            this
        };
        t.events.push(["initialized", function() {
            this.context2d = new p(this),
            r = this.internal.f2,
            n = this.internal.getCoordinateString,
            a = this.internal.getVerticalCoordinateString,
            o = this.internal.getHorizontalCoordinate,
            s = this.internal.getVerticalCoordinate,
            c = this.internal.Point,
            u = this.internal.Rectangle,
            l = this.internal.Matrix,
            f = new d
        }
        ]);
        var p = function(t) {
            Object.defineProperty(this, "canvas", {
                get: function() {
                    return {
                        parentNode: !1,
                        style: !1
                    }
                }
            });
            var e = t;
            Object.defineProperty(this, "pdf", {
                get: function() {
                    return e
                }
            });
            var r = !1;
            Object.defineProperty(this, "pageWrapXEnabled", {
                get: function() {
                    return r
                },
                set: function(t) {
                    r = Boolean(t)
                }
            });
            var n = !1;
            Object.defineProperty(this, "pageWrapYEnabled", {
                get: function() {
                    return n
                },
                set: function(t) {
                    n = Boolean(t)
                }
            });
            var i = 0;
            Object.defineProperty(this, "posX", {
                get: function() {
                    return i
                },
                set: function(t) {
                    isNaN(t) || (i = t)
                }
            });
            var a = 0;
            Object.defineProperty(this, "posY", {
                get: function() {
                    return a
                },
                set: function(t) {
                    isNaN(t) || (a = t)
                }
            }),
            Object.defineProperty(this, "margin", {
                get: function() {
                    return f.margin
                },
                set: function(t) {
                    var e;
                    "number" == typeof t ? e = [t, t, t, t] : ((e = new Array(4))[0] = t[0],
                    e[1] = t.length >= 2 ? t[1] : e[0],
                    e[2] = t.length >= 3 ? t[2] : e[0],
                    e[3] = t.length >= 4 ? t[3] : e[1]),
                    f.margin = e
                }
            });
            var o = !1;
            Object.defineProperty(this, "autoPaging", {
                get: function() {
                    return o
                },
                set: function(t) {
                    o = t
                }
            });
            var s = 0;
            Object.defineProperty(this, "lastBreak", {
                get: function() {
                    return s
                },
                set: function(t) {
                    s = t
                }
            });
            var c = [];
            Object.defineProperty(this, "pageBreaks", {
                get: function() {
                    return c
                },
                set: function(t) {
                    c = t
                }
            }),
            Object.defineProperty(this, "ctx", {
                get: function() {
                    return f
                },
                set: function(t) {
                    t instanceof d && (f = t)
                }
            }),
            Object.defineProperty(this, "path", {
                get: function() {
                    return f.path
                },
                set: function(t) {
                    f.path = t
                }
            });
            var u = [];
            Object.defineProperty(this, "ctxStack", {
                get: function() {
                    return u
                },
                set: function(t) {
                    u = t
                }
            }),
            Object.defineProperty(this, "fillStyle", {
                get: function() {
                    return this.ctx.fillStyle
                },
                set: function(t) {
                    var e;
                    e = g(t),
                    this.ctx.fillStyle = e.style,
                    this.ctx.isFillTransparent = 0 === e.a,
                    this.ctx.fillOpacity = e.a,
                    this.pdf.setFillColor(e.r, e.g, e.b, {
                        a: e.a
                    }),
                    this.pdf.setTextColor(e.r, e.g, e.b, {
                        a: e.a
                    })
                }
            }),
            Object.defineProperty(this, "strokeStyle", {
                get: function() {
                    return this.ctx.strokeStyle
                },
                set: function(t) {
                    var e = g(t);
                    this.ctx.strokeStyle = e.style,
                    this.ctx.isStrokeTransparent = 0 === e.a,
                    this.ctx.strokeOpacity = e.a,
                    0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a,
                    this.pdf.setDrawColor(e.r, e.g, e.b))
                }
            }),
            Object.defineProperty(this, "lineCap", {
                get: function() {
                    return this.ctx.lineCap
                },
                set: function(t) {
                    -1 !== ["butt", "round", "square"].indexOf(t) && (this.ctx.lineCap = t,
                    this.pdf.setLineCap(t))
                }
            }),
            Object.defineProperty(this, "lineWidth", {
                get: function() {
                    return this.ctx.lineWidth
                },
                set: function(t) {
                    isNaN(t) || (this.ctx.lineWidth = t,
                    this.pdf.setLineWidth(t))
                }
            }),
            Object.defineProperty(this, "lineJoin", {
                get: function() {
                    return this.ctx.lineJoin
                },
                set: function(t) {
                    -1 !== ["bevel", "round", "miter"].indexOf(t) && (this.ctx.lineJoin = t,
                    this.pdf.setLineJoin(t))
                }
            }),
            Object.defineProperty(this, "miterLimit", {
                get: function() {
                    return this.ctx.miterLimit
                },
                set: function(t) {
                    isNaN(t) || (this.ctx.miterLimit = t,
                    this.pdf.setMiterLimit(t))
                }
            }),
            Object.defineProperty(this, "textBaseline", {
                get: function() {
                    return this.ctx.textBaseline
                },
                set: function(t) {
                    this.ctx.textBaseline = t
                }
            }),
            Object.defineProperty(this, "textAlign", {
                get: function() {
                    return this.ctx.textAlign
                },
                set: function(t) {
                    -1 !== ["right", "end", "center", "left", "start"].indexOf(t) && (this.ctx.textAlign = t)
                }
            });
            var l = null;
            function h(t, e) {
                if (null === l) {
                    var r = function(t) {
                        var e = [];
                        return Object.keys(t).forEach((function(r) {
                            t[r].forEach((function(t) {
                                var n = null;
                                switch (t) {
                                case "bold":
                                    n = {
                                        family: r,
                                        weight: "bold"
                                    };
                                    break;
                                case "italic":
                                    n = {
                                        family: r,
                                        style: "italic"
                                    };
                                    break;
                                case "bolditalic":
                                    n = {
                                        family: r,
                                        weight: "bold",
                                        style: "italic"
                                    };
                                    break;
                                case "":
                                case "normal":
                                    n = {
                                        family: r
                                    }
                                }
                                null !== n && (n.ref = {
                                    name: r,
                                    style: t
                                },
                                e.push(n))
                            }
                            ))
                        }
                        )),
                        e
                    }(t.getFontList());
                    l = function(t) {
                        for (var e = {}, r = 0; r < t.length; ++r) {
                            var n = Ct(t[r])
                              , i = n.family
                              , a = n.stretch
                              , o = n.style
                              , s = n.weight;
                            e[i] = e[i] || {},
                            e[i][a] = e[i][a] || {},
                            e[i][a][o] = e[i][a][o] || {},
                            e[i][a][o][s] = n
                        }
                        return e
                    }(r.concat(e))
                }
                return l
            }
            var p = null;
            Object.defineProperty(this, "fontFaces", {
                get: function() {
                    return p
                },
                set: function(t) {
                    l = null,
                    p = t
                }
            }),
            Object.defineProperty(this, "font", {
                get: function() {
                    return this.ctx.font
                },
                set: function(t) {
                    var e;
                    if (this.ctx.font = t,
                    null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
                        var r = e[1]
                          , n = (e[2],
                        e[3])
                          , i = e[4]
                          , a = (e[5],
                        e[6])
                          , o = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];
                        i = "px" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor),
                        this.pdf.setFontSize(i);
                        var s = function(t) {
                            var e, r, n = [], i = t.trim();
                            if ("" === i)
                                return Tt;
                            if (i in Bt)
                                return [Bt[i]];
                            for (; "" !== i; ) {
                                switch (r = null,
                                e = (i = qt(i)).charAt(0)) {
                                case '"':
                                case "'":
                                    r = Dt(i.substring(1), e);
                                    break;
                                default:
                                    r = Rt(i)
                                }
                                if (null === r)
                                    return Tt;
                                if (n.push(r[0]),
                                "" !== (i = qt(r[1])) && "," !== i.charAt(0))
                                    return Tt;
                                i = i.replace(/^,/, "")
                            }
                            return n
                        }(a);
                        if (this.fontFaces) {
                            var c = Et(h(this.pdf, this.fontFaces), s.map((function(t) {
                                return {
                                    family: t,
                                    stretch: "normal",
                                    weight: n,
                                    style: r
                                }
                            }
                            )));
                            this.pdf.setFont(c.ref.name, c.ref.style)
                        } else {
                            var u = "";
                            ("bold" === n || parseInt(n, 10) >= 700 || "bold" === r) && (u = "bold"),
                            "italic" === r && (u += "italic"),
                            0 === u.length && (u = "normal");
                            for (var l = "", f = {
                                arial: "Helvetica",
                                Arial: "Helvetica",
                                verdana: "Helvetica",
                                Verdana: "Helvetica",
                                helvetica: "Helvetica",
                                Helvetica: "Helvetica",
                                "sans-serif": "Helvetica",
                                fixed: "Courier",
                                monospace: "Courier",
                                terminal: "Courier",
                                cursive: "Times",
                                fantasy: "Times",
                                serif: "Times"
                            }, d = 0; d < s.length; d++) {
                                if (void 0 !== this.pdf.internal.getFont(s[d], u, {
                                    noFallback: !0,
                                    disableWarning: !0
                                })) {
                                    l = s[d];
                                    break
                                }
                                if ("bolditalic" === u && void 0 !== this.pdf.internal.getFont(s[d], "bold", {
                                    noFallback: !0,
                                    disableWarning: !0
                                }))
                                    l = s[d],
                                    u = "bold";
                                else if (void 0 !== this.pdf.internal.getFont(s[d], "normal", {
                                    noFallback: !0,
                                    disableWarning: !0
                                })) {
                                    l = s[d],
                                    u = "normal";
                                    break
                                }
                            }
                            if ("" === l)
                                for (var p = 0; p < s.length; p++)
                                    if (f[s[p]]) {
                                        l = f[s[p]];
                                        break
                                    }
                            l = "" === l ? "Times" : l,
                            this.pdf.setFont(l, u)
                        }
                    }
                }
            }),
            Object.defineProperty(this, "globalCompositeOperation", {
                get: function() {
                    return this.ctx.globalCompositeOperation
                },
                set: function(t) {
                    this.ctx.globalCompositeOperation = t
                }
            }),
            Object.defineProperty(this, "globalAlpha", {
                get: function() {
                    return this.ctx.globalAlpha
                },
                set: function(t) {
                    this.ctx.globalAlpha = t
                }
            }),
            Object.defineProperty(this, "lineDashOffset", {
                get: function() {
                    return this.ctx.lineDashOffset
                },
                set: function(t) {
                    this.ctx.lineDashOffset = t,
                    T.call(this)
                }
            }),
            Object.defineProperty(this, "lineDash", {
                get: function() {
                    return this.ctx.lineDash
                },
                set: function(t) {
                    this.ctx.lineDash = t,
                    T.call(this)
                }
            }),
            Object.defineProperty(this, "ignoreClearRect", {
                get: function() {
                    return this.ctx.ignoreClearRect
                },
                set: function(t) {
                    this.ctx.ignoreClearRect = Boolean(t)
                }
            })
        };
        p.prototype.setLineDash = function(t) {
            this.lineDash = t
        }
        ,
        p.prototype.getLineDash = function() {
            return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice()
        }
        ,
        p.prototype.fill = function() {
            A.call(this, "fill", !1)
        }
        ,
        p.prototype.stroke = function() {
            A.call(this, "stroke", !1)
        }
        ,
        p.prototype.beginPath = function() {
            this.path = [{
                type: "begin"
            }]
        }
        ,
        p.prototype.moveTo = function(t, e) {
            if (isNaN(t) || isNaN(e))
                throw i.error("jsPDF.context2d.moveTo: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
            var r = this.ctx.transform.applyToPoint(new c(t,e));
            this.path.push({
                type: "mt",
                x: r.x,
                y: r.y
            }),
            this.ctx.lastPoint = new c(t,e)
        }
        ,
        p.prototype.closePath = function() {
            var t = new c(0,0)
              , r = 0;
            for (r = this.path.length - 1; -1 !== r; r--)
                if ("begin" === this.path[r].type && "object" === e(this.path[r + 1]) && "number" == typeof this.path[r + 1].x) {
                    t = new c(this.path[r + 1].x,this.path[r + 1].y);
                    break
                }
            this.path.push({
                type: "close"
            }),
            this.ctx.lastPoint = new c(t.x,t.y)
        }
        ,
        p.prototype.lineTo = function(t, e) {
            if (isNaN(t) || isNaN(e))
                throw i.error("jsPDF.context2d.lineTo: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
            var r = this.ctx.transform.applyToPoint(new c(t,e));
            this.path.push({
                type: "lt",
                x: r.x,
                y: r.y
            }),
            this.ctx.lastPoint = new c(r.x,r.y)
        }
        ,
        p.prototype.clip = function() {
            this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)),
            A.call(this, null, !0)
        }
        ,
        p.prototype.quadraticCurveTo = function(t, e, r, n) {
            if (isNaN(r) || isNaN(n) || isNaN(t) || isNaN(e))
                throw i.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
            var a = this.ctx.transform.applyToPoint(new c(r,n))
              , o = this.ctx.transform.applyToPoint(new c(t,e));
            this.path.push({
                type: "qct",
                x1: o.x,
                y1: o.y,
                x: a.x,
                y: a.y
            }),
            this.ctx.lastPoint = new c(a.x,a.y)
        }
        ,
        p.prototype.bezierCurveTo = function(t, e, r, n, a, o) {
            if (isNaN(a) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n))
                throw i.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
            var s = this.ctx.transform.applyToPoint(new c(a,o))
              , u = this.ctx.transform.applyToPoint(new c(t,e))
              , l = this.ctx.transform.applyToPoint(new c(r,n));
            this.path.push({
                type: "bct",
                x1: u.x,
                y1: u.y,
                x2: l.x,
                y2: l.y,
                x: s.x,
                y: s.y
            }),
            this.ctx.lastPoint = new c(s.x,s.y)
        }
        ,
        p.prototype.arc = function(t, e, r, n, a, o) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(a))
                throw i.error("jsPDF.context2d.arc: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.arc");
            if (o = Boolean(o),
            !this.ctx.transform.isIdentity) {
                var s = this.ctx.transform.applyToPoint(new c(t,e));
                t = s.x,
                e = s.y;
                var u = this.ctx.transform.applyToPoint(new c(0,r))
                  , l = this.ctx.transform.applyToPoint(new c(0,0));
                r = Math.sqrt(Math.pow(u.x - l.x, 2) + Math.pow(u.y - l.y, 2))
            }
            Math.abs(a - n) >= 2 * Math.PI && (n = 0,
            a = 2 * Math.PI),
            this.path.push({
                type: "arc",
                x: t,
                y: e,
                radius: r,
                startAngle: n,
                endAngle: a,
                counterclockwise: o
            })
        }
        ,
        p.prototype.arcTo = function(t, e, r, n, i) {
            throw new Error("arcTo not implemented.")
        }
        ,
        p.prototype.rect = function(t, e, r, n) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n))
                throw i.error("jsPDF.context2d.rect: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.rect");
            this.moveTo(t, e),
            this.lineTo(t + r, e),
            this.lineTo(t + r, e + n),
            this.lineTo(t, e + n),
            this.lineTo(t, e),
            this.lineTo(t + r, e),
            this.lineTo(t, e)
        }
        ,
        p.prototype.fillRect = function(t, e, r, n) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n))
                throw i.error("jsPDF.context2d.fillRect: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
            if (!m.call(this)) {
                var a = {};
                "butt" !== this.lineCap && (a.lineCap = this.lineCap,
                this.lineCap = "butt"),
                "miter" !== this.lineJoin && (a.lineJoin = this.lineJoin,
                this.lineJoin = "miter"),
                this.beginPath(),
                this.rect(t, e, r, n),
                this.fill(),
                a.hasOwnProperty("lineCap") && (this.lineCap = a.lineCap),
                a.hasOwnProperty("lineJoin") && (this.lineJoin = a.lineJoin)
            }
        }
        ,
        p.prototype.strokeRect = function(t, e, r, n) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n))
                throw i.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
            v.call(this) || (this.beginPath(),
            this.rect(t, e, r, n),
            this.stroke())
        }
        ,
        p.prototype.clearRect = function(t, e, r, n) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n))
                throw i.error("jsPDF.context2d.clearRect: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
            this.ignoreClearRect || (this.fillStyle = "#ffffff",
            this.fillRect(t, e, r, n))
        }
        ,
        p.prototype.save = function(t) {
            t = "boolean" != typeof t || t;
            for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)
                this.pdf.setPage(r + 1),
                this.pdf.internal.out("q");
            if (this.pdf.setPage(e),
            t) {
                this.ctx.fontSize = this.pdf.internal.getFontSize();
                var n = new d(this.ctx);
                this.ctxStack.push(this.ctx),
                this.ctx = n
            }
        }
        ,
        p.prototype.restore = function(t) {
            t = "boolean" != typeof t || t;
            for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++)
                this.pdf.setPage(r + 1),
                this.pdf.internal.out("Q");
            this.pdf.setPage(e),
            t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(),
            this.fillStyle = this.ctx.fillStyle,
            this.strokeStyle = this.ctx.strokeStyle,
            this.font = this.ctx.font,
            this.lineCap = this.ctx.lineCap,
            this.lineWidth = this.ctx.lineWidth,
            this.lineJoin = this.ctx.lineJoin,
            this.lineDash = this.ctx.lineDash,
            this.lineDashOffset = this.ctx.lineDashOffset)
        }
        ,
        p.prototype.toDataURL = function() {
            throw new Error("toDataUrl not implemented.")
        }
        ;
        var g = function(t) {
            var e, r, n, i;
            if (!0 === t.isCanvasGradient && (t = t.getColor()),
            !t)
                return {
                    r: 0,
                    g: 0,
                    b: 0,
                    a: 0,
                    style: t
                };
            if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t))
                e = 0,
                r = 0,
                n = 0,
                i = 0;
            else {
                var a = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
                if (null !== a)
                    e = parseInt(a[1]),
                    r = parseInt(a[2]),
                    n = parseInt(a[3]),
                    i = 1;
                else if (null !== (a = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t)))
                    e = parseInt(a[1]),
                    r = parseInt(a[2]),
                    n = parseInt(a[3]),
                    i = parseFloat(a[4]);
                else {
                    if (i = 1,
                    "string" == typeof t && "#" !== t.charAt(0)) {
                        var o = new h(t);
                        t = o.ok ? o.toHex() : "#000000"
                    }
                    4 === t.length ? (e = t.substring(1, 2),
                    e += e,
                    r = t.substring(2, 3),
                    r += r,
                    n = t.substring(3, 4),
                    n += n) : (e = t.substring(1, 3),
                    r = t.substring(3, 5),
                    n = t.substring(5, 7)),
                    e = parseInt(e, 16),
                    r = parseInt(r, 16),
                    n = parseInt(n, 16)
                }
            }
            return {
                r: e,
                g: r,
                b: n,
                a: i,
                style: t
            }
        }
          , m = function() {
            return this.ctx.isFillTransparent || 0 == this.globalAlpha
        }
          , v = function() {
            return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha)
        };
        p.prototype.fillText = function(t, e, r, n) {
            if (isNaN(e) || isNaN(r) || "string" != typeof t)
                throw i.error("jsPDF.context2d.fillText: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.fillText");
            if (n = isNaN(n) ? void 0 : n,
            !m.call(this)) {
                var a = q(this.ctx.transform.rotation)
                  , o = this.ctx.transform.scaleX;
                C.call(this, {
                    text: t,
                    x: e,
                    y: r,
                    scale: o,
                    angle: a,
                    align: this.textAlign,
                    maxWidth: n
                })
            }
        }
        ,
        p.prototype.strokeText = function(t, e, r, n) {
            if (isNaN(e) || isNaN(r) || "string" != typeof t)
                throw i.error("jsPDF.context2d.strokeText: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
            if (!v.call(this)) {
                n = isNaN(n) ? void 0 : n;
                var a = q(this.ctx.transform.rotation)
                  , o = this.ctx.transform.scaleX;
                C.call(this, {
                    text: t,
                    x: e,
                    y: r,
                    scale: o,
                    renderingMode: "stroke",
                    angle: a,
                    align: this.textAlign,
                    maxWidth: n
                })
            }
        }
        ,
        p.prototype.measureText = function(t) {
            if ("string" != typeof t)
                throw i.error("jsPDF.context2d.measureText: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.measureText");
            var e = this.pdf
              , r = this.pdf.internal.scaleFactor
              , n = e.internal.getFontSize()
              , a = e.getStringUnitWidth(t) * n / e.internal.scaleFactor
              , o = function(t) {
                var e = (t = t || {}).width || 0;
                return Object.defineProperty(this, "width", {
                    get: function() {
                        return e
                    }
                }),
                this
            };
            return new o({
                width: a *= Math.round(96 * r / 72 * 1e4) / 1e4
            })
        }
        ,
        p.prototype.scale = function(t, e) {
            if (isNaN(t) || isNaN(e))
                throw i.error("jsPDF.context2d.scale: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.scale");
            var r = new l(t,0,0,e,0,0);
            this.ctx.transform = this.ctx.transform.multiply(r)
        }
        ,
        p.prototype.rotate = function(t) {
            if (isNaN(t))
                throw i.error("jsPDF.context2d.rotate: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.rotate");
            var e = new l(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);
            this.ctx.transform = this.ctx.transform.multiply(e)
        }
        ,
        p.prototype.translate = function(t, e) {
            if (isNaN(t) || isNaN(e))
                throw i.error("jsPDF.context2d.translate: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.translate");
            var r = new l(1,0,0,1,t,e);
            this.ctx.transform = this.ctx.transform.multiply(r)
        }
        ,
        p.prototype.transform = function(t, e, r, n, a, o) {
            if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(a) || isNaN(o))
                throw i.error("jsPDF.context2d.transform: Invalid arguments", arguments),
                new Error("Invalid arguments passed to jsPDF.context2d.transform");
            var s = new l(t,e,r,n,a,o);
            this.ctx.transform = this.ctx.transform.multiply(s)
        }
        ,
        p.prototype.setTransform = function(t, e, r, n, i, a) {
            t = isNaN(t) ? 1 : t,
            e = isNaN(e) ? 0 : e,
            r = isNaN(r) ? 0 : r,
            n = isNaN(n) ? 1 : n,
            i = isNaN(i) ? 0 : i,
            a = isNaN(a) ? 0 : a,
            this.ctx.transform = new l(t,e,r,n,i,a)
        }
        ;
        var b = function() {
            return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0
        };
        p.prototype.drawImage = function(t, e, r, n, i, a, o, s, c) {
            var h = this.pdf.getImageProperties(t)
              , f = 1
              , d = 1
              , p = 1
              , g = 1;
            void 0 !== n && void 0 !== s && (p = s / n,
            g = c / i,
            f = h.width / n * s / n,
            d = h.height / i * c / i),
            void 0 === a && (a = e,
            o = r,
            e = 0,
            r = 0),
            void 0 !== n && void 0 === s && (s = n,
            c = i),
            void 0 === n && void 0 === s && (s = h.width,
            c = h.height);
            for (var m, v = this.ctx.transform.decompose(), w = q(v.rotate.shx), A = new l, S = (A = (A = (A = A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a - e * p,o - r * g,n * f,i * d)), _ = y.call(this, S), P = [], k = 0; k < _.length; k += 1)
                -1 === P.indexOf(_[k]) && P.push(_[k]);
            if (L(P),
            this.autoPaging)
                for (var F = P[0], I = P[P.length - 1], C = F; C < I + 1; C++) {
                    this.pdf.setPage(C);
                    var j = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1]
                      , O = 1 === C ? this.posY + this.margin[0] : this.margin[0]
                      , B = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2]
                      , M = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2]
                      , E = 1 === C ? 0 : B + (C - 2) * M;
                    if (0 !== this.ctx.clip_path.length) {
                        var D = this.path;
                        m = JSON.parse(JSON.stringify(this.ctx.clip_path)),
                        this.path = N(m, this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset),
                        x.call(this, "fill", !0),
                        this.path = D
                    }
                    var R = JSON.parse(JSON.stringify(S));
                    R = N([R], this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset)[0];
                    var T = (C > F || C < I) && b.call(this);
                    T && (this.pdf.saveGraphicsState(),
                    this.pdf.rect(this.margin[3], this.margin[0], j, M, null).clip().discardPath()),
                    this.pdf.addImage(t, "JPEG", R.x, R.y, R.w, R.h, null, null, w),
                    T && this.pdf.restoreGraphicsState()
                }
            else
                this.pdf.addImage(t, "JPEG", S.x, S.y, S.w, S.h, null, null, w)
        }
        ;
        var y = function(t, e, r) {
            var n = [];
            e = e || this.pdf.internal.pageSize.width,
            r = r || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
            var i = this.posY + this.ctx.prevPageLastElemOffset;
            switch (t.type) {
            default:
            case "mt":
            case "lt":
                n.push(Math.floor((t.y + i) / r) + 1);
                break;
            case "arc":
                n.push(Math.floor((t.y + i - t.radius) / r) + 1),
                n.push(Math.floor((t.y + i + t.radius) / r) + 1);
                break;
            case "qct":
                var a = D(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
                n.push(Math.floor((a.y + i) / r) + 1),
                n.push(Math.floor((a.y + a.h + i) / r) + 1);
                break;
            case "bct":
                var o = R(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
                n.push(Math.floor((o.y + i) / r) + 1),
                n.push(Math.floor((o.y + o.h + i) / r) + 1);
                break;
            case "rect":
                n.push(Math.floor((t.y + i) / r) + 1),
                n.push(Math.floor((t.y + t.h + i) / r) + 1)
            }
            for (var s = 0; s < n.length; s += 1)
                for (; this.pdf.internal.getNumberOfPages() < n[s]; )
                    w.call(this);
            return n
        }
          , w = function() {
            var t = this.fillStyle
              , e = this.strokeStyle
              , r = this.font
              , n = this.lineCap
              , i = this.lineWidth
              , a = this.lineJoin;
            this.pdf.addPage(),
            this.fillStyle = t,
            this.strokeStyle = e,
            this.font = r,
            this.lineCap = n,
            this.lineWidth = i,
            this.lineJoin = a
        }
          , N = function(t, e, r) {
            for (var n = 0; n < t.length; n++)
                switch (t[n].type) {
                case "bct":
                    t[n].x2 += e,
                    t[n].y2 += r;
                case "qct":
                    t[n].x1 += e,
                    t[n].y1 += r;
                case "mt":
                case "lt":
                case "arc":
                default:
                    t[n].x += e,
                    t[n].y += r
                }
            return t
        }
          , L = function(t) {
            return t.sort((function(t, e) {
                return t - e
            }
            ))
        }
          , A = function(t, e) {
            for (var r, n, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, c = Math.abs(s * this.ctx.transform.scaleX), u = this.lineJoin, l = JSON.parse(JSON.stringify(this.path)), h = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < h.length; d++)
                if (void 0 !== h[d].x)
                    for (var p = y.call(this, h[d]), g = 0; g < p.length; g += 1)
                        -1 === f.indexOf(p[g]) && f.push(p[g]);
            for (var m = 0; m < f.length; m++)
                for (; this.pdf.internal.getNumberOfPages() < f[m]; )
                    w.call(this);
            if (L(f),
            this.autoPaging)
                for (var v = f[0], A = f[f.length - 1], S = v; S < A + 1; S++) {
                    this.pdf.setPage(S),
                    this.fillStyle = i,
                    this.strokeStyle = a,
                    this.lineCap = o,
                    this.lineWidth = c,
                    this.lineJoin = u;
                    var _ = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1]
                      , P = 1 === S ? this.posY + this.margin[0] : this.margin[0]
                      , k = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2]
                      , F = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2]
                      , I = 1 === S ? 0 : k + (S - 2) * F;
                    if (0 !== this.ctx.clip_path.length) {
                        var C = this.path;
                        r = JSON.parse(JSON.stringify(this.ctx.clip_path)),
                        this.path = N(r, this.posX + this.margin[3], -I + P + this.ctx.prevPageLastElemOffset),
                        x.call(this, t, !0),
                        this.path = C
                    }
                    if (n = JSON.parse(JSON.stringify(l)),
                    this.path = N(n, this.posX + this.margin[3], -I + P + this.ctx.prevPageLastElemOffset),
                    !1 === e || 0 === S) {
                        var j = (S > v || S < A) && b.call(this);
                        j && (this.pdf.saveGraphicsState(),
                        this.pdf.rect(this.margin[3], this.margin[0], _, F, null).clip().discardPath()),
                        x.call(this, t, e),
                        j && this.pdf.restoreGraphicsState()
                    }
                    this.lineWidth = s
                }
            else
                this.lineWidth = c,
                x.call(this, t, e),
                this.lineWidth = s;
            this.path = l
        }
          , x = function(t, e) {
            if (("stroke" !== t || e || !v.call(this)) && ("stroke" === t || e || !m.call(this))) {
                for (var r, n, i = [], a = this.path, o = 0; o < a.length; o++) {
                    var s = a[o];
                    switch (s.type) {
                    case "begin":
                        i.push({
                            begin: !0
                        });
                        break;
                    case "close":
                        i.push({
                            close: !0
                        });
                        break;
                    case "mt":
                        i.push({
                            start: s,
                            deltas: [],
                            abs: []
                        });
                        break;
                    case "lt":
                        var c = i.length;
                        if (a[o - 1] && !isNaN(a[o - 1].x) && (r = [s.x - a[o - 1].x, s.y - a[o - 1].y],
                        c > 0))
                            for (; c >= 0; c--)
                                if (!0 !== i[c - 1].close && !0 !== i[c - 1].begin) {
                                    i[c - 1].deltas.push(r),
                                    i[c - 1].abs.push(s);
                                    break
                                }
                        break;
                    case "bct":
                        r = [s.x1 - a[o - 1].x, s.y1 - a[o - 1].y, s.x2 - a[o - 1].x, s.y2 - a[o - 1].y, s.x - a[o - 1].x, s.y - a[o - 1].y],
                        i[i.length - 1].deltas.push(r);
                        break;
                    case "qct":
                        var u = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x)
                          , l = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y)
                          , h = s.x + 2 / 3 * (s.x1 - s.x)
                          , f = s.y + 2 / 3 * (s.y1 - s.y)
                          , d = s.x
                          , p = s.y;
                        r = [u - a[o - 1].x, l - a[o - 1].y, h - a[o - 1].x, f - a[o - 1].y, d - a[o - 1].x, p - a[o - 1].y],
                        i[i.length - 1].deltas.push(r);
                        break;
                    case "arc":
                        i.push({
                            deltas: [],
                            abs: [],
                            arc: !0
                        }),
                        Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s)
                    }
                }
                n = e ? null : "stroke" === t ? "stroke" : "fill";
                for (var g = !1, b = 0; b < i.length; b++)
                    if (i[b].arc)
                        for (var y = i[b].abs, w = 0; w < y.length; w++) {
                            var N = y[w];
                            "arc" === N.type ? P.call(this, N.x, N.y, N.radius, N.startAngle, N.endAngle, N.counterclockwise, void 0, e, !g) : j.call(this, N.x, N.y),
                            g = !0
                        }
                    else if (!0 === i[b].close)
                        this.pdf.internal.out("h"),
                        g = !1;
                    else if (!0 !== i[b].begin) {
                        var L = i[b].start.x
                          , A = i[b].start.y;
                        O.call(this, i[b].deltas, L, A),
                        g = !0
                    }
                n && k.call(this, n),
                e && F.call(this)
            }
        }
          , S = function(t) {
            var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor
              , r = e * (this.pdf.internal.getLineHeightFactor() - 1);
            switch (this.ctx.textBaseline) {
            case "bottom":
                return t - r;
            case "top":
                return t + e - r;
            case "hanging":
                return t + e - 2 * r;
            case "middle":
                return t + e / 2 - r;
            case "ideographic":
                return t;
            case "alphabetic":
            default:
                return t
            }
        }
          , _ = function(t) {
            return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1)
        };
        p.prototype.createLinearGradient = function() {
            var t = function() {};
            return t.colorStops = [],
            t.addColorStop = function(t, e) {
                this.colorStops.push([t, e])
            }
            ,
            t.getColor = function() {
                return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1]
            }
            ,
            t.isCanvasGradient = !0,
            t
        }
        ,
        p.prototype.createPattern = function() {
            return this.createLinearGradient()
        }
        ,
        p.prototype.createRadialGradient = function() {
            return this.createLinearGradient()
        }
        ;
        var P = function(t, e, r, n, i, a, o, s, c) {
            for (var u = M.call(this, r, n, i, a), l = 0; l < u.length; l++) {
                var h = u[l];
                0 === l && (c ? I.call(this, h.x1 + t, h.y1 + e) : j.call(this, h.x1 + t, h.y1 + e)),
                B.call(this, t, e, h.x2, h.y2, h.x3, h.y3, h.x4, h.y4)
            }
            s ? F.call(this) : k.call(this, o)
        }
          , k = function(t) {
            switch (t) {
            case "stroke":
                this.pdf.internal.out("S");
                break;
            case "fill":
                this.pdf.internal.out("f")
            }
        }
          , F = function() {
            this.pdf.clip(),
            this.pdf.discardPath()
        }
          , I = function(t, e) {
            this.pdf.internal.out(n(t) + " " + a(e) + " m")
        }
          , C = function(t) {
            var e;
            switch (t.align) {
            case "right":
            case "end":
                e = "right";
                break;
            case "center":
                e = "center";
                break;
            case "left":
            case "start":
            default:
                e = "left"
            }
            var r = this.pdf.getTextDimensions(t.text)
              , n = S.call(this, t.y)
              , i = _.call(this, n) - r.h
              , a = this.ctx.transform.applyToPoint(new c(t.x,n))
              , o = this.ctx.transform.decompose()
              , s = new l;
            s = (s = (s = s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);
            for (var h, f, d, p = this.ctx.transform.applyToRectangle(new u(t.x,n,r.w,r.h)), g = s.applyToRectangle(new u(t.x,i,r.w,r.h)), m = y.call(this, g), v = [], w = 0; w < m.length; w += 1)
                -1 === v.indexOf(m[w]) && v.push(m[w]);
            if (L(v),
            this.autoPaging)
                for (var A = v[0], P = v[v.length - 1], k = A; k < P + 1; k++) {
                    this.pdf.setPage(k);
                    var F = 1 === k ? this.posY + this.margin[0] : this.margin[0]
                      , I = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2]
                      , C = this.pdf.internal.pageSize.height - this.margin[2]
                      , j = C - this.margin[0]
                      , O = this.pdf.internal.pageSize.width - this.margin[1]
                      , B = O - this.margin[3]
                      , M = 1 === k ? 0 : I + (k - 2) * j;
                    if (0 !== this.ctx.clip_path.length) {
                        var E = this.path;
                        h = JSON.parse(JSON.stringify(this.ctx.clip_path)),
                        this.path = N(h, this.posX + this.margin[3], -1 * M + F),
                        x.call(this, "fill", !0),
                        this.path = E
                    }
                    var q = N([JSON.parse(JSON.stringify(g))], this.posX + this.margin[3], -M + F + this.ctx.prevPageLastElemOffset)[0];
                    t.scale >= .01 && (f = this.pdf.internal.getFontSize(),
                    this.pdf.setFontSize(f * t.scale),
                    d = this.lineWidth,
                    this.lineWidth = d * t.scale);
                    var D = "text" !== this.autoPaging;
                    if (D || q.y + q.h <= C) {
                        if (D || q.y >= F && q.x <= O) {
                            var R = D ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O - q.x)[0]
                              , T = N([JSON.parse(JSON.stringify(p))], this.posX + this.margin[3], -M + F + this.ctx.prevPageLastElemOffset)[0]
                              , U = D && (k > A || k < P) && b.call(this);
                            U && (this.pdf.saveGraphicsState(),
                            this.pdf.rect(this.margin[3], this.margin[0], B, j, null).clip().discardPath()),
                            this.pdf.text(R, T.x, T.y, {
                                angle: t.angle,
                                align: e,
                                renderingMode: t.renderingMode
                            }),
                            U && this.pdf.restoreGraphicsState()
                        }
                    } else
                        q.y < C && (this.ctx.prevPageLastElemOffset += C - q.y);
                    t.scale >= .01 && (this.pdf.setFontSize(f),
                    this.lineWidth = d)
                }
            else
                t.scale >= .01 && (f = this.pdf.internal.getFontSize(),
                this.pdf.setFontSize(f * t.scale),
                d = this.lineWidth,
                this.lineWidth = d * t.scale),
                this.pdf.text(t.text, a.x + this.posX, a.y + this.posY, {
                    angle: t.angle,
                    align: e,
                    renderingMode: t.renderingMode,
                    maxWidth: t.maxWidth
                }),
                t.scale >= .01 && (this.pdf.setFontSize(f),
                this.lineWidth = d)
        }
          , j = function(t, e, r, i) {
            r = r || 0,
            i = i || 0,
            this.pdf.internal.out(n(t + r) + " " + a(e + i) + " l")
        }
          , O = function(t, e, r) {
            return this.pdf.lines(t, e, r, null, null)
        }
          , B = function(t, e, n, i, a, c, u, l) {
            this.pdf.internal.out([r(o(n + t)), r(s(i + e)), r(o(a + t)), r(s(c + e)), r(o(u + t)), r(s(l + e)), "c"].join(" "))
        }
          , M = function(t, e, r, n) {
            for (var i = 2 * Math.PI, a = Math.PI / 2; e > r; )
                e -= i;
            var o = Math.abs(r - e);
            o < i && n && (o = i - o);
            for (var s = [], c = n ? -1 : 1, u = e; o > 1e-5; ) {
                var l = u + c * Math.min(o, a);
                s.push(E.call(this, t, u, l)),
                o -= Math.abs(l - u),
                u = l
            }
            return s
        }
          , E = function(t, e, r) {
            var n = (r - e) / 2
              , i = t * Math.cos(n)
              , a = t * Math.sin(n)
              , o = i
              , s = -a
              , c = o * o + s * s
              , u = c + o * i + s * a
              , l = 4 / 3 * (Math.sqrt(2 * c * u) - u) / (o * a - s * i)
              , h = o - l * s
              , f = s + l * o
              , d = h
              , p = -f
              , g = n + e
              , m = Math.cos(g)
              , v = Math.sin(g);
            return {
                x1: t * Math.cos(e),
                y1: t * Math.sin(e),
                x2: h * m - f * v,
                y2: h * v + f * m,
                x3: d * m - p * v,
                y3: d * v + p * m,
                x4: t * Math.cos(r),
                y4: t * Math.sin(r)
            }
        }
          , q = function(t) {
            return 180 * t / Math.PI
        }
          , D = function(t, e, r, n, i, a) {
            var o = t + .5 * (r - t)
              , s = e + .5 * (n - e)
              , c = i + .5 * (r - i)
              , l = a + .5 * (n - a)
              , h = Math.min(t, i, o, c)
              , f = Math.max(t, i, o, c)
              , d = Math.min(e, a, s, l)
              , p = Math.max(e, a, s, l);
            return new u(h,d,f - h,p - d)
        }
          , R = function(t, e, r, n, i, a, o, s) {
            var c, l, h, f, d, p, g, m, v, b, y, w, N, L, A = r - t, x = n - e, S = i - r, _ = a - n, P = o - i, k = s - a;
            for (l = 0; l < 41; l++)
                v = (g = (h = t + (c = l / 40) * A) + c * ((d = r + c * S) - h)) + c * (d + c * (i + c * P - d) - g),
                b = (m = (f = e + c * x) + c * ((p = n + c * _) - f)) + c * (p + c * (a + c * k - p) - m),
                0 == l ? (y = v,
                w = b,
                N = v,
                L = b) : (y = Math.min(y, v),
                w = Math.min(w, b),
                N = Math.max(N, v),
                L = Math.max(L, b));
            return new u(Math.round(y),Math.round(w),Math.round(N - y),Math.round(L - w))
        }
          , T = function() {
            if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
                var t, e, r = (t = this.ctx.lineDash,
                e = this.ctx.lineDashOffset,
                JSON.stringify({
                    lineDash: t,
                    lineDashOffset: e
                }));
                this.prevLineDash !== r && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset),
                this.prevLineDash = r)
            }
        }
    }(M.API);
    try {
        require("worker_threads").Worker
    } catch (t) {}
    var Ut = Uint8Array
      , zt = Uint16Array
      , Ht = Uint32Array
      , Wt = new Ut([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0])
      , Vt = new Ut([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0])
      , Gt = new Ut([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15])
      , Yt = function(t, e) {
        for (var r = new zt(31), n = 0; n < 31; ++n)
            r[n] = e += 1 << t[n - 1];
        var i = new Ht(r[30]);
        for (n = 1; n < 30; ++n)
            for (var a = r[n]; a < r[n + 1]; ++a)
                i[a] = a - r[n] << 5 | n;
        return [r, i]
    }
      , Jt = Yt(Wt, 2)
      , Xt = Jt[0]
      , Kt = Jt[1];
    Xt[28] = 258,
    Kt[258] = 28;
    for (var Zt = Yt(Vt, 0), $t = Zt[0], Qt = Zt[1], te = new zt(32768), ee = 0; ee < 32768; ++ee) {
        var re = (43690 & ee) >>> 1 | (21845 & ee) << 1;
        re = (61680 & (re = (52428 & re) >>> 2 | (13107 & re) << 2)) >>> 4 | (3855 & re) << 4,
        te[ee] = ((65280 & re) >>> 8 | (255 & re) << 8) >>> 1
    }
    var ne = function(t, e, r) {
        for (var n = t.length, i = 0, a = new zt(e); i < n; ++i)
            ++a[t[i] - 1];
        var o, s = new zt(e);
        for (i = 0; i < e; ++i)
            s[i] = s[i - 1] + a[i - 1] << 1;
        if (r) {
            o = new zt(1 << e);
            var c = 15 - e;
            for (i = 0; i < n; ++i)
                if (t[i])
                    for (var u = i << 4 | t[i], l = e - t[i], h = s[t[i] - 1]++ << l, f = h | (1 << l) - 1; h <= f; ++h)
                        o[te[h] >>> c] = u
        } else
            for (o = new zt(n),
            i = 0; i < n; ++i)
                o[i] = te[s[t[i] - 1]++] >>> 15 - t[i];
        return o
    }
      , ie = new Ut(288);
    for (ee = 0; ee < 144; ++ee)
        ie[ee] = 8;
    for (ee = 144; ee < 256; ++ee)
        ie[ee] = 9;
    for (ee = 256; ee < 280; ++ee)
        ie[ee] = 7;
    for (ee = 280; ee < 288; ++ee)
        ie[ee] = 8;
    var ae = new Ut(32);
    for (ee = 0; ee < 32; ++ee)
        ae[ee] = 5;
    var oe = ne(ie, 9, 0)
      , se = ne(ie, 9, 1)
      , ce = ne(ae, 5, 0)
      , ue = ne(ae, 5, 1)
      , le = function(t) {
        for (var e = t[0], r = 1; r < t.length; ++r)
            t[r] > e && (e = t[r]);
        return e
    }
      , he = function(t, e, r) {
        var n = e / 8 >> 0;
        return (t[n] | t[n + 1] << 8) >>> (7 & e) & r
    }
      , fe = function(t, e) {
        var r = e / 8 >> 0;
        return (t[r] | t[r + 1] << 8 | t[r + 2] << 16) >>> (7 & e)
    }
      , de = function(t) {
        return (t / 8 >> 0) + (7 & t && 1)
    }
      , pe = function(t, e, r) {
        (null == e || e < 0) && (e = 0),
        (null == r || r > t.length) && (r = t.length);
        var n = new (t instanceof zt ? zt : t instanceof Ht ? Ht : Ut)(r - e);
        return n.set(t.subarray(e, r)),
        n
    }
      , ge = function(t, e, r) {
        r <<= 7 & e;
        var n = e / 8 >> 0;
        t[n] |= r,
        t[n + 1] |= r >>> 8
    }
      , me = function(t, e, r) {
        r <<= 7 & e;
        var n = e / 8 >> 0;
        t[n] |= r,
        t[n + 1] |= r >>> 8,
        t[n + 2] |= r >>> 16
    }
      , ve = function(t, e) {
        for (var r = [], n = 0; n < t.length; ++n)
            t[n] && r.push({
                s: n,
                f: t[n]
            });
        var i = r.length
          , a = r.slice();
        if (!i)
            return [new Ut(0), 0];
        if (1 == i) {
            var o = new Ut(r[0].s + 1);
            return o[r[0].s] = 1,
            [o, 1]
        }
        r.sort((function(t, e) {
            return t.f - e.f
        }
        )),
        r.push({
            s: -1,
            f: 25001
        });
        var s = r[0]
          , c = r[1]
          , u = 0
          , l = 1
          , h = 2;
        for (r[0] = {
            s: -1,
            f: s.f + c.f,
            l: s,
            r: c
        }; l != i - 1; )
            s = r[r[u].f < r[h].f ? u++ : h++],
            c = r[u != l && r[u].f < r[h].f ? u++ : h++],
            r[l++] = {
                s: -1,
                f: s.f + c.f,
                l: s,
                r: c
            };
        var f = a[0].s;
        for (n = 1; n < i; ++n)
            a[n].s > f && (f = a[n].s);
        var d = new zt(f + 1)
          , p = be(r[l - 1], d, 0);
        if (p > e) {
            n = 0;
            var g = 0
              , m = p - e
              , v = 1 << m;
            for (a.sort((function(t, e) {
                return d[e.s] - d[t.s] || t.f - e.f
            }
            )); n < i; ++n) {
                var b = a[n].s;
                if (!(d[b] > e))
                    break;
                g += v - (1 << p - d[b]),
                d[b] = e
            }
            for (g >>>= m; g > 0; ) {
                var y = a[n].s;
                d[y] < e ? g -= 1 << e - d[y]++ - 1 : ++n
            }
            for (; n >= 0 && g; --n) {
                var w = a[n].s;
                d[w] == e && (--d[w],
                ++g)
            }
            p = e
        }
        return [new Ut(d), p]
    }
      , be = function(t, e, r) {
        return -1 == t.s ? Math.max(be(t.l, e, r + 1), be(t.r, e, r + 1)) : e[t.s] = r
    }
      , ye = function(t) {
        for (var e = t.length; e && !t[--e]; )
            ;
        for (var r = new zt(++e), n = 0, i = t[0], a = 1, o = function(t) {
            r[n++] = t
        }, s = 1; s <= e; ++s)
            if (t[s] == i && s != e)
                ++a;
            else {
                if (!i && a > 2) {
                    for (; a > 138; a -= 138)
                        o(32754);
                    a > 2 && (o(a > 10 ? a - 11 << 5 | 28690 : a - 3 << 5 | 12305),
                    a = 0)
                } else if (a > 3) {
                    for (o(i),
                    --a; a > 6; a -= 6)
                        o(8304);
                    a > 2 && (o(a - 3 << 5 | 8208),
                    a = 0)
                }
                for (; a--; )
                    o(i);
                a = 1,
                i = t[s]
            }
        return [r.subarray(0, n), e]
    }
      , we = function(t, e) {
        for (var r = 0, n = 0; n < e.length; ++n)
            r += t[n] * e[n];
        return r
    }
      , Ne = function(t, e, r) {
        var n = r.length
          , i = de(e + 2);
        t[i] = 255 & n,
        t[i + 1] = n >>> 8,
        t[i + 2] = 255 ^ t[i],
        t[i + 3] = 255 ^ t[i + 1];
        for (var a = 0; a < n; ++a)
            t[i + a + 4] = r[a];
        return 8 * (i + 4 + n)
    }
      , Le = function(t, e, r, n, i, a, o, s, c, u, l) {
        ge(e, l++, r),
        ++i[256];
        for (var h = ve(i, 15), f = h[0], d = h[1], p = ve(a, 15), g = p[0], m = p[1], v = ye(f), b = v[0], y = v[1], w = ye(g), N = w[0], L = w[1], A = new zt(19), x = 0; x < b.length; ++x)
            A[31 & b[x]]++;
        for (x = 0; x < N.length; ++x)
            A[31 & N[x]]++;
        for (var S = ve(A, 7), _ = S[0], P = S[1], k = 19; k > 4 && !_[Gt[k - 1]]; --k)
            ;
        var F, I, C, j, O = u + 5 << 3, B = we(i, ie) + we(a, ae) + o, M = we(i, f) + we(a, g) + o + 14 + 3 * k + we(A, _) + (2 * A[16] + 3 * A[17] + 7 * A[18]);
        if (O <= B && O <= M)
            return Ne(e, l, t.subarray(c, c + u));
        if (ge(e, l, 1 + (M < B)),
        l += 2,
        M < B) {
            F = ne(f, d, 0),
            I = f,
            C = ne(g, m, 0),
            j = g;
            var E = ne(_, P, 0);
            ge(e, l, y - 257),
            ge(e, l + 5, L - 1),
            ge(e, l + 10, k - 4),
            l += 14;
            for (x = 0; x < k; ++x)
                ge(e, l + 3 * x, _[Gt[x]]);
            l += 3 * k;
            for (var q = [b, N], D = 0; D < 2; ++D) {
                var R = q[D];
                for (x = 0; x < R.length; ++x) {
                    var T = 31 & R[x];
                    ge(e, l, E[T]),
                    l += _[T],
                    T > 15 && (ge(e, l, R[x] >>> 5 & 127),
                    l += R[x] >>> 12)
                }
            }
        } else
            F = oe,
            I = ie,
            C = ce,
            j = ae;
        for (x = 0; x < s; ++x)
            if (n[x] > 255) {
                T = n[x] >>> 18 & 31;
                me(e, l, F[T + 257]),
                l += I[T + 257],
                T > 7 && (ge(e, l, n[x] >>> 23 & 31),
                l += Wt[T]);
                var U = 31 & n[x];
                me(e, l, C[U]),
                l += j[U],
                U > 3 && (me(e, l, n[x] >>> 5 & 8191),
                l += Vt[U])
            } else
                me(e, l, F[n[x]]),
                l += I[n[x]];
        return me(e, l, F[256]),
        l + I[256]
    }
      , Ae = new Ht([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632])
      , xe = new Ut(0)
      , Se = function(t, e, r, n, i) {
        return function(t, e, r, n, i, a) {
            var o = t.length
              , s = new Ut(n + o + 5 * (1 + Math.floor(o / 7e3)) + i)
              , c = s.subarray(n, s.length - i)
              , u = 0;
            if (!e || o < 8)
                for (var l = 0; l <= o; l += 65535) {
                    var h = l + 65535;
                    h < o ? u = Ne(c, u, t.subarray(l, h)) : (c[l] = a,
                    u = Ne(c, u, t.subarray(l, o)))
                }
            else {
                for (var f = Ae[e - 1], d = f >>> 13, p = 8191 & f, g = (1 << r) - 1, m = new zt(32768), v = new zt(g + 1), b = Math.ceil(r / 3), y = 2 * b, w = function(e) {
                    return (t[e] ^ t[e + 1] << b ^ t[e + 2] << y) & g
                }, N = new Ht(25e3), L = new zt(288), A = new zt(32), x = 0, S = 0, _ = (l = 0,
                0), P = 0, k = 0; l < o; ++l) {
                    var F = w(l)
                      , I = 32767 & l
                      , C = v[F];
                    if (m[I] = C,
                    v[F] = I,
                    P <= l) {
                        var j = o - l;
                        if ((x > 7e3 || _ > 24576) && j > 423) {
                            u = Le(t, c, 0, N, L, A, S, _, k, l - k, u),
                            _ = x = S = 0,
                            k = l;
                            for (var O = 0; O < 286; ++O)
                                L[O] = 0;
                            for (O = 0; O < 30; ++O)
                                A[O] = 0
                        }
                        var B = 2
                          , M = 0
                          , E = p
                          , q = I - C & 32767;
                        if (j > 2 && F == w(l - q))
                            for (var D = Math.min(d, j) - 1, R = Math.min(32767, l), T = Math.min(258, j); q <= R && --E && I != C; ) {
                                if (t[l + B] == t[l + B - q]) {
                                    for (var U = 0; U < T && t[l + U] == t[l + U - q]; ++U)
                                        ;
                                    if (U > B) {
                                        if (B = U,
                                        M = q,
                                        U > D)
                                            break;
                                        var z = Math.min(q, U - 2)
                                          , H = 0;
                                        for (O = 0; O < z; ++O) {
                                            var W = l - q + O + 32768 & 32767
                                              , V = W - m[W] + 32768 & 32767;
                                            V > H && (H = V,
                                            C = W)
                                        }
                                    }
                                }
                                q += (I = C) - (C = m[I]) + 32768 & 32767
                            }
                        if (M) {
                            N[_++] = 268435456 | Kt[B] << 18 | Qt[M];
                            var G = 31 & Kt[B]
                              , Y = 31 & Qt[M];
                            S += Wt[G] + Vt[Y],
                            ++L[257 + G],
                            ++A[Y],
                            P = l + B,
                            ++x
                        } else
                            N[_++] = t[l],
                            ++L[t[l]]
                    }
                }
                u = Le(t, c, a, N, L, A, S, _, k, l - k, u),
                a || (u = Ne(c, u, xe))
            }
            return pe(s, 0, n + de(u) + i)
        }(t, null == e.level ? 6 : e.level, null == e.mem ? Math.ceil(1.5 * Math.max(8, Math.min(13, Math.log(t.length)))) : 12 + e.mem, r, n, !i)
    };
    function _e(t, e) {
        void 0 === e && (e = {});
        var r = function() {
            var t = 1
              , e = 0;
            return {
                p: function(r) {
                    for (var n = t, i = e, a = r.length, o = 0; o != a; ) {
                        for (var s = Math.min(o + 5552, a); o < s; ++o)
                            i += n += r[o];
                        n %= 65521,
                        i %= 65521
                    }
                    t = n,
                    e = i
                },
                d: function() {
                    return (t >>> 8 << 16 | (255 & e) << 8 | e >>> 8) + 2 * ((255 & t) << 23)
                }
            }
        }();
        r.p(t);
        var n = Se(t, e, 2, 4);
        return function(t, e) {
            var r = e.level
              , n = 0 == r ? 0 : r < 6 ? 1 : 9 == r ? 3 : 2;
            t[0] = 120,
            t[1] = n << 6 | (n ? 32 - 2 * n : 1)
        }(n, e),
        function(t, e, r) {
            for (; r; ++e)
                t[e] = r,
                r >>>= 8
        }(n, n.length - 4, r.d()),
        n
    }
    function Pe(t, e) {
        return function(t, e, r) {
            var n = t.length
              , i = !e || r
              , a = !r || r.i;
            r || (r = {}),
            e || (e = new Ut(3 * n));
            var o = function(t) {
                var r = e.length;
                if (t > r) {
                    var n = new Ut(Math.max(2 * r, t));
                    n.set(e),
                    e = n
                }
            }
              , s = r.f || 0
              , c = r.p || 0
              , u = r.b || 0
              , l = r.l
              , h = r.d
              , f = r.m
              , d = r.n
              , p = 8 * n;
            do {
                if (!l) {
                    r.f = s = he(t, c, 1);
                    var g = he(t, c + 1, 3);
                    if (c += 3,
                    !g) {
                        var m = t[(P = de(c) + 4) - 4] | t[P - 3] << 8
                          , v = P + m;
                        if (v > n) {
                            if (a)
                                throw "unexpected EOF";
                            break
                        }
                        i && o(u + m),
                        e.set(t.subarray(P, v), u),
                        r.b = u += m,
                        r.p = c = 8 * v;
                        continue
                    }
                    if (1 == g)
                        l = se,
                        h = ue,
                        f = 9,
                        d = 5;
                    else {
                        if (2 != g)
                            throw "invalid block type";
                        var b = he(t, c, 31) + 257
                          , y = he(t, c + 10, 15) + 4
                          , w = b + he(t, c + 5, 31) + 1;
                        c += 14;
                        for (var N = new Ut(w), L = new Ut(19), A = 0; A < y; ++A)
                            L[Gt[A]] = he(t, c + 3 * A, 7);
                        c += 3 * y;
                        var x = le(L)
                          , S = (1 << x) - 1;
                        if (!a && c + w * (x + 7) > p)
                            break;
                        var _ = ne(L, x, 1);
                        for (A = 0; A < w; ) {
                            var P, k = _[he(t, c, S)];
                            if (c += 15 & k,
                            (P = k >>> 4) < 16)
                                N[A++] = P;
                            else {
                                var F = 0
                                  , I = 0;
                                for (16 == P ? (I = 3 + he(t, c, 3),
                                c += 2,
                                F = N[A - 1]) : 17 == P ? (I = 3 + he(t, c, 7),
                                c += 3) : 18 == P && (I = 11 + he(t, c, 127),
                                c += 7); I--; )
                                    N[A++] = F
                            }
                        }
                        var C = N.subarray(0, b)
                          , j = N.subarray(b);
                        f = le(C),
                        d = le(j),
                        l = ne(C, f, 1),
                        h = ne(j, d, 1)
                    }
                    if (c > p)
                        throw "unexpected EOF"
                }
                i && o(u + 131072);
                for (var O = (1 << f) - 1, B = (1 << d) - 1, M = f + d + 18; a || c + M < p; ) {
                    var E = (F = l[fe(t, c) & O]) >>> 4;
                    if ((c += 15 & F) > p)
                        throw "unexpected EOF";
                    if (!F)
                        throw "invalid length/literal";
                    if (E < 256)
                        e[u++] = E;
                    else {
                        if (256 == E) {
                            l = null;
                            break
                        }
                        var q = E - 254;
                        if (E > 264) {
                            var D = Wt[A = E - 257];
                            q = he(t, c, (1 << D) - 1) + Xt[A],
                            c += D
                        }
                        var R = h[fe(t, c) & B]
                          , T = R >>> 4;
                        if (!R)
                            throw "invalid distance";
                        c += 15 & R;
                        j = $t[T];
                        if (T > 3) {
                            D = Vt[T];
                            j += fe(t, c) & (1 << D) - 1,
                            c += D
                        }
                        if (c > p)
                            throw "unexpected EOF";
                        i && o(u + 131072);
                        for (var U = u + q; u < U; u += 4)
                            e[u] = e[u - j],
                            e[u + 1] = e[u + 1 - j],
                            e[u + 2] = e[u + 2 - j],
                            e[u + 3] = e[u + 3 - j];
                        u = U
                    }
                }
                r.l = l,
                r.p = c,
                r.b = u,
                l && (s = 1,
                r.m = f,
                r.d = h,
                r.n = d)
            } while (!s);
            return u == e.length ? e : pe(e, 0, u)
        }((function(t) {
            if (8 != (15 & t[0]) || t[0] >>> 4 > 7 || (t[0] << 8 | t[1]) % 31)
                throw "invalid zlib data";
            if (32 & t[1])
                throw "invalid zlib data: preset dictionaries not supported"
        }(t),
        t.subarray(2, -4)), e)
    }
    /**
   * @license
   * jsPDF filters PlugIn
   * Copyright (c) 2014 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    !function(t) {
        var e = function(t) {
            var e, r, n, i, a, o, s, c, u, l;
            for (/[^\x00-\xFF]/.test(t),
            r = [],
            n = 0,
            i = (t += e = "\0\0\0\0".slice(t.length % 4 || 4)).length; i > n; n += 4)
                0 !== (a = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (o = (a = ((a = ((a = ((a = (a - (l = a % 85)) / 85) - (u = a % 85)) / 85) - (c = a % 85)) / 85) - (s = a % 85)) / 85) % 85,
                r.push(o + 33, s + 33, c + 33, u + 33, l + 33)) : r.push(122);
            return function(t, e) {
                for (var r = e; r > 0; r--)
                    t.pop()
            }(r, e.length),
            String.fromCharCode.apply(String, r) + "~>"
        }
          , r = function(t) {
            var e, r, n, i, a, o = String, s = "length", c = 255, u = "charCodeAt", l = "slice", h = "replace";
            for (t[l](-2),
            t = t[l](0, -2)[h](/\s/g, "")[h]("z", "!!!!!"),
            n = [],
            i = 0,
            a = (t += e = "uuuuu"[l](t[s] % 5 || 5))[s]; a > i; i += 5)
                r = 52200625 * (t[u](i) - 33) + 614125 * (t[u](i + 1) - 33) + 7225 * (t[u](i + 2) - 33) + 85 * (t[u](i + 3) - 33) + (t[u](i + 4) - 33),
                n.push(c & r >> 24, c & r >> 16, c & r >> 8, c & r);
            return function(t, e) {
                for (var r = e; r > 0; r--)
                    t.pop()
            }(n, e[s]),
            o.fromCharCode.apply(o, n)
        }
          , n = function(t) {
            var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
            if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))),
            t.length % 2 && (t += "0"),
            !1 === e.test(t))
                return "";
            for (var r = "", n = 0; n < t.length; n += 2)
                r += String.fromCharCode("0x" + (t[n] + t[n + 1]));
            return r
        }
          , i = function(t) {
            for (var e = new Uint8Array(t.length), r = t.length; r--; )
                e[r] = t.charCodeAt(r);
            return t = (e = _e(e)).reduce((function(t, e) {
                return t + String.fromCharCode(e)
            }
            ), "")
        };
        t.processDataByFilters = function(t, a) {
            var o = 0
              , s = t || ""
              , c = [];
            for ("string" == typeof (a = a || []) && (a = [a]),
            o = 0; o < a.length; o += 1)
                switch (a[o]) {
                case "ASCII85Decode":
                case "/ASCII85Decode":
                    s = r(s),
                    c.push("/ASCII85Encode");
                    break;
                case "ASCII85Encode":
                case "/ASCII85Encode":
                    s = e(s),
                    c.push("/ASCII85Decode");
                    break;
                case "ASCIIHexDecode":
                case "/ASCIIHexDecode":
                    s = n(s),
                    c.push("/ASCIIHexEncode");
                    break;
                case "ASCIIHexEncode":
                case "/ASCIIHexEncode":
                    s = s.split("").map((function(t) {
                        return ("0" + t.charCodeAt().toString(16)).slice(-2)
                    }
                    )).join("") + ">",
                    c.push("/ASCIIHexDecode");
                    break;
                case "FlateEncode":
                case "/FlateEncode":
                    s = i(s),
                    c.push("/FlateDecode");
                    break;
                default:
                    throw new Error('The filter: "' + a[o] + '" is not implemented')
                }
            return {
                data: s,
                reverseChain: c.reverse().join(" ")
            }
        }
    }(M.API),
    /**
   * @license
   * jsPDF fileloading PlugIn
   * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        t.loadFile = function(t, e, r) {
            return function(t, e, r) {
                e = !1 !== e,
                r = "function" == typeof r ? r : function() {}
                ;
                var n = void 0;
                try {
                    n = function(t, e, r) {
                        var n = new XMLHttpRequest
                          , i = 0
                          , a = function(t) {
                            var e = t.length
                              , r = []
                              , n = String.fromCharCode;
                            for (i = 0; i < e; i += 1)
                                r.push(n(255 & t.charCodeAt(i)));
                            return r.join("")
                        };
                        if (n.open("GET", t, !e),
                        n.overrideMimeType("text/plain; charset=x-user-defined"),
                        !1 === e && (n.onload = function() {
                            200 === n.status ? r(a(this.responseText)) : r(void 0)
                        }
                        ),
                        n.send(null),
                        e && 200 === n.status)
                            return a(n.responseText)
                    }(t, e, r)
                } catch (t) {}
                return n
            }(t, e, r)
        }
        ,
        t.loadImageFile = t.loadFile
    }(M.API),
    function(n) {
        function i() {
            return (r.html2canvas ? Promise.resolve(r.html2canvas) : "object" === (void 0 === t ? "undefined" : e(t)) && "undefined" != typeof module ? new Promise((function(t, e) {
                try {
                    t(require("html2canvas"))
                } catch (t) {
                    e(t)
                }
            }
            )) : "function" == typeof define && define.amd ? new Promise((function(t, e) {
                try {
                    require(["html2canvas"], t)
                } catch (t) {
                    e(t)
                }
            }
            )) : Promise.reject(new Error("Could not load html2canvas"))).catch((function(t) {
                return Promise.reject(new Error("Could not load html2canvas: " + t))
            }
            )).then((function(t) {
                return t.default ? t.default : t
            }
            ))
        }
        function a() {
            return (r.DOMPurify ? Promise.resolve(r.DOMPurify) : "object" === (void 0 === t ? "undefined" : e(t)) && "undefined" != typeof module ? new Promise((function(t, e) {
                try {
                    t(require("dompurify"))
                } catch (t) {
                    e(t)
                }
            }
            )) : "function" == typeof define && define.amd ? new Promise((function(t, e) {
                try {
                    require(["dompurify"], t)
                } catch (t) {
                    e(t)
                }
            }
            )) : Promise.reject(new Error("Could not load dompurify"))).catch((function(t) {
                return Promise.reject(new Error("Could not load dompurify: " + t))
            }
            )).then((function(t) {
                return t.default ? t.default : t
            }
            ))
        }
        var o = function(t) {
            var r = e(t);
            return "undefined" === r ? "undefined" : "string" === r || t instanceof String ? "string" : "number" === r || t instanceof Number ? "number" : "function" === r || t instanceof Function ? "function" : t && t.constructor === Array ? "array" : t && 1 === t.nodeType ? "element" : "object" === r ? "object" : "unknown"
        }
          , s = function(t, e) {
            var r = document.createElement(t);
            for (var n in e.className && (r.className = e.className),
            e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)),
            e.style)
                r.style[n] = e.style[n];
            return r
        }
          , c = function t(e) {
            var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template)))
              , n = t.convert(Promise.resolve(), r);
            return n = (n = n.setProgress(1, t, 1, [t])).set(e)
        };
        (c.prototype = Object.create(Promise.prototype)).constructor = c,
        c.convert = function(t, e) {
            return t.__proto__ = e || c.prototype,
            t
        }
        ,
        c.template = {
            prop: {
                src: null,
                container: null,
                overlay: null,
                canvas: null,
                img: null,
                pdf: null,
                pageSize: null,
                callback: function() {}
            },
            progress: {
                val: 0,
                state: null,
                n: 0,
                stack: []
            },
            opt: {
                filename: "file.pdf",
                margin: [0, 0, 0, 0],
                enableLinks: !0,
                x: 0,
                y: 0,
                html2canvas: {},
                jsPDF: {},
                backgroundColor: "transparent"
            }
        },
        c.prototype.from = function(t, e) {
            return this.then((function() {
                switch (e = e || function(t) {
                    switch (o(t)) {
                    case "string":
                        return "string";
                    case "element":
                        return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";
                    default:
                        return "unknown"
                    }
                }(t)) {
                case "string":
                    return this.then(a).then((function(e) {
                        return this.set({
                            src: s("div", {
                                innerHTML: t,
                                dompurify: e
                            })
                        })
                    }
                    ));
                case "element":
                    return this.set({
                        src: t
                    });
                case "canvas":
                    return this.set({
                        canvas: t
                    });
                case "img":
                    return this.set({
                        img: t
                    });
                default:
                    return this.error("Unknown source type.")
                }
            }
            ))
        }
        ,
        c.prototype.to = function(t) {
            switch (t) {
            case "container":
                return this.toContainer();
            case "canvas":
                return this.toCanvas();
            case "img":
                return this.toImg();
            case "pdf":
                return this.toPdf();
            default:
                return this.error("Invalid target.")
            }
        }
        ,
        c.prototype.toContainer = function() {
            return this.thenList([function() {
                return this.prop.src || this.error("Cannot duplicate - no source HTML.")
            }
            , function() {
                return this.prop.pageSize || this.setPageSize()
            }
            ]).then((function() {
                var t = {
                    position: "relative",
                    display: "inline-block",
                    width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px",
                    left: 0,
                    right: 0,
                    top: 0,
                    margin: "auto",
                    backgroundColor: this.opt.backgroundColor
                }
                  , e = function t(e, r) {
                    for (var n = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling)
                        !0 !== r && 1 === i.nodeType && "SCRIPT" === i.nodeName || n.appendChild(t(i, r));
                    return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (n.width = e.width,
                    n.height = e.height,
                    n.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (n.value = e.value),
                    n.addEventListener("load", (function() {
                        n.scrollTop = e.scrollTop,
                        n.scrollLeft = e.scrollLeft
                    }
                    ), !0)),
                    n
                }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
                "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"),
                this.prop.overlay = s("div", {
                    className: "html2pdf__overlay",
                    style: {
                        position: "fixed",
                        overflow: "hidden",
                        zIndex: 1e3,
                        left: "-100000px",
                        right: 0,
                        bottom: 0,
                        top: 0
                    }
                }),
                this.prop.container = s("div", {
                    className: "html2pdf__container",
                    style: t
                }),
                this.prop.container.appendChild(e),
                this.prop.container.firstChild.appendChild(s("div", {
                    style: {
                        clear: "both",
                        border: "0 none transparent",
                        margin: 0,
                        padding: 0,
                        height: 0
                    }
                })),
                this.prop.container.style.float = "none",
                this.prop.overlay.appendChild(this.prop.container),
                document.body.appendChild(this.prop.overlay),
                this.prop.container.firstChild.style.position = "relative",
                this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px"
            }
            ))
        }
        ,
        c.prototype.toCanvas = function() {
            var t = [function() {
                return document.body.contains(this.prop.container) || this.toContainer()
            }
            ];
            return this.thenList(t).then(i).then((function(t) {
                var e = Object.assign({}, this.opt.html2canvas);
                return delete e.onrendered,
                t(this.prop.container, e)
            }
            )).then((function(t) {
                (this.opt.html2canvas.onrendered || function() {}
                )(t),
                this.prop.canvas = t,
                document.body.removeChild(this.prop.overlay)
            }
            ))
        }
        ,
        c.prototype.toContext2d = function() {
            var t = [function() {
                return document.body.contains(this.prop.container) || this.toContainer()
            }
            ];
            return this.thenList(t).then(i).then((function(t) {
                var e = this.opt.jsPDF
                  , r = this.opt.fontFaces
                  , n = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth
                  , i = Object.assign({
                    async: !0,
                    allowTaint: !0,
                    scale: n,
                    scrollX: this.opt.scrollX || 0,
                    scrollY: this.opt.scrollY || 0,
                    backgroundColor: "#ffffff",
                    imageTimeout: 15e3,
                    logging: !0,
                    proxy: null,
                    removeContainer: !0,
                    foreignObjectRendering: !1,
                    useCORS: !1
                }, this.opt.html2canvas);
                if (delete i.onrendered,
                e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging,
                e.context2d.posX = this.opt.x,
                e.context2d.posY = this.opt.y,
                e.context2d.margin = this.opt.margin,
                e.context2d.fontFaces = r,
                r)
                    for (var a = 0; a < r.length; ++a) {
                        var o = r[a]
                          , s = o.src.find((function(t) {
                            return "truetype" === t.format
                        }
                        ));
                        s && e.addFont(s.url, o.ref.name, o.ref.style)
                    }
                return i.windowHeight = i.windowHeight || 0,
                i.windowHeight = 0 == i.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i.windowHeight,
                e.context2d.save(!0),
                t(this.prop.container, i)
            }
            )).then((function(t) {
                this.opt.jsPDF.context2d.restore(!0),
                (this.opt.html2canvas.onrendered || function() {}
                )(t),
                this.prop.canvas = t,
                document.body.removeChild(this.prop.overlay)
            }
            ))
        }
        ,
        c.prototype.toImg = function() {
            return this.thenList([function() {
                return this.prop.canvas || this.toCanvas()
            }
            ]).then((function() {
                var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
                this.prop.img = document.createElement("img"),
                this.prop.img.src = t
            }
            ))
        }
        ,
        c.prototype.toPdf = function() {
            return this.thenList([function() {
                return this.toContext2d()
            }
            ]).then((function() {
                this.prop.pdf = this.prop.pdf || this.opt.jsPDF
            }
            ))
        }
        ,
        c.prototype.output = function(t, e, r) {
            return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e)
        }
        ,
        c.prototype.outputPdf = function(t, e) {
            return this.thenList([function() {
                return this.prop.pdf || this.toPdf()
            }
            ]).then((function() {
                return this.prop.pdf.output(t, e)
            }
            ))
        }
        ,
        c.prototype.outputImg = function(t) {
            return this.thenList([function() {
                return this.prop.img || this.toImg()
            }
            ]).then((function() {
                switch (t) {
                case void 0:
                case "img":
                    return this.prop.img;
                case "datauristring":
                case "dataurlstring":
                    return this.prop.img.src;
                case "datauri":
                case "dataurl":
                    return document.location.href = this.prop.img.src;
                default:
                    throw 'Image output type "' + t + '" is not supported.'
                }
            }
            ))
        }
        ,
        c.prototype.save = function(t) {
            return this.thenList([function() {
                return this.prop.pdf || this.toPdf()
            }
            ]).set(t ? {
                filename: t
            } : null).then((function() {
                this.prop.pdf.save(this.opt.filename)
            }
            ))
        }
        ,
        c.prototype.doCallback = function() {
            return this.thenList([function() {
                return this.prop.pdf || this.toPdf()
            }
            ]).then((function() {
                this.prop.callback(this.prop.pdf)
            }
            ))
        }
        ,
        c.prototype.set = function(t) {
            if ("object" !== o(t))
                return this;
            var e = Object.keys(t || {}).map((function(e) {
                if (e in c.template.prop)
                    return function() {
                        this.prop[e] = t[e]
                    }
                    ;
                switch (e) {
                case "margin":
                    return this.setMargin.bind(this, t.margin);
                case "jsPDF":
                    return function() {
                        return this.opt.jsPDF = t.jsPDF,
                        this.setPageSize()
                    }
                    ;
                case "pageSize":
                    return this.setPageSize.bind(this, t.pageSize);
                default:
                    return function() {
                        this.opt[e] = t[e]
                    }
                }
            }
            ), this);
            return this.then((function() {
                return this.thenList(e)
            }
            ))
        }
        ,
        c.prototype.get = function(t, e) {
            return this.then((function() {
                var r = t in c.template.prop ? this.prop[t] : this.opt[t];
                return e ? e(r) : r
            }
            ))
        }
        ,
        c.prototype.setMargin = function(t) {
            return this.then((function() {
                switch (o(t)) {
                case "number":
                    t = [t, t, t, t];
                case "array":
                    if (2 === t.length && (t = [t[0], t[1], t[0], t[1]]),
                    4 === t.length)
                        break;
                default:
                    return this.error("Invalid margin array.")
                }
                this.opt.margin = t
            }
            )).then(this.setPageSize)
        }
        ,
        c.prototype.setPageSize = function(t) {
            function e(t, e) {
                return Math.floor(t * e / 72 * 96)
            }
            return this.then((function() {
                (t = t || M.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
                    width: t.width - this.opt.margin[1] - this.opt.margin[3],
                    height: t.height - this.opt.margin[0] - this.opt.margin[2]
                },
                t.inner.px = {
                    width: e(t.inner.width, t.k),
                    height: e(t.inner.height, t.k)
                },
                t.inner.ratio = t.inner.height / t.inner.width),
                this.prop.pageSize = t
            }
            ))
        }
        ,
        c.prototype.setProgress = function(t, e, r, n) {
            return null != t && (this.progress.val = t),
            null != e && (this.progress.state = e),
            null != r && (this.progress.n = r),
            null != n && (this.progress.stack = n),
            this.progress.ratio = this.progress.val / this.progress.state,
            this
        }
        ,
        c.prototype.updateProgress = function(t, e, r, n) {
            return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n ? this.progress.stack.concat(n) : null)
        }
        ,
        c.prototype.then = function(t, e) {
            var r = this;
            return this.thenCore(t, e, (function(t, e) {
                return r.updateProgress(null, null, 1, [t]),
                Promise.prototype.then.call(this, (function(e) {
                    return r.updateProgress(null, t),
                    e
                }
                )).then(t, e).then((function(t) {
                    return r.updateProgress(1),
                    t
                }
                ))
            }
            ))
        }
        ,
        c.prototype.thenCore = function(t, e, r) {
            r = r || Promise.prototype.then;
            t && (t = t.bind(this)),
            e && (e = e.bind(this));
            var n = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : c.convert(Object.assign({}, this), Promise.prototype)
              , i = r.call(n, t, e);
            return c.convert(i, this.__proto__)
        }
        ,
        c.prototype.thenExternal = function(t, e) {
            return Promise.prototype.then.call(this, t, e)
        }
        ,
        c.prototype.thenList = function(t) {
            var e = this;
            return t.forEach((function(t) {
                e = e.thenCore(t)
            }
            )),
            e
        }
        ,
        c.prototype.catch = function(t) {
            t && (t = t.bind(this));
            var e = Promise.prototype.catch.call(this, t);
            return c.convert(e, this)
        }
        ,
        c.prototype.catchExternal = function(t) {
            return Promise.prototype.catch.call(this, t)
        }
        ,
        c.prototype.error = function(t) {
            return this.then((function() {
                throw new Error(t)
            }
            ))
        }
        ,
        c.prototype.using = c.prototype.set,
        c.prototype.saveAs = c.prototype.save,
        c.prototype.export = c.prototype.output,
        c.prototype.run = c.prototype.then,
        M.getPageSize = function(t, r, n) {
            if ("object" === e(t)) {
                var i = t;
                t = i.orientation,
                r = i.unit || r,
                n = i.format || n
            }
            r = r || "mm",
            n = n || "a4",
            t = ("" + (t || "P")).toLowerCase();
            var a, o = ("" + n).toLowerCase(), s = {
                a0: [2383.94, 3370.39],
                a1: [1683.78, 2383.94],
                a2: [1190.55, 1683.78],
                a3: [841.89, 1190.55],
                a4: [595.28, 841.89],
                a5: [419.53, 595.28],
                a6: [297.64, 419.53],
                a7: [209.76, 297.64],
                a8: [147.4, 209.76],
                a9: [104.88, 147.4],
                a10: [73.7, 104.88],
                b0: [2834.65, 4008.19],
                b1: [2004.09, 2834.65],
                b2: [1417.32, 2004.09],
                b3: [1000.63, 1417.32],
                b4: [708.66, 1000.63],
                b5: [498.9, 708.66],
                b6: [354.33, 498.9],
                b7: [249.45, 354.33],
                b8: [175.75, 249.45],
                b9: [124.72, 175.75],
                b10: [87.87, 124.72],
                c0: [2599.37, 3676.54],
                c1: [1836.85, 2599.37],
                c2: [1298.27, 1836.85],
                c3: [918.43, 1298.27],
                c4: [649.13, 918.43],
                c5: [459.21, 649.13],
                c6: [323.15, 459.21],
                c7: [229.61, 323.15],
                c8: [161.57, 229.61],
                c9: [113.39, 161.57],
                c10: [79.37, 113.39],
                dl: [311.81, 623.62],
                letter: [612, 792],
                "government-letter": [576, 756],
                legal: [612, 1008],
                "junior-legal": [576, 360],
                ledger: [1224, 792],
                tabloid: [792, 1224],
                "credit-card": [153, 243]
            };
            switch (r) {
            case "pt":
                a = 1;
                break;
            case "mm":
                a = 72 / 25.4;
                break;
            case "cm":
                a = 72 / 2.54;
                break;
            case "in":
                a = 72;
                break;
            case "px":
                a = .75;
                break;
            case "pc":
            case "em":
                a = 12;
                break;
            case "ex":
                a = 6;
                break;
            default:
                throw "Invalid unit: " + r
            }
            var c, u = 0, l = 0;
            if (s.hasOwnProperty(o))
                u = s[o][1] / a,
                l = s[o][0] / a;
            else
                try {
                    u = n[1],
                    l = n[0]
                } catch (t) {
                    throw new Error("Invalid format: " + n)
                }
            if ("p" === t || "portrait" === t)
                t = "p",
                l > u && (c = l,
                l = u,
                u = c);
            else {
                if ("l" !== t && "landscape" !== t)
                    throw "Invalid orientation: " + t;
                t = "l",
                u > l && (c = l,
                l = u,
                u = c)
            }
            return {
                width: l,
                height: u,
                unit: r,
                k: a,
                orientation: t
            }
        }
        ,
        n.html = function(t, e) {
            (e = e || {}).callback = e.callback || function() {}
            ,
            e.html2canvas = e.html2canvas || {},
            e.html2canvas.canvas = e.html2canvas.canvas || this.canvas,
            e.jsPDF = e.jsPDF || this,
            e.fontFaces = e.fontFaces ? e.fontFaces.map(Ct) : null;
            var r = new c(e);
            return e.worker ? r : r.from(t).doCallback()
        }
    }(M.API),
    /**
   * @license
   * ====================================================================
   * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   */
    function(t) {
        var e, r, n;
        t.addJS = function(t) {
            return n = t,
            this.internal.events.subscribe("postPutResources", (function() {
                e = this.internal.newObject(),
                this.internal.out("<<"),
                this.internal.out("/Names [(EmbeddedJS) " + (e + 1) + " 0 R]"),
                this.internal.out(">>"),
                this.internal.out("endobj"),
                r = this.internal.newObject(),
                this.internal.out("<<"),
                this.internal.out("/S /JavaScript"),
                this.internal.out("/JS (" + n + ")"),
                this.internal.out(">>"),
                this.internal.out("endobj")
            }
            )),
            this.internal.events.subscribe("putCatalog", (function() {
                void 0 !== e && void 0 !== r && this.internal.out("/Names <</JavaScript " + e + " 0 R>>")
            }
            )),
            this
        }
    }(M.API),
    /**
   * @license
   * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e;
        t.events.push(["postPutResources", function() {
            var t = this
              , r = /^(\d+) 0 obj$/;
            if (this.outline.root.children.length > 0)
                for (var n = t.outline.render().split(/\r\n/), i = 0; i < n.length; i++) {
                    var a = n[i]
                      , o = r.exec(a);
                    if (null != o) {
                        var s = o[1];
                        t.internal.newObjectDeferredBegin(s, !1)
                    }
                    t.internal.write(a)
                }
            if (this.outline.createNamedDestinations) {
                var c = this.internal.pages.length
                  , u = [];
                for (i = 0; i < c; i++) {
                    var l = t.internal.newObject();
                    u.push(l);
                    var h = t.internal.getPageInfo(i + 1);
                    t.internal.write("<< /D[" + h.objId + " 0 R /XYZ null null null]>> endobj")
                }
                var f = t.internal.newObject();
                t.internal.write("<< /Names [ ");
                for (i = 0; i < u.length; i++)
                    t.internal.write("(page_" + (i + 1) + ")" + u[i] + " 0 R");
                t.internal.write(" ] >>", "endobj"),
                e = t.internal.newObject(),
                t.internal.write("<< /Dests " + f + " 0 R"),
                t.internal.write(">>", "endobj")
            }
        }
        ]),
        t.events.push(["putCatalog", function() {
            this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)),
            this.outline.createNamedDestinations && this.internal.write("/Names " + e + " 0 R"))
        }
        ]),
        t.events.push(["initialized", function() {
            var t = this;
            t.outline = {
                createNamedDestinations: !1,
                root: {
                    children: []
                }
            },
            t.outline.add = function(t, e, r) {
                var n = {
                    title: e,
                    options: r,
                    children: []
                };
                return null == t && (t = this.root),
                t.children.push(n),
                n
            }
            ,
            t.outline.render = function() {
                return this.ctx = {},
                this.ctx.val = "",
                this.ctx.pdf = t,
                this.genIds_r(this.root),
                this.renderRoot(this.root),
                this.renderItems(this.root),
                this.ctx.val
            }
            ,
            t.outline.genIds_r = function(e) {
                e.id = t.internal.newObjectDeferred();
                for (var r = 0; r < e.children.length; r++)
                    this.genIds_r(e.children[r])
            }
            ,
            t.outline.renderRoot = function(t) {
                this.objStart(t),
                this.line("/Type /Outlines"),
                t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])),
                this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))),
                this.line("/Count " + this.count_r({
                    count: 0
                }, t)),
                this.objEnd()
            }
            ,
            t.outline.renderItems = function(e) {
                for (var r = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < e.children.length; n++) {
                    var i = e.children[n];
                    this.objStart(i),
                    this.line("/Title " + this.makeString(i.title)),
                    this.line("/Parent " + this.makeRef(e)),
                    n > 0 && this.line("/Prev " + this.makeRef(e.children[n - 1])),
                    n < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n + 1])),
                    i.children.length > 0 && (this.line("/First " + this.makeRef(i.children[0])),
                    this.line("/Last " + this.makeRef(i.children[i.children.length - 1])));
                    var a = this.count = this.count_r({
                        count: 0
                    }, i);
                    if (a > 0 && this.line("/Count " + a),
                    i.options && i.options.pageNumber) {
                        var o = t.internal.getPageInfo(i.options.pageNumber);
                        this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + r(0) + " 0]")
                    }
                    this.objEnd()
                }
                for (var s = 0; s < e.children.length; s++)
                    this.renderItems(e.children[s])
            }
            ,
            t.outline.line = function(t) {
                this.ctx.val += t + "\r\n"
            }
            ,
            t.outline.makeRef = function(t) {
                return t.id + " 0 R"
            }
            ,
            t.outline.makeString = function(e) {
                return "(" + t.internal.pdfEscape(e) + ")"
            }
            ,
            t.outline.objStart = function(t) {
                this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n"
            }
            ,
            t.outline.objEnd = function() {
                this.ctx.val += ">> \r\nendobj\r\n"
            }
            ,
            t.outline.count_r = function(t, e) {
                for (var r = 0; r < e.children.length; r++)
                    t.count++,
                    this.count_r(t, e.children[r]);
                return t.count
            }
        }
        ])
    }(M.API),
    /**
   * @license
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = [192, 193, 194, 195, 196, 197, 198, 199];
        t.processJPEG = function(t, r, n, i, a, o) {
            var s, c = this.decode.DCT_DECODE, u = null;
            if ("string" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {
                switch (t = a || t,
                t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t,
                (s = function(t) {
                    for (var r, n = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {
                        width: 0,
                        height: 0,
                        numcomponents: 1
                    }, o = 4; o < i; o += 2) {
                        if (o += n,
                        -1 !== e.indexOf(t.charCodeAt(o + 1))) {
                            r = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6),
                            a = {
                                width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),
                                height: r,
                                numcomponents: t.charCodeAt(o + 9)
                            };
                            break
                        }
                        n = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3)
                    }
                    return a
                }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t)).numcomponents) {
                case 1:
                    o = this.color_spaces.DEVICE_GRAY;
                    break;
                case 4:
                    o = this.color_spaces.DEVICE_CMYK;
                    break;
                case 3:
                    o = this.color_spaces.DEVICE_RGB
                }
                u = {
                    data: t,
                    width: s.width,
                    height: s.height,
                    colorSpace: o,
                    bitsPerComponent: 8,
                    filter: c,
                    index: r,
                    alias: n
                }
            }
            return u
        }
    }(M.API);
    var ke, Fe, Ie, Ce, je, Oe = function() {
        var t, e, n;
        function i(t) {
            var e, r, n, i, a, o, s, c, u, l, h, f, d, p;
            for (this.data = t,
            this.pos = 8,
            this.palette = [],
            this.imgData = [],
            this.transparency = {},
            this.animation = null,
            this.text = {},
            o = null; ; ) {
                switch (e = this.readUInt32(),
                u = function() {
                    var t, e;
                    for (e = [],
                    t = 0; t < 4; ++t)
                        e.push(String.fromCharCode(this.data[this.pos++]));
                    return e
                }
                .call(this).join("")) {
                case "IHDR":
                    this.width = this.readUInt32(),
                    this.height = this.readUInt32(),
                    this.bits = this.data[this.pos++],
                    this.colorType = this.data[this.pos++],
                    this.compressionMethod = this.data[this.pos++],
                    this.filterMethod = this.data[this.pos++],
                    this.interlaceMethod = this.data[this.pos++];
                    break;
                case "acTL":
                    this.animation = {
                        numFrames: this.readUInt32(),
                        numPlays: this.readUInt32() || 1 / 0,
                        frames: []
                    };
                    break;
                case "PLTE":
                    this.palette = this.read(e);
                    break;
                case "fcTL":
                    o && this.animation.frames.push(o),
                    this.pos += 4,
                    o = {
                        width: this.readUInt32(),
                        height: this.readUInt32(),
                        xOffset: this.readUInt32(),
                        yOffset: this.readUInt32()
                    },
                    a = this.readUInt16(),
                    i = this.readUInt16() || 100,
                    o.delay = 1e3 * a / i,
                    o.disposeOp = this.data[this.pos++],
                    o.blendOp = this.data[this.pos++],
                    o.data = [];
                    break;
                case "IDAT":
                case "fdAT":
                    for ("fdAT" === u && (this.pos += 4,
                    e -= 4),
                    t = (null != o ? o.data : void 0) || this.imgData,
                    f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f)
                        t.push(this.data[this.pos++]);
                    break;
                case "tRNS":
                    switch (this.transparency = {},
                    this.colorType) {
                    case 3:
                        if (n = this.palette.length / 3,
                        this.transparency.indexed = this.read(e),
                        this.transparency.indexed.length > n)
                            throw new Error("More transparent colors than palette size");
                        if ((l = n - this.transparency.indexed.length) > 0)
                            for (d = 0; 0 <= l ? d < l : d > l; 0 <= l ? ++d : --d)
                                this.transparency.indexed.push(255);
                        break;
                    case 0:
                        this.transparency.grayscale = this.read(e)[0];
                        break;
                    case 2:
                        this.transparency.rgb = this.read(e)
                    }
                    break;
                case "tEXt":
                    s = (h = this.read(e)).indexOf(0),
                    c = String.fromCharCode.apply(String, h.slice(0, s)),
                    this.text[c] = String.fromCharCode.apply(String, h.slice(s + 1));
                    break;
                case "IEND":
                    return o && this.animation.frames.push(o),
                    this.colors = function() {
                        switch (this.colorType) {
                        case 0:
                        case 3:
                        case 4:
                            return 1;
                        case 2:
                        case 6:
                            return 3
                        }
                    }
                    .call(this),
                    this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p,
                    r = this.colors + (this.hasAlphaChannel ? 1 : 0),
                    this.pixelBitlength = this.bits * r,
                    this.colorSpace = function() {
                        switch (this.colors) {
                        case 1:
                            return "DeviceGray";
                        case 3:
                            return "DeviceRGB"
                        }
                    }
                    .call(this),
                    void (this.imgData = new Uint8Array(this.imgData));
                default:
                    this.pos += e
                }
                if (this.pos += 4,
                this.pos > this.data.length)
                    throw new Error("Incomplete or corrupt PNG file")
            }
        }
        i.prototype.read = function(t) {
            var e, r;
            for (r = [],
            e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e)
                r.push(this.data[this.pos++]);
            return r
        }
        ,
        i.prototype.readUInt32 = function() {
            return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++]
        }
        ,
        i.prototype.readUInt16 = function() {
            return this.data[this.pos++] << 8 | this.data[this.pos++]
        }
        ,
        i.prototype.decodePixels = function(t) {
            var e = this.pixelBitlength / 8
              , r = new Uint8Array(this.width * this.height * e)
              , n = 0
              , i = this;
            if (null == t && (t = this.imgData),
            0 === t.length)
                return new Uint8Array(0);
            function a(a, o, s, c) {
                var u, l, h, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, F, I = Math.ceil((i.width - a) / s), C = Math.ceil((i.height - o) / c), j = i.width == I && i.height == C;
                for (L = e * I,
                w = j ? r : new Uint8Array(L * C),
                p = t.length,
                N = 0,
                l = 0; N < C && n < p; ) {
                    switch (t[n++]) {
                    case 0:
                        for (f = S = 0; S < L; f = S += 1)
                            w[l++] = t[n++];
                        break;
                    case 1:
                        for (f = _ = 0; _ < L; f = _ += 1)
                            u = t[n++],
                            d = f < e ? 0 : w[l - e],
                            w[l++] = (u + d) % 256;
                        break;
                    case 2:
                        for (f = P = 0; P < L; f = P += 1)
                            u = t[n++],
                            h = (f - f % e) / e,
                            A = N && w[(N - 1) * L + h * e + f % e],
                            w[l++] = (A + u) % 256;
                        break;
                    case 3:
                        for (f = k = 0; k < L; f = k += 1)
                            u = t[n++],
                            h = (f - f % e) / e,
                            d = f < e ? 0 : w[l - e],
                            A = N && w[(N - 1) * L + h * e + f % e],
                            w[l++] = (u + Math.floor((d + A) / 2)) % 256;
                        break;
                    case 4:
                        for (f = F = 0; F < L; f = F += 1)
                            u = t[n++],
                            h = (f - f % e) / e,
                            d = f < e ? 0 : w[l - e],
                            0 === N ? A = x = 0 : (A = w[(N - 1) * L + h * e + f % e],
                            x = h && w[(N - 1) * L + (h - 1) * e + f % e]),
                            g = d + A - x,
                            m = Math.abs(g - d),
                            b = Math.abs(g - A),
                            y = Math.abs(g - x),
                            v = m <= b && m <= y ? d : b <= y ? A : x,
                            w[l++] = (u + v) % 256;
                        break;
                    default:
                        throw new Error("Invalid filter algorithm: " + t[n - 1])
                    }
                    if (!j) {
                        var O = ((o + N * c) * i.width + a) * e
                          , B = N * L;
                        for (f = 0; f < I; f += 1) {
                            for (var M = 0; M < e; M += 1)
                                r[O++] = w[B++];
                            O += (s - 1) * e
                        }
                    }
                    N++
                }
            }
            return t = Pe(t),
            1 == i.interlaceMethod ? (a(0, 0, 8, 8),
            a(4, 0, 8, 8),
            a(0, 4, 4, 8),
            a(2, 0, 4, 4),
            a(0, 2, 2, 4),
            a(1, 0, 2, 2),
            a(0, 1, 1, 2)) : a(0, 0, 1, 1),
            r
        }
        ,
        i.prototype.decodePalette = function() {
            var t, e, r, n, i, a, o, s, c;
            for (r = this.palette,
            a = this.transparency.indexed || [],
            i = new Uint8Array((a.length || 0) + r.length),
            n = 0,
            t = 0,
            e = o = 0,
            s = r.length; o < s; e = o += 3)
                i[n++] = r[e],
                i[n++] = r[e + 1],
                i[n++] = r[e + 2],
                i[n++] = null != (c = a[t++]) ? c : 255;
            return i
        }
        ,
        i.prototype.copyToImageData = function(t, e) {
            var r, n, i, a, o, s, c, u, l, h, f;
            if (n = this.colors,
            l = null,
            r = this.hasAlphaChannel,
            this.palette.length && (l = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(),
            n = 4,
            r = !0),
            u = (i = t.data || t).length,
            o = l || e,
            a = s = 0,
            1 === n)
                for (; a < u; )
                    c = l ? 4 * e[a / 4] : s,
                    h = o[c++],
                    i[a++] = h,
                    i[a++] = h,
                    i[a++] = h,
                    i[a++] = r ? o[c++] : 255,
                    s = c;
            else
                for (; a < u; )
                    c = l ? 4 * e[a / 4] : s,
                    i[a++] = o[c++],
                    i[a++] = o[c++],
                    i[a++] = o[c++],
                    i[a++] = r ? o[c++] : 255,
                    s = c
        }
        ,
        i.prototype.decode = function() {
            var t;
            return t = new Uint8Array(this.width * this.height * 4),
            this.copyToImageData(t, this.decodePixels()),
            t
        }
        ;
        var a = function() {
            if ("[object Window]" === Object.prototype.toString.call(r)) {
                try {
                    e = r.document.createElement("canvas"),
                    n = e.getContext("2d")
                } catch (t) {
                    return !1
                }
                return !0
            }
            return !1
        };
        return a(),
        t = function(t) {
            var r;
            if (!0 === a())
                return n.width = t.width,
                n.height = t.height,
                n.clearRect(0, 0, t.width, t.height),
                n.putImageData(t, 0, 0),
                (r = new Image).src = e.toDataURL(),
                r;
            throw new Error("This method requires a Browser with Canvas-capability.")
        }
        ,
        i.prototype.decodeFrames = function(e) {
            var r, n, i, a, o, s, c, u;
            if (this.animation) {
                for (u = [],
                n = o = 0,
                s = (c = this.animation.frames).length; o < s; n = ++o)
                    r = c[n],
                    i = e.createImageData(r.width, r.height),
                    a = this.decodePixels(new Uint8Array(r.data)),
                    this.copyToImageData(i, a),
                    r.imageData = i,
                    u.push(r.image = t(i));
                return u
            }
        }
        ,
        i.prototype.renderFrame = function(t, e) {
            var r, n, i;
            return r = (n = this.animation.frames)[e],
            i = n[e - 1],
            0 === e && t.clearRect(0, 0, this.width, this.height),
            1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset),
            0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height),
            t.drawImage(r.image, r.xOffset, r.yOffset)
        }
        ,
        i.prototype.animate = function(t) {
            var e, r, n, i, a, o, s = this;
            return r = 0,
            o = this.animation,
            i = o.numFrames,
            n = o.frames,
            a = o.numPlays,
            (e = function() {
                var o, c;
                if (o = r++ % i,
                c = n[o],
                s.renderFrame(t, o),
                i > 1 && r / i < a)
                    return s.animation._timeout = setTimeout(e, c.delay)
            }
            )()
        }
        ,
        i.prototype.stopAnimation = function() {
            var t;
            return clearTimeout(null != (t = this.animation) ? t._timeout : void 0)
        }
        ,
        i.prototype.render = function(t) {
            var e, r;
            return t._png && t._png.stopAnimation(),
            t._png = this,
            t.width = this.width,
            t.height = this.height,
            e = t.getContext("2d"),
            this.animation ? (this.decodeFrames(e),
            this.animate(e)) : (r = e.createImageData(this.width, this.height),
            this.copyToImageData(r, this.decodePixels()),
            e.putImageData(r, 0, 0))
        }
        ,
        i
    }();
    /**
   * @license
   *
   * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   */
    /**
   * @license
   * (c) Dean McNamee <dean@gmail.com>, 2013.
   *
   * https://github.com/deanm/omggif
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to
   * deal in the Software without restriction, including without limitation the
   * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
   * sell copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
   * IN THE SOFTWARE.
   *
   * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
   * including animation and compression.  It does not rely on any specific
   * underlying system, so should run in the browser, Node, or Plask.
   */
    function Be(t) {
        var e = 0;
        if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++])
            throw new Error("Invalid GIF 87a/89a header.");
        var r = t[e++] | t[e++] << 8
          , n = t[e++] | t[e++] << 8
          , i = t[e++]
          , a = i >> 7
          , o = 1 << (7 & i) + 1;
        t[e++];
        t[e++];
        var s = null
          , c = null;
        a && (s = e,
        c = o,
        e += 3 * o);
        var u = !0
          , l = []
          , h = 0
          , f = null
          , d = 0
          , p = null;
        for (this.width = r,
        this.height = n; u && e < t.length; )
            switch (t[e++]) {
            case 33:
                switch (t[e++]) {
                case 255:
                    if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16])
                        e += 14,
                        p = t[e++] | t[e++] << 8,
                        e++;
                    else
                        for (e += 12; ; ) {
                            if (!((P = t[e++]) >= 0))
                                throw Error("Invalid block size");
                            if (0 === P)
                                break;
                            e += P
                        }
                    break;
                case 249:
                    if (4 !== t[e++] || 0 !== t[e + 4])
                        throw new Error("Invalid graphics extension block.");
                    var g = t[e++];
                    h = t[e++] | t[e++] << 8,
                    f = t[e++],
                    0 == (1 & g) && (f = null),
                    d = g >> 2 & 7,
                    e++;
                    break;
                case 254:
                    for (; ; ) {
                        if (!((P = t[e++]) >= 0))
                            throw Error("Invalid block size");
                        if (0 === P)
                            break;
                        e += P
                    }
                    break;
                default:
                    throw new Error("Unknown graphic control label: 0x" + t[e - 1].toString(16))
                }
                break;
            case 44:
                var m = t[e++] | t[e++] << 8
                  , v = t[e++] | t[e++] << 8
                  , b = t[e++] | t[e++] << 8
                  , y = t[e++] | t[e++] << 8
                  , w = t[e++]
                  , N = w >> 6 & 1
                  , L = 1 << (7 & w) + 1
                  , A = s
                  , x = c
                  , S = !1;
                if (w >> 7) {
                    S = !0;
                    A = e,
                    x = L,
                    e += 3 * L
                }
                var _ = e;
                for (e++; ; ) {
                    var P;
                    if (!((P = t[e++]) >= 0))
                        throw Error("Invalid block size");
                    if (0 === P)
                        break;
                    e += P
                }
                l.push({
                    x: m,
                    y: v,
                    width: b,
                    height: y,
                    has_local_palette: S,
                    palette_offset: A,
                    palette_size: x,
                    data_offset: _,
                    data_length: e - _,
                    transparent_index: f,
                    interlaced: !!N,
                    delay: h,
                    disposal: d
                });
                break;
            case 59:
                u = !1;
                break;
            default:
                throw new Error("Unknown gif block: 0x" + t[e - 1].toString(16))
            }
        this.numFrames = function() {
            return l.length
        }
        ,
        this.loopCount = function() {
            return p
        }
        ,
        this.frameInfo = function(t) {
            if (t < 0 || t >= l.length)
                throw new Error("Frame index out of range.");
            return l[t]
        }
        ,
        this.decodeAndBlitFrameBGRA = function(e, n) {
            var i = this.frameInfo(e)
              , a = i.width * i.height
              , o = new Uint8Array(a);
            Me(t, i.data_offset, o, a);
            var s = i.palette_offset
              , c = i.transparent_index;
            null === c && (c = 256);
            var u = i.width
              , l = r - u
              , h = u
              , f = 4 * (i.y * r + i.x)
              , d = 4 * ((i.y + i.height) * r + i.x)
              , p = f
              , g = 4 * l;
            !0 === i.interlaced && (g += 4 * r * 7);
            for (var m = 8, v = 0, b = o.length; v < b; ++v) {
                var y = o[v];
                if (0 === h && (h = u,
                (p += g) >= d && (g = 4 * l + 4 * r * (m - 1),
                p = f + (u + l) * (m << 1),
                m >>= 1)),
                y === c)
                    p += 4;
                else {
                    var w = t[s + 3 * y]
                      , N = t[s + 3 * y + 1]
                      , L = t[s + 3 * y + 2];
                    n[p++] = L,
                    n[p++] = N,
                    n[p++] = w,
                    n[p++] = 255
                }
                --h
            }
        }
        ,
        this.decodeAndBlitFrameRGBA = function(e, n) {
            var i = this.frameInfo(e)
              , a = i.width * i.height
              , o = new Uint8Array(a);
            Me(t, i.data_offset, o, a);
            var s = i.palette_offset
              , c = i.transparent_index;
            null === c && (c = 256);
            var u = i.width
              , l = r - u
              , h = u
              , f = 4 * (i.y * r + i.x)
              , d = 4 * ((i.y + i.height) * r + i.x)
              , p = f
              , g = 4 * l;
            !0 === i.interlaced && (g += 4 * r * 7);
            for (var m = 8, v = 0, b = o.length; v < b; ++v) {
                var y = o[v];
                if (0 === h && (h = u,
                (p += g) >= d && (g = 4 * l + 4 * r * (m - 1),
                p = f + (u + l) * (m << 1),
                m >>= 1)),
                y === c)
                    p += 4;
                else {
                    var w = t[s + 3 * y]
                      , N = t[s + 3 * y + 1]
                      , L = t[s + 3 * y + 2];
                    n[p++] = w,
                    n[p++] = N,
                    n[p++] = L,
                    n[p++] = 255
                }
                --h
            }
        }
    }
    function Me(t, e, r, n) {
        for (var a = t[e++], o = 1 << a, s = o + 1, c = s + 1, u = a + 1, l = (1 << u) - 1, h = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null; ; ) {
            for (; h < 16 && 0 !== p; )
                f |= t[e++] << h,
                h += 8,
                1 === p ? p = t[e++] : --p;
            if (h < u)
                break;
            var v = f & l;
            if (f >>= u,
            h -= u,
            v !== o) {
                if (v === s)
                    break;
                for (var b = v < c ? v : m, y = 0, w = b; w > o; )
                    w = g[w] >> 8,
                    ++y;
                var N = w;
                if (d + y + (b !== v ? 1 : 0) > n)
                    return void i.log("Warning, gif stream longer than expected.");
                r[d++] = N;
                var L = d += y;
                for (b !== v && (r[d++] = N),
                w = b; y--; )
                    w = g[w],
                    r[--L] = 255 & w,
                    w >>= 8;
                null !== m && c < 4096 && (g[c++] = m << 8 | N,
                c >= l + 1 && u < 12 && (++u,
                l = l << 1 | 1)),
                m = v
            } else
                c = s + 1,
                l = (1 << (u = a + 1)) - 1,
                m = null
        }
        return d !== n && i.log("Warning, gif stream shorter than expected."),
        r
    }
    /**
   * @license
    Copyright (c) 2008, Adobe Systems Incorporated
    All rights reserved.

    Redistribution and use in source and binary forms, with or without 
    modification, are permitted provided that the following conditions are
    met:

    * Redistributions of source code must retain the above copyright notice, 
      this list of conditions and the following disclaimer.
    
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the 
      documentation and/or other materials provided with the distribution.
    
    * Neither the name of Adobe Systems Incorporated nor the names of its 
      contributors may be used to endorse or promote products derived from 
      this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
    IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
    THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
    function Ee(t) {
        var e, r, n, i, a, o = Math.floor, s = new Array(64), c = new Array(64), u = new Array(64), l = new Array(64), h = new Array(65535), f = new Array(65535), d = new Array(64), p = new Array(64), g = [], m = 0, v = 7, b = new Array(64), y = new Array(64), w = new Array(64), N = new Array(256), L = new Array(2048), A = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63], x = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0], S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], _ = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125], P = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250], k = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0], F = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], I = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119], C = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
        function j(t, e) {
            for (var r = 0, n = 0, i = new Array, a = 1; a <= 16; a++) {
                for (var o = 1; o <= t[a]; o++)
                    i[e[n]] = [],
                    i[e[n]][0] = r,
                    i[e[n]][1] = a,
                    n++,
                    r++;
                r *= 2
            }
            return i
        }
        function O(t) {
            for (var e = t[0], r = t[1] - 1; r >= 0; )
                e & 1 << r && (m |= 1 << v),
                r--,
                --v < 0 && (255 == m ? (B(255),
                B(0)) : B(m),
                v = 7,
                m = 0)
        }
        function B(t) {
            g.push(t)
        }
        function M(t) {
            B(t >> 8 & 255),
            B(255 & t)
        }
        function E(t, e, r, n, i) {
            for (var a, o = i[0], s = i[240], c = function(t, e) {
                var r, n, i, a, o, s, c, u, l, h, f = 0;
                for (l = 0; l < 8; ++l) {
                    r = t[f],
                    n = t[f + 1],
                    i = t[f + 2],
                    a = t[f + 3],
                    o = t[f + 4],
                    s = t[f + 5],
                    c = t[f + 6];
                    var p = r + (u = t[f + 7])
                      , g = r - u
                      , m = n + c
                      , v = n - c
                      , b = i + s
                      , y = i - s
                      , w = a + o
                      , N = a - o
                      , L = p + w
                      , A = p - w
                      , x = m + b
                      , S = m - b;
                    t[f] = L + x,
                    t[f + 4] = L - x;
                    var _ = .707106781 * (S + A);
                    t[f + 2] = A + _,
                    t[f + 6] = A - _;
                    var P = .382683433 * ((L = N + y) - (S = v + g))
                      , k = .5411961 * L + P
                      , F = 1.306562965 * S + P
                      , I = .707106781 * (x = y + v)
                      , C = g + I
                      , j = g - I;
                    t[f + 5] = j + k,
                    t[f + 3] = j - k,
                    t[f + 1] = C + F,
                    t[f + 7] = C - F,
                    f += 8
                }
                for (f = 0,
                l = 0; l < 8; ++l) {
                    r = t[f],
                    n = t[f + 8],
                    i = t[f + 16],
                    a = t[f + 24],
                    o = t[f + 32],
                    s = t[f + 40],
                    c = t[f + 48];
                    var O = r + (u = t[f + 56])
                      , B = r - u
                      , M = n + c
                      , E = n - c
                      , q = i + s
                      , D = i - s
                      , R = a + o
                      , T = a - o
                      , U = O + R
                      , z = O - R
                      , H = M + q
                      , W = M - q;
                    t[f] = U + H,
                    t[f + 32] = U - H;
                    var V = .707106781 * (W + z);
                    t[f + 16] = z + V,
                    t[f + 48] = z - V;
                    var G = .382683433 * ((U = T + D) - (W = E + B))
                      , Y = .5411961 * U + G
                      , J = 1.306562965 * W + G
                      , X = .707106781 * (H = D + E)
                      , K = B + X
                      , Z = B - X;
                    t[f + 40] = Z + Y,
                    t[f + 24] = Z - Y,
                    t[f + 8] = K + J,
                    t[f + 56] = K - J,
                    f++
                }
                for (l = 0; l < 64; ++l)
                    h = t[l] * e[l],
                    d[l] = h > 0 ? h + .5 | 0 : h - .5 | 0;
                return d
            }(t, e), u = 0; u < 64; ++u)
                p[A[u]] = c[u];
            var l = p[0] - r;
            r = p[0],
            0 == l ? O(n[0]) : (O(n[f[a = 32767 + l]]),
            O(h[a]));
            for (var g = 63; g > 0 && 0 == p[g]; )
                g--;
            if (0 == g)
                return O(o),
                r;
            for (var m, v = 1; v <= g; ) {
                for (var b = v; 0 == p[v] && v <= g; )
                    ++v;
                var y = v - b;
                if (y >= 16) {
                    m = y >> 4;
                    for (var w = 1; w <= m; ++w)
                        O(s);
                    y &= 15
                }
                a = 32767 + p[v],
                O(i[(y << 4) + f[a]]),
                O(h[a]),
                v++
            }
            return 63 != g && O(o),
            r
        }
        function q(t) {
            (t = Math.min(Math.max(t, 1), 100),
            a != t) && (!function(t) {
                for (var e = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], r = 0; r < 64; r++) {
                    var n = o((e[r] * t + 50) / 100);
                    n = Math.min(Math.max(n, 1), 255),
                    s[A[r]] = n
                }
                for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], a = 0; a < 64; a++) {
                    var h = o((i[a] * t + 50) / 100);
                    h = Math.min(Math.max(h, 1), 255),
                    c[A[a]] = h
                }
                for (var f = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], d = 0, p = 0; p < 8; p++)
                    for (var g = 0; g < 8; g++)
                        u[d] = 1 / (s[A[d]] * f[p] * f[g] * 8),
                        l[d] = 1 / (c[A[d]] * f[p] * f[g] * 8),
                        d++
            }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)),
            a = t)
        }
        this.encode = function(t, a) {
            a && q(a),
            g = new Array,
            m = 0,
            v = 7,
            M(65496),
            M(65504),
            M(16),
            B(74),
            B(70),
            B(73),
            B(70),
            B(0),
            B(1),
            B(1),
            B(0),
            M(1),
            M(1),
            B(0),
            B(0),
            function() {
                M(65499),
                M(132),
                B(0);
                for (var t = 0; t < 64; t++)
                    B(s[t]);
                B(1);
                for (var e = 0; e < 64; e++)
                    B(c[e])
            }(),
            function(t, e) {
                M(65472),
                M(17),
                B(8),
                M(e),
                M(t),
                B(3),
                B(1),
                B(17),
                B(0),
                B(2),
                B(17),
                B(1),
                B(3),
                B(17),
                B(1)
            }(t.width, t.height),
            function() {
                M(65476),
                M(418),
                B(0);
                for (var t = 0; t < 16; t++)
                    B(x[t + 1]);
                for (var e = 0; e <= 11; e++)
                    B(S[e]);
                B(16);
                for (var r = 0; r < 16; r++)
                    B(_[r + 1]);
                for (var n = 0; n <= 161; n++)
                    B(P[n]);
                B(1);
                for (var i = 0; i < 16; i++)
                    B(k[i + 1]);
                for (var a = 0; a <= 11; a++)
                    B(F[a]);
                B(17);
                for (var o = 0; o < 16; o++)
                    B(I[o + 1]);
                for (var s = 0; s <= 161; s++)
                    B(C[s])
            }(),
            M(65498),
            M(12),
            B(3),
            B(1),
            B(0),
            B(2),
            B(17),
            B(3),
            B(17),
            B(0),
            B(63),
            B(0);
            var o = 0
              , h = 0
              , f = 0;
            m = 0,
            v = 7,
            this.encode.displayName = "_encode_";
            for (var d, p, N, A, j, D, R, T, U, z = t.data, H = t.width, W = t.height, V = 4 * H, G = 0; G < W; ) {
                for (d = 0; d < V; ) {
                    for (j = V * G + d,
                    R = -1,
                    T = 0,
                    U = 0; U < 64; U++)
                        D = j + (T = U >> 3) * V + (R = 4 * (7 & U)),
                        G + T >= W && (D -= V * (G + 1 + T - W)),
                        d + R >= V && (D -= d + R - V + 4),
                        p = z[D++],
                        N = z[D++],
                        A = z[D++],
                        b[U] = (L[p] + L[N + 256 >> 0] + L[A + 512 >> 0] >> 16) - 128,
                        y[U] = (L[p + 768 >> 0] + L[N + 1024 >> 0] + L[A + 1280 >> 0] >> 16) - 128,
                        w[U] = (L[p + 1280 >> 0] + L[N + 1536 >> 0] + L[A + 1792 >> 0] >> 16) - 128;
                    o = E(b, u, o, e, n),
                    h = E(y, l, h, r, i),
                    f = E(w, l, f, r, i),
                    d += 32
                }
                G += 8
            }
            if (v >= 0) {
                var Y = [];
                Y[1] = v + 1,
                Y[0] = (1 << v + 1) - 1,
                O(Y)
            }
            return M(65497),
            new Uint8Array(g)
        }
        ,
        t = t || 50,
        function() {
            for (var t = String.fromCharCode, e = 0; e < 256; e++)
                N[e] = t(e)
        }(),
        e = j(x, S),
        r = j(k, F),
        n = j(_, P),
        i = j(I, C),
        function() {
            for (var t = 1, e = 2, r = 1; r <= 15; r++) {
                for (var n = t; n < e; n++)
                    f[32767 + n] = r,
                    h[32767 + n] = [],
                    h[32767 + n][1] = r,
                    h[32767 + n][0] = n;
                for (var i = -(e - 1); i <= -t; i++)
                    f[32767 + i] = r,
                    h[32767 + i] = [],
                    h[32767 + i][1] = r,
                    h[32767 + i][0] = e - 1 + i;
                t <<= 1,
                e <<= 1
            }
        }(),
        function() {
            for (var t = 0; t < 256; t++)
                L[t] = 19595 * t,
                L[t + 256 >> 0] = 38470 * t,
                L[t + 512 >> 0] = 7471 * t + 32768,
                L[t + 768 >> 0] = -11059 * t,
                L[t + 1024 >> 0] = -21709 * t,
                L[t + 1280 >> 0] = 32768 * t + 8421375,
                L[t + 1536 >> 0] = -27439 * t,
                L[t + 1792 >> 0] = -5329 * t
        }(),
        q(t)
    }
    /**
   * @license
   * Copyright (c) 2017 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function qe(t, e) {
        if (this.pos = 0,
        this.buffer = t,
        this.datav = new DataView(t.buffer),
        this.is_with_alpha = !!e,
        this.bottom_up = !0,
        this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]),
        this.pos += 2,
        -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag))
            throw new Error("Invalid BMP File");
        this.parseHeader(),
        this.parseBGR()
    }
    function De(t) {
        function e(t) {
            if (!t)
                throw Error("assert :P")
        }
        function r(t, e, r) {
            for (var n = 0; 4 > n; n++)
                if (t[e + n] != r.charCodeAt(n))
                    return !0;
            return !1
        }
        function n(t, e, r, n, i) {
            for (var a = 0; a < i; a++)
                t[e + a] = r[n + a]
        }
        function i(t, e, r, n) {
            for (var i = 0; i < n; i++)
                t[e + i] = r
        }
        function a(t) {
            return new Int32Array(t)
        }
        function o(t, e) {
            for (var r = [], n = 0; n < t; n++)
                r.push(new e);
            return r
        }
        function s(t, e) {
            var r = [];
            return function t(r, n, i) {
                for (var a = i[n], o = 0; o < a && (r.push(i.length > n + 1 ? [] : new e),
                !(i.length < n + 1)); o++)
                    t(r[o], n + 1, i)
            }(r, 0, t),
            r
        }
        var c = function() {
            var t = this;
            function c(t, e) {
                for (var r = 1 << e - 1 >>> 0; t & r; )
                    r >>>= 1;
                return r ? (t & r - 1) + r : t
            }
            function u(t, r, n, i, a) {
                e(!(i % n));
                do {
                    t[r + (i -= n)] = a
                } while (0 < i)
            }
            function l(t, r, n, i, o) {
                if (e(2328 >= o),
                512 >= o)
                    var s = a(512);
                else if (null == (s = a(o)))
                    return 0;
                return function(t, r, n, i, o, s) {
                    var l, f, d = r, p = 1 << n, g = a(16), m = a(16);
                    for (e(0 != o),
                    e(null != i),
                    e(null != t),
                    e(0 < n),
                    f = 0; f < o; ++f) {
                        if (15 < i[f])
                            return 0;
                        ++g[i[f]]
                    }
                    if (g[0] == o)
                        return 0;
                    for (m[1] = 0,
                    l = 1; 15 > l; ++l) {
                        if (g[l] > 1 << l)
                            return 0;
                        m[l + 1] = m[l] + g[l]
                    }
                    for (f = 0; f < o; ++f)
                        l = i[f],
                        0 < i[f] && (s[m[l]++] = f);
                    if (1 == m[15])
                        return (i = new h).g = 0,
                        i.value = s[0],
                        u(t, d, 1, p, i),
                        p;
                    var v, b = -1, y = p - 1, w = 0, N = 1, L = 1, A = 1 << n;
                    for (f = 0,
                    l = 1,
                    o = 2; l <= n; ++l,
                    o <<= 1) {
                        if (N += L <<= 1,
                        0 > (L -= g[l]))
                            return 0;
                        for (; 0 < g[l]; --g[l])
                            (i = new h).g = l,
                            i.value = s[f++],
                            u(t, d + w, o, A, i),
                            w = c(w, l)
                    }
                    for (l = n + 1,
                    o = 2; 15 >= l; ++l,
                    o <<= 1) {
                        if (N += L <<= 1,
                        0 > (L -= g[l]))
                            return 0;
                        for (; 0 < g[l]; --g[l]) {
                            if (i = new h,
                            (w & y) != b) {
                                for (d += A,
                                v = 1 << (b = l) - n; 15 > b && !(0 >= (v -= g[b])); )
                                    ++b,
                                    v <<= 1;
                                p += A = 1 << (v = b - n),
                                t[r + (b = w & y)].g = v + n,
                                t[r + b].value = d - r - b
                            }
                            i.g = l - n,
                            i.value = s[f++],
                            u(t, d + (w >> n), o, A, i),
                            w = c(w, l)
                        }
                    }
                    return N != 2 * m[15] - 1 ? 0 : p
                }(t, r, n, i, o, s)
            }
            function h() {
                this.value = this.g = 0
            }
            function f() {
                this.value = this.g = 0
            }
            function d() {
                this.G = o(5, h),
                this.H = a(5),
                this.jc = this.Qb = this.qb = this.nd = 0,
                this.pd = o(Dr, f)
            }
            function p(t, r, n, i) {
                e(null != t),
                e(null != r),
                e(2147483648 > i),
                t.Ca = 254,
                t.I = 0,
                t.b = -8,
                t.Ka = 0,
                t.oa = r,
                t.pa = n,
                t.Jd = r,
                t.Yc = n + i,
                t.Zc = 4 <= i ? n + i - 4 + 1 : n,
                _(t)
            }
            function g(t, e) {
                for (var r = 0; 0 < e--; )
                    r |= k(t, 128) << e;
                return r
            }
            function m(t, e) {
                var r = g(t, e);
                return P(t) ? -r : r
            }
            function v(t, r, n, i) {
                var a, o = 0;
                for (e(null != t),
                e(null != r),
                e(4294967288 > i),
                t.Sb = i,
                t.Ra = 0,
                t.u = 0,
                t.h = 0,
                4 < i && (i = 4),
                a = 0; a < i; ++a)
                    o += r[n + a] << 8 * a;
                t.Ra = o,
                t.bb = i,
                t.oa = r,
                t.pa = n
            }
            function b(t) {
                for (; 8 <= t.u && t.bb < t.Sb; )
                    t.Ra >>>= 8,
                    t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0,
                    ++t.bb,
                    t.u -= 8;
                A(t) && (t.h = 1,
                t.u = 0)
            }
            function y(t, r) {
                if (e(0 <= r),
                !t.h && r <= Tr) {
                    var n = L(t) & Rr[r];
                    return t.u += r,
                    b(t),
                    n
                }
                return t.h = 1,
                t.u = 0
            }
            function w() {
                this.b = this.Ca = this.I = 0,
                this.oa = [],
                this.pa = 0,
                this.Jd = [],
                this.Yc = 0,
                this.Zc = [],
                this.Ka = 0
            }
            function N() {
                this.Ra = 0,
                this.oa = [],
                this.h = this.u = this.bb = this.Sb = this.pa = 0
            }
            function L(t) {
                return t.Ra >>> (t.u & Ur - 1) >>> 0
            }
            function A(t) {
                return e(t.bb <= t.Sb),
                t.h || t.bb == t.Sb && t.u > Ur
            }
            function x(t, e) {
                t.u = e,
                t.h = A(t)
            }
            function S(t) {
                t.u >= zr && (e(t.u >= zr),
                b(t))
            }
            function _(t) {
                e(null != t && null != t.oa),
                t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0,
                t.b += 8) : (e(null != t && null != t.oa),
                t.pa < t.Yc ? (t.b += 8,
                t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8,
                t.b += 8,
                t.Ka = 1))
            }
            function P(t) {
                return g(t, 1)
            }
            function k(t, e) {
                var r = t.Ca;
                0 > t.b && _(t);
                var n = t.b
                  , i = r * e >>> 8
                  , a = (t.I >>> n > i) + 0;
                for (a ? (r -= i,
                t.I -= i + 1 << n >>> 0) : r = i + 1,
                n = r,
                i = 0; 256 <= n; )
                    i += 8,
                    n >>= 8;
                return n = 7 ^ i + Hr[n],
                t.b -= n,
                t.Ca = (r << n) - 1,
                a
            }
            function F(t, e, r) {
                t[e + 0] = r >> 24 & 255,
                t[e + 1] = r >> 16 & 255,
                t[e + 2] = r >> 8 & 255,
                t[e + 3] = r >> 0 & 255
            }
            function I(t, e) {
                return t[e + 0] << 0 | t[e + 1] << 8
            }
            function C(t, e) {
                return I(t, e) | t[e + 2] << 16
            }
            function j(t, e) {
                return I(t, e) | I(t, e + 2) << 16
            }
            function O(t, r) {
                var n = 1 << r;
                return e(null != t),
                e(0 < r),
                t.X = a(n),
                null == t.X ? 0 : (t.Mb = 32 - r,
                t.Xa = r,
                1)
            }
            function B(t, r) {
                e(null != t),
                e(null != r),
                e(t.Xa == r.Xa),
                n(r.X, 0, t.X, 0, 1 << r.Xa)
            }
            function M() {
                this.X = [],
                this.Xa = this.Mb = 0
            }
            function E(t, r, n, i) {
                e(null != n),
                e(null != i);
                var a = n[0]
                  , o = i[0];
                return 0 == a && (a = (t * o + r / 2) / r),
                0 == o && (o = (r * a + t / 2) / t),
                0 >= a || 0 >= o ? 0 : (n[0] = a,
                i[0] = o,
                1)
            }
            function q(t, e) {
                return t + (1 << e) - 1 >>> e
            }
            function D(t, e) {
                return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0
            }
            function R(e, r) {
                t[r] = function(r, n, i, a, o, s, c) {
                    var u;
                    for (u = 0; u < o; ++u) {
                        var l = t[e](s[c + u - 1], i, a + u);
                        s[c + u] = D(r[n + u], l)
                    }
                }
            }
            function T() {
                this.ud = this.hd = this.jd = 0
            }
            function U(t, e) {
                return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0
            }
            function z(t) {
                return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0
            }
            function H(t, e) {
                return z(t + (t - e + .5 >> 1))
            }
            function W(t, e, r) {
                return Math.abs(e - r) - Math.abs(t - r)
            }
            function V(t, e, r, n, i, a, o) {
                for (n = a[o - 1],
                r = 0; r < i; ++r)
                    a[o + r] = n = D(t[e + r], n)
            }
            function G(t, e, r, n, i) {
                var a;
                for (a = 0; a < r; ++a) {
                    var o = t[e + a]
                      , s = o >> 8 & 255
                      , c = 16711935 & (c = (c = 16711935 & o) + ((s << 16) + s));
                    n[i + a] = (4278255360 & o) + c >>> 0
                }
            }
            function Y(t, e) {
                e.jd = t >> 0 & 255,
                e.hd = t >> 8 & 255,
                e.ud = t >> 16 & 255
            }
            function J(t, e, r, n, i, a) {
                var o;
                for (o = 0; o < n; ++o) {
                    var s = e[r + o]
                      , c = s >>> 8
                      , u = s
                      , l = 255 & (l = (l = s >>> 16) + ((t.jd << 24 >> 24) * (c << 24 >> 24) >>> 5));
                    u = 255 & (u = (u = u + ((t.hd << 24 >> 24) * (c << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (l << 24 >> 24) >>> 5));
                    i[a + o] = (4278255360 & s) + (l << 16) + u
                }
            }
            function X(e, r, n, i, a) {
                t[r] = function(t, e, r, n, o, s, c, u, l) {
                    for (n = c; n < u; ++n)
                        for (c = 0; c < l; ++c)
                            o[s++] = a(r[i(t[e++])])
                }
                ,
                t[e] = function(e, r, o, s, c, u, l) {
                    var h = 8 >> e.b
                      , f = e.Ea
                      , d = e.K[0]
                      , p = e.w;
                    if (8 > h)
                        for (e = (1 << e.b) - 1,
                        p = (1 << h) - 1; r < o; ++r) {
                            var g, m = 0;
                            for (g = 0; g < f; ++g)
                                g & e || (m = i(s[c++])),
                                u[l++] = a(d[m & p]),
                                m >>= h
                        }
                    else
                        t["VP8LMapColor" + n](s, c, d, p, u, l, r, o, f)
                }
            }
            function K(t, e, r, n, i) {
                for (r = e + r; e < r; ) {
                    var a = t[e++];
                    n[i++] = a >> 16 & 255,
                    n[i++] = a >> 8 & 255,
                    n[i++] = a >> 0 & 255
                }
            }
            function Z(t, e, r, n, i) {
                for (r = e + r; e < r; ) {
                    var a = t[e++];
                    n[i++] = a >> 16 & 255,
                    n[i++] = a >> 8 & 255,
                    n[i++] = a >> 0 & 255,
                    n[i++] = a >> 24 & 255
                }
            }
            function $(t, e, r, n, i) {
                for (r = e + r; e < r; ) {
                    var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15
                      , o = o >> 0 & 240 | o >> 28 & 15;
                    n[i++] = a,
                    n[i++] = o
                }
            }
            function Q(t, e, r, n, i) {
                for (r = e + r; e < r; ) {
                    var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7
                      , o = o >> 5 & 224 | o >> 3 & 31;
                    n[i++] = a,
                    n[i++] = o
                }
            }
            function tt(t, e, r, n, i) {
                for (r = e + r; e < r; ) {
                    var a = t[e++];
                    n[i++] = a >> 0 & 255,
                    n[i++] = a >> 8 & 255,
                    n[i++] = a >> 16 & 255
                }
            }
            function et(t, e, r, i, a, o) {
                if (0 == o)
                    for (r = e + r; e < r; )
                        F(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0),
                        a += 32;
                else
                    n(i, a, t, e, r)
            }
            function rt(e, r) {
                t[r][0] = t[e + "0"],
                t[r][1] = t[e + "1"],
                t[r][2] = t[e + "2"],
                t[r][3] = t[e + "3"],
                t[r][4] = t[e + "4"],
                t[r][5] = t[e + "5"],
                t[r][6] = t[e + "6"],
                t[r][7] = t[e + "7"],
                t[r][8] = t[e + "8"],
                t[r][9] = t[e + "9"],
                t[r][10] = t[e + "10"],
                t[r][11] = t[e + "11"],
                t[r][12] = t[e + "12"],
                t[r][13] = t[e + "13"],
                t[r][14] = t[e + "0"],
                t[r][15] = t[e + "0"]
            }
            function nt(t) {
                return t == Hn || t == Wn || t == Vn || t == Gn
            }
            function it() {
                this.eb = [],
                this.size = this.A = this.fb = 0
            }
            function at() {
                this.y = [],
                this.f = [],
                this.ea = [],
                this.F = [],
                this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0
            }
            function ot() {
                this.Rd = this.height = this.width = this.S = 0,
                this.f = {},
                this.f.RGBA = new it,
                this.f.kb = new at,
                this.sd = null
            }
            function st() {
                this.width = [0],
                this.height = [0],
                this.Pd = [0],
                this.Qd = [0],
                this.format = [0]
            }
            function ct() {
                this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0
            }
            function ut(t) {
                return alert("todo:WebPSamplerProcessPlane"),
                t.T
            }
            function lt(t, e) {
                var r = t.T
                  , i = e.ba.f.RGBA
                  , a = i.eb
                  , o = i.fb + t.ka * i.A
                  , s = vi[e.ba.S]
                  , c = t.y
                  , u = t.O
                  , l = t.f
                  , h = t.N
                  , f = t.ea
                  , d = t.W
                  , p = e.cc
                  , g = e.dc
                  , m = e.Mc
                  , v = e.Nc
                  , b = t.ka
                  , y = t.ka + t.T
                  , w = t.U
                  , N = w + 1 >> 1;
                for (0 == b ? s(c, u, null, null, l, h, f, d, l, h, f, d, a, o, null, null, w) : (s(e.ec, e.fc, c, u, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w),
                ++r); b + 2 < y; b += 2)
                    p = l,
                    g = h,
                    m = f,
                    v = d,
                    h += t.Rc,
                    d += t.Rc,
                    o += 2 * i.A,
                    s(c, (u += 2 * t.fa) - t.fa, c, u, p, g, m, v, l, h, f, d, a, o - i.A, a, o, w);
                return u += t.fa,
                t.j + y < t.o ? (n(e.ec, e.fc, c, u, w),
                n(e.cc, e.dc, l, h, N),
                n(e.Mc, e.Nc, f, d, N),
                r--) : 1 & y || s(c, u, null, null, l, h, f, d, l, h, f, d, a, o + i.A, null, null, w),
                r
            }
            function ht(t, r, n) {
                var i = t.F
                  , a = [t.J];
                if (null != i) {
                    var o = t.U
                      , s = r.ba.S
                      , c = s == Tn || s == Vn;
                    r = r.ba.f.RGBA;
                    var u = [0]
                      , l = t.ka;
                    u[0] = t.T,
                    t.Kb && (0 == l ? --u[0] : (--l,
                    a[0] -= t.width),
                    t.j + t.ka + t.T == t.o && (u[0] = t.o - t.j - l));
                    var h = r.eb;
                    l = r.fb + l * r.A;
                    t = Sn(i, a[0], t.width, o, u, h, l + (c ? 0 : 3), r.A),
                    e(n == u),
                    t && nt(s) && An(h, l, c, o, u, r.A)
                }
                return 0
            }
            function ft(t) {
                var e = t.ma
                  , r = e.ba.S
                  , n = 11 > r
                  , i = r == qn || r == Rn || r == Tn || r == Un || 12 == r || nt(r);
                if (e.memory = null,
                e.Ib = null,
                e.Jb = null,
                e.Nd = null,
                !Mr(e.Oa, t, i ? 11 : 12))
                    return 0;
                if (i && nt(r) && br(),
                t.da)
                    alert("todo:use_scaling");
                else {
                    if (n) {
                        if (e.Ib = ut,
                        t.Kb) {
                            if (r = t.U + 1 >> 1,
                            e.memory = a(t.U + 2 * r),
                            null == e.memory)
                                return 0;
                            e.ec = e.memory,
                            e.fc = 0,
                            e.cc = e.ec,
                            e.dc = e.fc + t.U,
                            e.Mc = e.cc,
                            e.Nc = e.dc + r,
                            e.Ib = lt,
                            br()
                        }
                    } else
                        alert("todo:EmitYUV");
                    i && (e.Jb = ht,
                    n && mr())
                }
                if (n && !Ci) {
                    for (t = 0; 256 > t; ++t)
                        ji[t] = 89858 * (t - 128) + _i >> Si,
                        Mi[t] = -22014 * (t - 128) + _i,
                        Bi[t] = -45773 * (t - 128),
                        Oi[t] = 113618 * (t - 128) + _i >> Si;
                    for (t = Pi; t < ki; ++t)
                        e = 76283 * (t - 16) + _i >> Si,
                        Ei[t - Pi] = Vt(e, 255),
                        qi[t - Pi] = Vt(e + 8 >> 4, 15);
                    Ci = 1
                }
                return 1
            }
            function dt(t) {
                var r = t.ma
                  , n = t.U
                  , i = t.T;
                return e(!(1 & t.ka)),
                0 >= n || 0 >= i ? 0 : (n = r.Ib(t, r),
                null != r.Jb && r.Jb(t, r, n),
                r.Dc += n,
                1)
            }
            function pt(t) {
                t.ma.memory = null
            }
            function gt(t, e, r, n) {
                return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1,
                r[0] = y(t, 14) + 1,
                n[0] = y(t, 1),
                0 != y(t, 3) ? 0 : !t.h)
            }
            function mt(t, e) {
                if (4 > t)
                    return t + 1;
                var r = t - 2 >> 1;
                return (2 + (1 & t) << r) + y(e, r) + 1
            }
            function vt(t, e) {
                return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
                var r
            }
            function bt(t, e, r) {
                var n = L(r)
                  , i = t[e += 255 & n].g - 8;
                return 0 < i && (x(r, r.u + 8),
                n = L(r),
                e += t[e].value,
                e += n & (1 << i) - 1),
                x(r, r.u + t[e].g),
                t[e].value
            }
            function yt(t, r, n) {
                return n.g += t.g,
                n.value += t.value << r >>> 0,
                e(8 >= n.g),
                t.g
            }
            function wt(t, r, n) {
                var i = t.xc;
                return e((r = 0 == i ? 0 : t.vc[t.md * (n >> i) + (r >> i)]) < t.Wb),
                t.Ya[r]
            }
            function Nt(t, r, i, a) {
                var o = t.ab
                  , s = t.c * r
                  , c = t.C;
                r = c + r;
                var u = i
                  , l = a;
                for (a = t.Ta,
                i = t.Ua; 0 < o--; ) {
                    var h = t.gc[o]
                      , f = c
                      , d = r
                      , p = u
                      , g = l
                      , m = (l = a,
                    u = i,
                    h.Ea);
                    switch (e(f < d),
                    e(d <= h.nc),
                    h.hc) {
                    case 2:
                        Gr(p, g, (d - f) * m, l, u);
                        break;
                    case 0:
                        var v = f
                          , b = d
                          , y = l
                          , w = u
                          , N = (_ = h).Ea;
                        0 == v && (Wr(p, g, null, null, 1, y, w),
                        V(p, g + 1, 0, 0, N - 1, y, w + 1),
                        g += N,
                        w += N,
                        ++v);
                        for (var L = 1 << _.b, A = L - 1, x = q(N, _.b), S = _.K, _ = _.w + (v >> _.b) * x; v < b; ) {
                            var P = S
                              , k = _
                              , F = 1;
                            for (Vr(p, g, y, w - N, 1, y, w); F < N; ) {
                                var I = (F & ~A) + L;
                                I > N && (I = N),
                                (0,
                                Zr[P[k++] >> 8 & 15])(p, g + +F, y, w + F - N, I - F, y, w + F),
                                F = I
                            }
                            g += N,
                            w += N,
                            ++v & A || (_ += x)
                        }
                        d != h.nc && n(l, u - m, l, u + (d - f - 1) * m, m);
                        break;
                    case 1:
                        for (m = p,
                        b = g,
                        N = (p = h.Ea) - (w = p & ~(y = (g = 1 << h.b) - 1)),
                        v = q(p, h.b),
                        L = h.K,
                        h = h.w + (f >> h.b) * v; f < d; ) {
                            for (A = L,
                            x = h,
                            S = new T,
                            _ = b + w,
                            P = b + p; b < _; )
                                Y(A[x++], S),
                                $r(S, m, b, g, l, u),
                                b += g,
                                u += g;
                            b < P && (Y(A[x++], S),
                            $r(S, m, b, N, l, u),
                            b += N,
                            u += N),
                            ++f & y || (h += v)
                        }
                        break;
                    case 3:
                        if (p == l && g == u && 0 < h.b) {
                            for (b = l,
                            p = m = u + (d - f) * m - (w = (d - f) * q(h.Ea, h.b)),
                            g = l,
                            y = u,
                            v = [],
                            w = (N = w) - 1; 0 <= w; --w)
                                v[w] = g[y + w];
                            for (w = N - 1; 0 <= w; --w)
                                b[p + w] = v[w];
                            Yr(h, f, d, l, m, l, u)
                        } else
                            Yr(h, f, d, p, g, l, u)
                    }
                    u = a,
                    l = i
                }
                l != i && n(a, i, u, l, s)
            }
            function Lt(t, r) {
                var n = t.V
                  , i = t.Ba + t.c * t.C
                  , a = r - t.C;
                if (e(r <= t.l.o),
                e(16 >= a),
                0 < a) {
                    var o = t.l
                      , s = t.Ta
                      , c = t.Ua
                      , u = o.width;
                    if (Nt(t, a, n, i),
                    a = c = [c],
                    e((n = t.C) < (i = r)),
                    e(o.v < o.va),
                    i > o.o && (i = o.o),
                    n < o.j) {
                        var l = o.j - n;
                        n = o.j;
                        a[0] += l * u
                    }
                    if (n >= i ? n = 0 : (a[0] += 4 * o.v,
                    o.ka = n - o.j,
                    o.U = o.va - o.v,
                    o.T = i - n,
                    n = 1),
                    n) {
                        if (c = c[0],
                        11 > (n = t.ca).S) {
                            var h = n.f.RGBA
                              , f = (i = n.S,
                            a = o.U,
                            o = o.T,
                            l = h.eb,
                            h.A)
                              , d = o;
                            for (h = h.fb + t.Ma * h.A; 0 < d--; ) {
                                var p = s
                                  , g = c
                                  , m = a
                                  , v = l
                                  , b = h;
                                switch (i) {
                                case En:
                                    Qr(p, g, m, v, b);
                                    break;
                                case qn:
                                    tn(p, g, m, v, b);
                                    break;
                                case Hn:
                                    tn(p, g, m, v, b),
                                    An(v, b, 0, m, 1, 0);
                                    break;
                                case Dn:
                                    nn(p, g, m, v, b);
                                    break;
                                case Rn:
                                    et(p, g, m, v, b, 1);
                                    break;
                                case Wn:
                                    et(p, g, m, v, b, 1),
                                    An(v, b, 0, m, 1, 0);
                                    break;
                                case Tn:
                                    et(p, g, m, v, b, 0);
                                    break;
                                case Vn:
                                    et(p, g, m, v, b, 0),
                                    An(v, b, 1, m, 1, 0);
                                    break;
                                case Un:
                                    en(p, g, m, v, b);
                                    break;
                                case Gn:
                                    en(p, g, m, v, b),
                                    xn(v, b, m, 1, 0);
                                    break;
                                case zn:
                                    rn(p, g, m, v, b);
                                    break;
                                default:
                                    e(0)
                                }
                                c += u,
                                h += f
                            }
                            t.Ma += o
                        } else
                            alert("todo:EmitRescaledRowsYUVA");
                        e(t.Ma <= n.height)
                    }
                }
                t.C = r,
                e(t.C <= t.i)
            }
            function At(t) {
                var e;
                if (0 < t.ua)
                    return 0;
                for (e = 0; e < t.Wb; ++e) {
                    var r = t.Ya[e].G
                      , n = t.Ya[e].H;
                    if (0 < r[1][n[1] + 0].g || 0 < r[2][n[2] + 0].g || 0 < r[3][n[3] + 0].g)
                        return 0
                }
                return 1
            }
            function xt(t, r, n, i, a, o) {
                if (0 != t.Z) {
                    var s = t.qd
                      , c = t.rd;
                    for (e(null != mi[t.Z]); r < n; ++r)
                        mi[t.Z](s, c, i, a, i, a, o),
                        s = i,
                        c = a,
                        a += o;
                    t.qd = s,
                    t.rd = c
                }
            }
            function St(t, r) {
                var n = t.l.ma
                  , i = 0 == n.Z || 1 == n.Z ? t.l.j : t.C;
                i = t.C < i ? i : t.C;
                if (e(r <= t.l.o),
                r > i) {
                    var a = t.l.width
                      , o = n.ca
                      , s = n.tb + a * i
                      , c = t.V
                      , u = t.Ba + t.c * i
                      , l = t.gc;
                    e(1 == t.ab),
                    e(3 == l[0].hc),
                    Xr(l[0], i, r, c, u, o, s),
                    xt(n, i, r, o, s, a)
                }
                t.C = t.Ma = r
            }
            function _t(t, r, n, i, a, o, s) {
                var c = t.$ / i
                  , u = t.$ % i
                  , l = t.m
                  , h = t.s
                  , f = n + t.$
                  , d = f;
                a = n + i * a;
                var p = n + i * o
                  , g = 280 + h.ua
                  , m = t.Pb ? c : 16777216
                  , v = 0 < h.ua ? h.Wa : null
                  , b = h.wc
                  , y = f < p ? wt(h, u, c) : null;
                e(t.C < o),
                e(p <= a);
                var w = !1;
                t: for (; ; ) {
                    for (; w || f < p; ) {
                        var N = 0;
                        if (c >= m) {
                            var _ = f - n;
                            e((m = t).Pb),
                            m.wd = m.m,
                            m.xd = _,
                            0 < m.s.ua && B(m.s.Wa, m.s.vb),
                            m = c + ti
                        }
                        if (u & b || (y = wt(h, u, c)),
                        e(null != y),
                        y.Qb && (r[f] = y.qb,
                        w = !0),
                        !w)
                            if (S(l),
                            y.jc) {
                                N = l,
                                _ = r;
                                var P = f
                                  , k = y.pd[L(N) & Dr - 1];
                                e(y.jc),
                                256 > k.g ? (x(N, N.u + k.g),
                                _[P] = k.value,
                                N = 0) : (x(N, N.u + k.g - 256),
                                e(256 <= k.value),
                                N = k.value),
                                0 == N && (w = !0)
                            } else
                                N = bt(y.G[0], y.H[0], l);
                        if (l.h)
                            break;
                        if (w || 256 > N) {
                            if (!w)
                                if (y.nd)
                                    r[f] = (y.qb | N << 8) >>> 0;
                                else {
                                    if (S(l),
                                    w = bt(y.G[1], y.H[1], l),
                                    S(l),
                                    _ = bt(y.G[2], y.H[2], l),
                                    P = bt(y.G[3], y.H[3], l),
                                    l.h)
                                        break;
                                    r[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0
                                }
                            if (w = !1,
                            ++f,
                            ++u >= i && (u = 0,
                            ++c,
                            null != s && c <= o && !(c % 16) && s(t, c),
                            null != v))
                                for (; d < f; )
                                    N = r[d++],
                                    v.X[(506832829 * N & 4294967295) >>> v.Mb] = N
                        } else if (280 > N) {
                            if (N = mt(N - 256, l),
                            _ = bt(y.G[4], y.H[4], l),
                            S(l),
                            _ = vt(i, _ = mt(_, l)),
                            l.h)
                                break;
                            if (f - n < _ || a - f < N)
                                break t;
                            for (P = 0; P < N; ++P)
                                r[f + P] = r[f + P - _];
                            for (f += N,
                            u += N; u >= i; )
                                u -= i,
                                ++c,
                                null != s && c <= o && !(c % 16) && s(t, c);
                            if (e(f <= a),
                            u & b && (y = wt(h, u, c)),
                            null != v)
                                for (; d < f; )
                                    N = r[d++],
                                    v.X[(506832829 * N & 4294967295) >>> v.Mb] = N
                        } else {
                            if (!(N < g))
                                break t;
                            for (w = N - 280,
                            e(null != v); d < f; )
                                N = r[d++],
                                v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
                            N = f,
                            e(!(w >>> (_ = v).Xa)),
                            r[N] = _.X[w],
                            w = !0
                        }
                        w || e(l.h == A(l))
                    }
                    if (t.Pb && l.h && f < a)
                        e(t.m.h),
                        t.a = 5,
                        t.m = t.wd,
                        t.$ = t.xd,
                        0 < t.s.ua && B(t.s.vb, t.s.Wa);
                    else {
                        if (l.h)
                            break t;
                        null != s && s(t, c > o ? o : c),
                        t.a = 0,
                        t.$ = f - n
                    }
                    return 1
                }
                return t.a = 3,
                0
            }
            function Pt(t) {
                e(null != t),
                t.vc = null,
                t.yc = null,
                t.Ya = null;
                var r = t.Wa;
                null != r && (r.X = null),
                t.vb = null,
                e(null != t)
            }
            function kt() {
                var e = new or;
                return null == e ? null : (e.a = 0,
                e.xb = gi,
                rt("Predictor", "VP8LPredictors"),
                rt("Predictor", "VP8LPredictors_C"),
                rt("PredictorAdd", "VP8LPredictorsAdd"),
                rt("PredictorAdd", "VP8LPredictorsAdd_C"),
                Gr = G,
                $r = J,
                Qr = K,
                tn = Z,
                en = $,
                rn = Q,
                nn = tt,
                t.VP8LMapColor32b = Jr,
                t.VP8LMapColor8b = Kr,
                e)
            }
            function Ft(t, r, n, s, c) {
                var u = 1
                  , f = [t]
                  , p = [r]
                  , g = s.m
                  , m = s.s
                  , v = null
                  , b = 0;
                t: for (; ; ) {
                    if (n)
                        for (; u && y(g, 1); ) {
                            var w = f
                              , N = p
                              , A = s
                              , _ = 1
                              , P = A.m
                              , k = A.gc[A.ab]
                              , F = y(P, 2);
                            if (A.Oc & 1 << F)
                                u = 0;
                            else {
                                switch (A.Oc |= 1 << F,
                                k.hc = F,
                                k.Ea = w[0],
                                k.nc = N[0],
                                k.K = [null],
                                ++A.ab,
                                e(4 >= A.ab),
                                F) {
                                case 0:
                                case 1:
                                    k.b = y(P, 3) + 2,
                                    _ = Ft(q(k.Ea, k.b), q(k.nc, k.b), 0, A, k.K),
                                    k.K = k.K[0];
                                    break;
                                case 3:
                                    var I, C = y(P, 8) + 1, j = 16 < C ? 0 : 4 < C ? 1 : 2 < C ? 2 : 3;
                                    if (w[0] = q(k.Ea, j),
                                    k.b = j,
                                    I = _ = Ft(C, 1, 0, A, k.K)) {
                                        var B, M = C, E = k, R = 1 << (8 >> E.b), T = a(R);
                                        if (null == T)
                                            I = 0;
                                        else {
                                            var U = E.K[0]
                                              , z = E.w;
                                            for (T[0] = E.K[0][0],
                                            B = 1; B < 1 * M; ++B)
                                                T[B] = D(U[z + B], T[B - 1]);
                                            for (; B < 4 * R; ++B)
                                                T[B] = 0;
                                            E.K[0] = null,
                                            E.K[0] = T,
                                            I = 1
                                        }
                                    }
                                    _ = I;
                                    break;
                                case 2:
                                    break;
                                default:
                                    e(0)
                                }
                                u = _
                            }
                        }
                    if (f = f[0],
                    p = p[0],
                    u && y(g, 1) && !(u = 1 <= (b = y(g, 4)) && 11 >= b)) {
                        s.a = 3;
                        break t
                    }
                    var H;
                    if (H = u)
                        e: {
                            var W, V, G, Y = s, J = f, X = p, K = b, Z = n, $ = Y.m, Q = Y.s, tt = [null], et = 1, rt = 0, nt = Qn[K];
                            r: for (; ; ) {
                                if (Z && y($, 1)) {
                                    var it = y($, 3) + 2
                                      , at = q(J, it)
                                      , ot = q(X, it)
                                      , st = at * ot;
                                    if (!Ft(at, ot, 0, Y, tt))
                                        break r;
                                    for (tt = tt[0],
                                    Q.xc = it,
                                    W = 0; W < st; ++W) {
                                        var ct = tt[W] >> 8 & 65535;
                                        tt[W] = ct,
                                        ct >= et && (et = ct + 1)
                                    }
                                }
                                if ($.h)
                                    break r;
                                for (V = 0; 5 > V; ++V) {
                                    var ut = Xn[V];
                                    !V && 0 < K && (ut += 1 << K),
                                    rt < ut && (rt = ut)
                                }
                                var lt = o(et * nt, h)
                                  , ht = et
                                  , ft = o(ht, d);
                                if (null == ft)
                                    var dt = null;
                                else
                                    e(65536 >= ht),
                                    dt = ft;
                                var pt = a(rt);
                                if (null == dt || null == pt || null == lt) {
                                    Y.a = 1;
                                    break r
                                }
                                var gt = lt;
                                for (W = G = 0; W < et; ++W) {
                                    var mt = dt[W]
                                      , vt = mt.G
                                      , bt = mt.H
                                      , wt = 0
                                      , Nt = 1
                                      , Lt = 0;
                                    for (V = 0; 5 > V; ++V) {
                                        ut = Xn[V],
                                        vt[V] = gt,
                                        bt[V] = G,
                                        !V && 0 < K && (ut += 1 << K);
                                        n: {
                                            var At, xt = ut, St = Y, kt = pt, It = gt, Ct = G, jt = 0, Ot = St.m, Bt = y(Ot, 1);
                                            if (i(kt, 0, 0, xt),
                                            Bt) {
                                                var Mt = y(Ot, 1) + 1
                                                  , Et = y(Ot, 1)
                                                  , qt = y(Ot, 0 == Et ? 1 : 8);
                                                kt[qt] = 1,
                                                2 == Mt && (kt[qt = y(Ot, 8)] = 1);
                                                var Dt = 1
                                            } else {
                                                var Rt = a(19)
                                                  , Tt = y(Ot, 4) + 4;
                                                if (19 < Tt) {
                                                    St.a = 3;
                                                    var Ut = 0;
                                                    break n
                                                }
                                                for (At = 0; At < Tt; ++At)
                                                    Rt[Zn[At]] = y(Ot, 3);
                                                var zt = void 0
                                                  , Ht = void 0
                                                  , Wt = St
                                                  , Vt = Rt
                                                  , Gt = xt
                                                  , Yt = kt
                                                  , Jt = 0
                                                  , Xt = Wt.m
                                                  , Kt = 8
                                                  , Zt = o(128, h);
                                                i: for (; l(Zt, 0, 7, Vt, 19); ) {
                                                    if (y(Xt, 1)) {
                                                        var $t = 2 + 2 * y(Xt, 3);
                                                        if ((zt = 2 + y(Xt, $t)) > Gt)
                                                            break i
                                                    } else
                                                        zt = Gt;
                                                    for (Ht = 0; Ht < Gt && zt--; ) {
                                                        S(Xt);
                                                        var Qt = Zt[0 + (127 & L(Xt))];
                                                        x(Xt, Xt.u + Qt.g);
                                                        var te = Qt.value;
                                                        if (16 > te)
                                                            Yt[Ht++] = te,
                                                            0 != te && (Kt = te);
                                                        else {
                                                            var ee = 16 == te
                                                              , re = te - 16
                                                              , ne = Jn[re]
                                                              , ie = y(Xt, Yn[re]) + ne;
                                                            if (Ht + ie > Gt)
                                                                break i;
                                                            for (var ae = ee ? Kt : 0; 0 < ie--; )
                                                                Yt[Ht++] = ae
                                                        }
                                                    }
                                                    Jt = 1;
                                                    break i
                                                }
                                                Jt || (Wt.a = 3),
                                                Dt = Jt
                                            }
                                            (Dt = Dt && !Ot.h) && (jt = l(It, Ct, 8, kt, xt)),
                                            Dt && 0 != jt ? Ut = jt : (St.a = 3,
                                            Ut = 0)
                                        }
                                        if (0 == Ut)
                                            break r;
                                        if (Nt && 1 == Kn[V] && (Nt = 0 == gt[G].g),
                                        wt += gt[G].g,
                                        G += Ut,
                                        3 >= V) {
                                            var oe, se = pt[0];
                                            for (oe = 1; oe < ut; ++oe)
                                                pt[oe] > se && (se = pt[oe]);
                                            Lt += se
                                        }
                                    }
                                    if (mt.nd = Nt,
                                    mt.Qb = 0,
                                    Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0,
                                    0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1,
                                    mt.qb += vt[0][bt[0] + 0].value << 8)),
                                    mt.jc = !mt.Qb && 6 > Lt,
                                    mt.jc) {
                                        var ce, ue = mt;
                                        for (ce = 0; ce < Dr; ++ce) {
                                            var le = ce
                                              , he = ue.pd[le]
                                              , fe = ue.G[0][ue.H[0] + le];
                                            256 <= fe.value ? (he.g = fe.g + 256,
                                            he.value = fe.value) : (he.g = 0,
                                            he.value = 0,
                                            le >>= yt(fe, 8, he),
                                            le >>= yt(ue.G[1][ue.H[1] + le], 16, he),
                                            le >>= yt(ue.G[2][ue.H[2] + le], 0, he),
                                            yt(ue.G[3][ue.H[3] + le], 24, he))
                                        }
                                    }
                                }
                                Q.vc = tt,
                                Q.Wb = et,
                                Q.Ya = dt,
                                Q.yc = lt,
                                H = 1;
                                break e
                            }
                            H = 0
                        }
                    if (!(u = H)) {
                        s.a = 3;
                        break t
                    }
                    if (0 < b) {
                        if (m.ua = 1 << b,
                        !O(m.Wa, b)) {
                            s.a = 1,
                            u = 0;
                            break t
                        }
                    } else
                        m.ua = 0;
                    var de = s
                      , pe = f
                      , ge = p
                      , me = de.s
                      , ve = me.xc;
                    if (de.c = pe,
                    de.i = ge,
                    me.md = q(pe, ve),
                    me.wc = 0 == ve ? -1 : (1 << ve) - 1,
                    n) {
                        s.xb = pi;
                        break t
                    }
                    if (null == (v = a(f * p))) {
                        s.a = 1,
                        u = 0;
                        break t
                    }
                    u = (u = _t(s, v, 0, f, p, p, null)) && !g.h;
                    break t
                }
                return u ? (null != c ? c[0] = v : (e(null == v),
                e(n)),
                s.$ = 0,
                n || Pt(m)) : Pt(m),
                u
            }
            function It(t, r) {
                var n = t.c * t.i
                  , i = n + r + 16 * r;
                return e(t.c <= r),
                t.V = a(i),
                null == t.V ? (t.Ta = null,
                t.Ua = 0,
                t.a = 1,
                0) : (t.Ta = t.V,
                t.Ua = t.Ba + n + r,
                1)
            }
            function Ct(t, r) {
                var n = t.C
                  , i = r - n
                  , a = t.V
                  , o = t.Ba + t.c * n;
                for (e(r <= t.l.o); 0 < i; ) {
                    var s = 16 < i ? 16 : i
                      , c = t.l.ma
                      , u = t.l.width
                      , l = u * s
                      , h = c.ca
                      , f = c.tb + u * n
                      , d = t.Ta
                      , p = t.Ua;
                    Nt(t, s, a, o),
                    _n(d, p, h, f, l),
                    xt(c, n, n + s, h, f, u),
                    i -= s,
                    a += s * t.c,
                    n += s
                }
                e(n == r),
                t.C = t.Ma = r
            }
            function jt() {
                this.ub = this.yd = this.td = this.Rb = 0
            }
            function Ot() {
                this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0
            }
            function Bt() {
                this.Fb = this.Bb = this.Cb = 0,
                this.Zb = a(4),
                this.Lb = a(4)
            }
            function Mt() {
                this.Yb = function() {
                    var t = [];
                    return function t(e, r, n) {
                        for (var i = n[r], a = 0; a < i && (e.push(n.length > r + 1 ? [] : 0),
                        !(n.length < r + 1)); a++)
                            t(e[a], r + 1, n)
                    }(t, 0, [3, 11]),
                    t
                }()
            }
            function Et() {
                this.jb = a(3),
                this.Wc = s([4, 8], Mt),
                this.Xc = s([4, 17], Mt)
            }
            function qt() {
                this.Pc = this.wb = this.Tb = this.zd = 0,
                this.vd = new a(4),
                this.od = new a(4)
            }
            function Dt() {
                this.ld = this.La = this.dd = this.tc = 0
            }
            function Rt() {
                this.Na = this.la = 0
            }
            function Tt() {
                this.Sc = [0, 0],
                this.Eb = [0, 0],
                this.Qc = [0, 0],
                this.ia = this.lc = 0
            }
            function Ut() {
                this.ad = a(384),
                this.Za = 0,
                this.Ob = a(16),
                this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0
            }
            function zt() {
                this.uc = this.M = this.Nb = 0,
                this.wa = Array(new Dt),
                this.Y = 0,
                this.ya = Array(new Ut),
                this.aa = 0,
                this.l = new Gt
            }
            function Ht() {
                this.y = a(16),
                this.f = a(8),
                this.ea = a(8)
            }
            function Wt() {
                this.cb = this.a = 0,
                this.sc = "",
                this.m = new w,
                this.Od = new jt,
                this.Kc = new Ot,
                this.ed = new qt,
                this.Qa = new Bt,
                this.Ic = this.$c = this.Aa = 0,
                this.D = new zt,
                this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0,
                this.Jc = o(8, w),
                this.ia = 0,
                this.pb = o(4, Tt),
                this.Pa = new Et,
                this.Bd = this.kc = 0,
                this.Ac = [],
                this.Bc = 0,
                this.zc = [0, 0, 0, 0],
                this.Gd = Array(new Ht),
                this.Hd = 0,
                this.rb = Array(new Rt),
                this.sb = 0,
                this.wa = Array(new Dt),
                this.Y = 0,
                this.oc = [],
                this.pc = 0,
                this.sa = [],
                this.ta = 0,
                this.qa = [],
                this.ra = 0,
                this.Ha = [],
                this.B = this.R = this.Ia = 0,
                this.Ec = [],
                this.M = this.ja = this.Vb = this.Fc = 0,
                this.ya = Array(new Ut),
                this.L = this.aa = 0,
                this.gd = s([4, 2], Dt),
                this.ga = null,
                this.Fa = [],
                this.Cc = this.qc = this.P = 0,
                this.Gb = [],
                this.Uc = 0,
                this.mb = [],
                this.nb = 0,
                this.rc = [],
                this.Ga = this.Vc = 0
            }
            function Vt(t, e) {
                return 0 > t ? 0 : t > e ? e : t
            }
            function Gt() {
                this.T = this.U = this.ka = this.height = this.width = 0,
                this.y = [],
                this.f = [],
                this.ea = [],
                this.Rc = this.fa = this.W = this.N = this.O = 0,
                this.ma = "void",
                this.put = "VP8IoPutHook",
                this.ac = "VP8IoSetupHook",
                this.bc = "VP8IoTeardownHook",
                this.ha = this.Kb = 0,
                this.data = [],
                this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0,
                this.F = [],
                this.J = 0
            }
            function Yt() {
                var t = new Wt;
                return null != t && (t.a = 0,
                t.sc = "OK",
                t.cb = 0,
                t.Xb = 0,
                ni || (ni = Zt)),
                t
            }
            function Jt(t, e, r) {
                return 0 == t.a && (t.a = e,
                t.sc = r,
                t.cb = 0),
                0
            }
            function Xt(t, e, r) {
                return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2]
            }
            function Kt(t, r) {
                if (null == t)
                    return 0;
                if (t.a = 0,
                t.sc = "OK",
                null == r)
                    return Jt(t, 2, "null VP8Io passed to VP8GetHeaders()");
                var n = r.data
                  , a = r.w
                  , o = r.ha;
                if (4 > o)
                    return Jt(t, 7, "Truncated header.");
                var s = n[a + 0] | n[a + 1] << 8 | n[a + 2] << 16
                  , c = t.Od;
                if (c.Rb = !(1 & s),
                c.td = s >> 1 & 7,
                c.yd = s >> 4 & 1,
                c.ub = s >> 5,
                3 < c.td)
                    return Jt(t, 3, "Incorrect keyframe parameters.");
                if (!c.yd)
                    return Jt(t, 4, "Frame not displayable.");
                a += 3,
                o -= 3;
                var u = t.Kc;
                if (c.Rb) {
                    if (7 > o)
                        return Jt(t, 7, "cannot parse picture header");
                    if (!Xt(n, a, o))
                        return Jt(t, 3, "Bad code word");
                    u.c = 16383 & (n[a + 4] << 8 | n[a + 3]),
                    u.Td = n[a + 4] >> 6,
                    u.i = 16383 & (n[a + 6] << 8 | n[a + 5]),
                    u.Ud = n[a + 6] >> 6,
                    a += 7,
                    o -= 7,
                    t.za = u.c + 15 >> 4,
                    t.Ub = u.i + 15 >> 4,
                    r.width = u.c,
                    r.height = u.i,
                    r.Da = 0,
                    r.j = 0,
                    r.v = 0,
                    r.va = r.width,
                    r.o = r.height,
                    r.da = 0,
                    r.ib = r.width,
                    r.hb = r.height,
                    r.U = r.width,
                    r.T = r.height,
                    i((s = t.Pa).jb, 0, 255, s.jb.length),
                    e(null != (s = t.Qa)),
                    s.Cb = 0,
                    s.Bb = 0,
                    s.Fb = 1,
                    i(s.Zb, 0, 0, s.Zb.length),
                    i(s.Lb, 0, 0, s.Lb)
                }
                if (c.ub > o)
                    return Jt(t, 7, "bad partition length");
                p(s = t.m, n, a, c.ub),
                a += c.ub,
                o -= c.ub,
                c.Rb && (u.Ld = P(s),
                u.Kd = P(s)),
                u = t.Qa;
                var l, h = t.Pa;
                if (e(null != s),
                e(null != u),
                u.Cb = P(s),
                u.Cb) {
                    if (u.Bb = P(s),
                    P(s)) {
                        for (u.Fb = P(s),
                        l = 0; 4 > l; ++l)
                            u.Zb[l] = P(s) ? m(s, 7) : 0;
                        for (l = 0; 4 > l; ++l)
                            u.Lb[l] = P(s) ? m(s, 6) : 0
                    }
                    if (u.Bb)
                        for (l = 0; 3 > l; ++l)
                            h.jb[l] = P(s) ? g(s, 8) : 255
                } else
                    u.Bb = 0;
                if (s.Ka)
                    return Jt(t, 3, "cannot parse segment header");
                if ((u = t.ed).zd = P(s),
                u.Tb = g(s, 6),
                u.wb = g(s, 3),
                u.Pc = P(s),
                u.Pc && P(s)) {
                    for (h = 0; 4 > h; ++h)
                        P(s) && (u.vd[h] = m(s, 6));
                    for (h = 0; 4 > h; ++h)
                        P(s) && (u.od[h] = m(s, 6))
                }
                if (t.L = 0 == u.Tb ? 0 : u.zd ? 1 : 2,
                s.Ka)
                    return Jt(t, 3, "cannot parse filter header");
                var f = o;
                if (o = l = a,
                a = l + f,
                u = f,
                t.Xb = (1 << g(t.m, 2)) - 1,
                f < 3 * (h = t.Xb))
                    n = 7;
                else {
                    for (l += 3 * h,
                    u -= 3 * h,
                    f = 0; f < h; ++f) {
                        var d = n[o + 0] | n[o + 1] << 8 | n[o + 2] << 16;
                        d > u && (d = u),
                        p(t.Jc[+f], n, l, d),
                        l += d,
                        u -= d,
                        o += 3
                    }
                    p(t.Jc[+h], n, l, u),
                    n = l < a ? 0 : 5
                }
                if (0 != n)
                    return Jt(t, n, "cannot parse partitions");
                for (n = g(l = t.m, 7),
                o = P(l) ? m(l, 4) : 0,
                a = P(l) ? m(l, 4) : 0,
                u = P(l) ? m(l, 4) : 0,
                h = P(l) ? m(l, 4) : 0,
                l = P(l) ? m(l, 4) : 0,
                f = t.Qa,
                d = 0; 4 > d; ++d) {
                    if (f.Cb) {
                        var v = f.Zb[d];
                        f.Fb || (v += n)
                    } else {
                        if (0 < d) {
                            t.pb[d] = t.pb[0];
                            continue
                        }
                        v = n
                    }
                    var b = t.pb[d];
                    b.Sc[0] = ei[Vt(v + o, 127)],
                    b.Sc[1] = ri[Vt(v + 0, 127)],
                    b.Eb[0] = 2 * ei[Vt(v + a, 127)],
                    b.Eb[1] = 101581 * ri[Vt(v + u, 127)] >> 16,
                    8 > b.Eb[1] && (b.Eb[1] = 8),
                    b.Qc[0] = ei[Vt(v + h, 117)],
                    b.Qc[1] = ri[Vt(v + l, 127)],
                    b.lc = v + l
                }
                if (!c.Rb)
                    return Jt(t, 4, "Not a key frame.");
                for (P(s),
                c = t.Pa,
                n = 0; 4 > n; ++n) {
                    for (o = 0; 8 > o; ++o)
                        for (a = 0; 3 > a; ++a)
                            for (u = 0; 11 > u; ++u)
                                h = k(s, ui[n][o][a][u]) ? g(s, 8) : si[n][o][a][u],
                                c.Wc[n][o].Yb[a][u] = h;
                    for (o = 0; 17 > o; ++o)
                        c.Xc[n][o] = c.Wc[n][li[o]]
                }
                return t.kc = P(s),
                t.kc && (t.Bd = g(s, 8)),
                t.cb = 1
            }
            function Zt(t, e, r, n, i, a, o) {
                var s = e[i].Yb[r];
                for (r = 0; 16 > i; ++i) {
                    if (!k(t, s[r + 0]))
                        return i;
                    for (; !k(t, s[r + 1]); )
                        if (s = e[++i].Yb[0],
                        r = 0,
                        16 == i)
                            return 16;
                    var c = e[i + 1].Yb;
                    if (k(t, s[r + 2])) {
                        var u = t
                          , l = 0;
                        if (k(u, (f = s)[(h = r) + 3]))
                            if (k(u, f[h + 6])) {
                                for (s = 0,
                                h = 2 * (l = k(u, f[h + 8])) + (f = k(u, f[h + 9 + l])),
                                l = 0,
                                f = ii[h]; f[s]; ++s)
                                    l += l + k(u, f[s]);
                                l += 3 + (8 << h)
                            } else
                                k(u, f[h + 7]) ? (l = 7 + 2 * k(u, 165),
                                l += k(u, 145)) : l = 5 + k(u, 159);
                        else
                            l = k(u, f[h + 4]) ? 3 + k(u, f[h + 5]) : 2;
                        s = c[2]
                    } else
                        l = 1,
                        s = c[1];
                    c = o + ai[i],
                    0 > (u = t).b && _(u);
                    var h, f = u.b, d = (h = u.Ca >> 1) - (u.I >> f) >> 31;
                    --u.b,
                    u.Ca += d,
                    u.Ca |= 1,
                    u.I -= (h + 1 & d) << f,
                    a[c] = ((l ^ d) - d) * n[(0 < i) + 0]
                }
                return 16
            }
            function $t(t) {
                var e = t.rb[t.sb - 1];
                e.la = 0,
                e.Na = 0,
                i(t.zc, 0, 0, t.zc.length),
                t.ja = 0
            }
            function Qt(t, r) {
                if (null == t)
                    return 0;
                if (null == r)
                    return Jt(t, 2, "NULL VP8Io parameter in VP8Decode().");
                if (!t.cb && !Kt(t, r))
                    return 0;
                if (e(t.cb),
                null == r.ac || r.ac(r)) {
                    r.ob && (t.L = 0);
                    var s = Ri[t.L];
                    if (2 == t.L ? (t.yb = 0,
                    t.zb = 0) : (t.yb = r.v - s >> 4,
                    t.zb = r.j - s >> 4,
                    0 > t.yb && (t.yb = 0),
                    0 > t.zb && (t.zb = 0)),
                    t.Va = r.o + 15 + s >> 4,
                    t.Hb = r.va + 15 + s >> 4,
                    t.Hb > t.za && (t.Hb = t.za),
                    t.Va > t.Ub && (t.Va = t.Ub),
                    0 < t.L) {
                        var c = t.ed;
                        for (s = 0; 4 > s; ++s) {
                            var u;
                            if (t.Qa.Cb) {
                                var l = t.Qa.Lb[s];
                                t.Qa.Fb || (l += c.Tb)
                            } else
                                l = c.Tb;
                            for (u = 0; 1 >= u; ++u) {
                                var h = t.gd[s][u]
                                  , f = l;
                                if (c.Pc && (f += c.vd[0],
                                u && (f += c.od[0])),
                                0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {
                                    var d = f;
                                    0 < c.wb && ((d = 4 < c.wb ? d >> 2 : d >> 1) > 9 - c.wb && (d = 9 - c.wb)),
                                    1 > d && (d = 1),
                                    h.dd = d,
                                    h.tc = 2 * f + d,
                                    h.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0
                                } else
                                    h.tc = 0;
                                h.La = u
                            }
                        }
                    }
                    s = 0
                } else
                    Jt(t, 6, "Frame setup failed"),
                    s = t.a;
                if (s = 0 == s) {
                    if (s) {
                        t.$c = 0,
                        0 < t.Aa || (t.Ic = Ui);
                        t: {
                            s = t.Ic;
                            c = 4 * (d = t.za);
                            var p = 32 * d
                              , g = d + 1
                              , m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0
                              , v = (2 == t.Aa ? 2 : 1) * d;
                            if ((h = c + 832 + (u = 3 * (16 * s + Ri[t.L]) / 2 * p) + (l = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != h)
                                s = 0;
                            else {
                                if (h > t.Vb) {
                                    if (t.Vb = 0,
                                    t.Ec = a(h),
                                    t.Fc = 0,
                                    null == t.Ec) {
                                        s = Jt(t, 1, "no memory during frame initialization.");
                                        break t
                                    }
                                    t.Vb = h
                                }
                                h = t.Ec,
                                f = t.Fc,
                                t.Ac = h,
                                t.Bc = f,
                                f += c,
                                t.Gd = o(p, Ht),
                                t.Hd = 0,
                                t.rb = o(g + 1, Rt),
                                t.sb = 1,
                                t.wa = m ? o(m, Dt) : null,
                                t.Y = 0,
                                t.D.Nb = 0,
                                t.D.wa = t.wa,
                                t.D.Y = t.Y,
                                0 < t.Aa && (t.D.Y += d),
                                e(!0),
                                t.oc = h,
                                t.pc = f,
                                f += 832,
                                t.ya = o(v, Ut),
                                t.aa = 0,
                                t.D.ya = t.ya,
                                t.D.aa = t.aa,
                                2 == t.Aa && (t.D.aa += d),
                                t.R = 16 * d,
                                t.B = 8 * d,
                                d = (p = Ri[t.L]) * t.R,
                                p = p / 2 * t.B,
                                t.sa = h,
                                t.ta = f + d,
                                t.qa = t.sa,
                                t.ra = t.ta + 16 * s * t.R + p,
                                t.Ha = t.qa,
                                t.Ia = t.ra + 8 * s * t.B + p,
                                t.$c = 0,
                                f += u,
                                t.mb = l ? h : null,
                                t.nb = l ? f : null,
                                e(f + l <= t.Fc + t.Vb),
                                $t(t),
                                i(t.Ac, t.Bc, 0, c),
                                s = 1
                            }
                        }
                        if (s) {
                            if (r.ka = 0,
                            r.y = t.sa,
                            r.O = t.ta,
                            r.f = t.qa,
                            r.N = t.ra,
                            r.ea = t.Ha,
                            r.Vd = t.Ia,
                            r.fa = t.R,
                            r.Rc = t.B,
                            r.F = null,
                            r.J = 0,
                            !Cn) {
                                for (s = -255; 255 >= s; ++s)
                                    Pn[255 + s] = 0 > s ? -s : s;
                                for (s = -1020; 1020 >= s; ++s)
                                    kn[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;
                                for (s = -112; 112 >= s; ++s)
                                    Fn[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;
                                for (s = -255; 510 >= s; ++s)
                                    In[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;
                                Cn = 1
                            }
                            an = ue,
                            on = ae,
                            cn = oe,
                            un = se,
                            ln = ce,
                            sn = ie,
                            hn = Je,
                            fn = Xe,
                            dn = $e,
                            pn = Qe,
                            gn = Ke,
                            mn = Ze,
                            vn = tr,
                            bn = er,
                            yn = ze,
                            wn = He,
                            Nn = We,
                            Ln = Ve,
                            fi[0] = xe,
                            fi[1] = he,
                            fi[2] = Le,
                            fi[3] = Ae,
                            fi[4] = Se,
                            fi[5] = Pe,
                            fi[6] = _e,
                            fi[7] = ke,
                            fi[8] = Ie,
                            fi[9] = Fe,
                            hi[0] = ve,
                            hi[1] = de,
                            hi[2] = pe,
                            hi[3] = ge,
                            hi[4] = be,
                            hi[5] = ye,
                            hi[6] = we,
                            di[0] = Be,
                            di[1] = fe,
                            di[2] = Ce,
                            di[3] = je,
                            di[4] = Ee,
                            di[5] = Me,
                            di[6] = qe,
                            s = 1
                        } else
                            s = 0
                    }
                    s && (s = function(t, r) {
                        for (t.M = 0; t.M < t.Va; ++t.M) {
                            var o, s = t.Jc[t.M & t.Xb], c = t.m, u = t;
                            for (o = 0; o < u.za; ++o) {
                                var l = c
                                  , h = u
                                  , f = h.Ac
                                  , d = h.Bc + 4 * o
                                  , p = h.zc
                                  , g = h.ya[h.aa + o];
                                if (h.Qa.Bb ? g.$b = k(l, h.Pa.jb[0]) ? 2 + k(l, h.Pa.jb[2]) : k(l, h.Pa.jb[1]) : g.$b = 0,
                                h.kc && (g.Ad = k(l, h.Bd)),
                                g.Za = !k(l, 145) + 0,
                                g.Za) {
                                    var m = g.Ob
                                      , v = 0;
                                    for (h = 0; 4 > h; ++h) {
                                        var b, y = p[0 + h];
                                        for (b = 0; 4 > b; ++b) {
                                            y = ci[f[d + b]][y];
                                            for (var w = oi[k(l, y[0])]; 0 < w; )
                                                w = oi[2 * w + k(l, y[w])];
                                            y = -w,
                                            f[d + b] = y
                                        }
                                        n(m, v, f, d, 4),
                                        v += 4,
                                        p[0 + h] = y
                                    }
                                } else
                                    y = k(l, 156) ? k(l, 128) ? 1 : 3 : k(l, 163) ? 2 : 0,
                                    g.Ob[0] = y,
                                    i(f, d, y, 4),
                                    i(p, 0, y, 4);
                                g.Dd = k(l, 142) ? k(l, 114) ? k(l, 183) ? 1 : 3 : 2 : 0
                            }
                            if (u.m.Ka)
                                return Jt(t, 7, "Premature end-of-partition0 encountered.");
                            for (; t.ja < t.za; ++t.ja) {
                                if (u = s,
                                l = (c = t).rb[c.sb - 1],
                                f = c.rb[c.sb + c.ja],
                                o = c.ya[c.aa + c.ja],
                                d = c.kc ? o.Ad : 0)
                                    l.la = f.la = 0,
                                    o.Za || (l.Na = f.Na = 0),
                                    o.Hc = 0,
                                    o.Gc = 0,
                                    o.ia = 0;
                                else {
                                    var N, L;
                                    l = f,
                                    f = u,
                                    d = c.Pa.Xc,
                                    p = c.ya[c.aa + c.ja],
                                    g = c.pb[p.$b];
                                    if (h = p.ad,
                                    m = 0,
                                    v = c.rb[c.sb - 1],
                                    y = b = 0,
                                    i(h, m, 0, 384),
                                    p.Za)
                                        var A = 0
                                          , x = d[3];
                                    else {
                                        w = a(16);
                                        var S = l.Na + v.Na;
                                        if (S = ni(f, d[1], S, g.Eb, 0, w, 0),
                                        l.Na = v.Na = (0 < S) + 0,
                                        1 < S)
                                            an(w, 0, h, m);
                                        else {
                                            var _ = w[0] + 3 >> 3;
                                            for (w = 0; 256 > w; w += 16)
                                                h[m + w] = _
                                        }
                                        A = 1,
                                        x = d[0]
                                    }
                                    var P = 15 & l.la
                                      , F = 15 & v.la;
                                    for (w = 0; 4 > w; ++w) {
                                        var I = 1 & F;
                                        for (_ = L = 0; 4 > _; ++_)
                                            P = P >> 1 | (I = (S = ni(f, x, S = I + (1 & P), g.Sc, A, h, m)) > A) << 7,
                                            L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]),
                                            m += 16;
                                        P >>= 4,
                                        F = F >> 1 | I << 7,
                                        b = (b << 8 | L) >>> 0
                                    }
                                    for (x = P,
                                    A = F >> 4,
                                    N = 0; 4 > N; N += 2) {
                                        for (L = 0,
                                        P = l.la >> 4 + N,
                                        F = v.la >> 4 + N,
                                        w = 0; 2 > w; ++w) {
                                            for (I = 1 & F,
                                            _ = 0; 2 > _; ++_)
                                                S = I + (1 & P),
                                                P = P >> 1 | (I = 0 < (S = ni(f, d[2], S, g.Qc, 0, h, m))) << 3,
                                                L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != h[m + 0]),
                                                m += 16;
                                            P >>= 2,
                                            F = F >> 1 | I << 5
                                        }
                                        y |= L << 4 * N,
                                        x |= P << 4 << N,
                                        A |= (240 & F) << N
                                    }
                                    l.la = x,
                                    v.la = A,
                                    p.Hc = b,
                                    p.Gc = y,
                                    p.ia = 43690 & y ? 0 : g.ia,
                                    d = !(b | y)
                                }
                                if (0 < c.L && (c.wa[c.Y + c.ja] = c.gd[o.$b][o.Za],
                                c.wa[c.Y + c.ja].La |= !d),
                                u.Ka)
                                    return Jt(t, 7, "Premature end-of-file encountered.")
                            }
                            if ($t(t),
                            c = r,
                            u = 1,
                            o = (s = t).D,
                            l = 0 < s.L && s.M >= s.zb && s.M <= s.Va,
                            0 == s.Aa)
                                t: {
                                    if (o.M = s.M,
                                    o.uc = l,
                                    Or(s, o),
                                    u = 1,
                                    o = (L = s.D).Nb,
                                    l = (y = Ri[s.L]) * s.R,
                                    f = y / 2 * s.B,
                                    w = 16 * o * s.R,
                                    _ = 8 * o * s.B,
                                    d = s.sa,
                                    p = s.ta - l + w,
                                    g = s.qa,
                                    h = s.ra - f + _,
                                    m = s.Ha,
                                    v = s.Ia - f + _,
                                    F = 0 == (P = L.M),
                                    b = P >= s.Va - 1,
                                    2 == s.Aa && Or(s, L),
                                    L.uc)
                                        for (I = (S = s).D.M,
                                        e(S.D.uc),
                                        L = S.yb; L < S.Hb; ++L) {
                                            A = L,
                                            x = I;
                                            var C = (j = (U = S).D).Nb;
                                            N = U.R;
                                            var j = j.wa[j.Y + A]
                                              , O = U.sa
                                              , B = U.ta + 16 * C * N + 16 * A
                                              , M = j.dd
                                              , E = j.tc;
                                            if (0 != E)
                                                if (e(3 <= E),
                                                1 == U.L)
                                                    0 < A && wn(O, B, N, E + 4),
                                                    j.La && Ln(O, B, N, E),
                                                    0 < x && yn(O, B, N, E + 4),
                                                    j.La && Nn(O, B, N, E);
                                                else {
                                                    var q = U.B
                                                      , D = U.qa
                                                      , R = U.ra + 8 * C * q + 8 * A
                                                      , T = U.Ha
                                                      , U = U.Ia + 8 * C * q + 8 * A;
                                                    C = j.ld;
                                                    0 < A && (fn(O, B, N, E + 4, M, C),
                                                    pn(D, R, T, U, q, E + 4, M, C)),
                                                    j.La && (mn(O, B, N, E, M, C),
                                                    bn(D, R, T, U, q, E, M, C)),
                                                    0 < x && (hn(O, B, N, E + 4, M, C),
                                                    dn(D, R, T, U, q, E + 4, M, C)),
                                                    j.La && (gn(O, B, N, E, M, C),
                                                    vn(D, R, T, U, q, E, M, C))
                                                }
                                        }
                                    if (s.ia && alert("todo:DitherRow"),
                                    null != c.put) {
                                        if (L = 16 * P,
                                        P = 16 * (P + 1),
                                        F ? (c.y = s.sa,
                                        c.O = s.ta + w,
                                        c.f = s.qa,
                                        c.N = s.ra + _,
                                        c.ea = s.Ha,
                                        c.W = s.Ia + _) : (L -= y,
                                        c.y = d,
                                        c.O = p,
                                        c.f = g,
                                        c.N = h,
                                        c.ea = m,
                                        c.W = v),
                                        b || (P -= y),
                                        P > c.o && (P = c.o),
                                        c.F = null,
                                        c.J = null,
                                        null != s.Fa && 0 < s.Fa.length && L < P && (c.J = hr(s, c, L, P - L),
                                        c.F = s.mb,
                                        null == c.F && 0 == c.F.length)) {
                                            u = Jt(s, 3, "Could not decode alpha data.");
                                            break t
                                        }
                                        L < c.j && (y = c.j - L,
                                        L = c.j,
                                        e(!(1 & y)),
                                        c.O += s.R * y,
                                        c.N += s.B * (y >> 1),
                                        c.W += s.B * (y >> 1),
                                        null != c.F && (c.J += c.width * y)),
                                        L < P && (c.O += c.v,
                                        c.N += c.v >> 1,
                                        c.W += c.v >> 1,
                                        null != c.F && (c.J += c.v),
                                        c.ka = L - c.j,
                                        c.U = c.va - c.v,
                                        c.T = P - L,
                                        u = c.put(c))
                                    }
                                    o + 1 != s.Ic || b || (n(s.sa, s.ta - l, d, p + 16 * s.R, l),
                                    n(s.qa, s.ra - f, g, h + 8 * s.B, f),
                                    n(s.Ha, s.Ia - f, m, v + 8 * s.B, f))
                                }
                            if (!u)
                                return Jt(t, 6, "Output aborted.")
                        }
                        return 1
                    }(t, r)),
                    null != r.bc && r.bc(r),
                    s &= 1
                }
                return s ? (t.cb = 0,
                s) : 0
            }
            function te(t, e, r, n, i) {
                i = t[e + r + 32 * n] + (i >> 3),
                t[e + r + 32 * n] = -256 & i ? 0 > i ? 0 : 255 : i
            }
            function ee(t, e, r, n, i, a) {
                te(t, e, 0, r, n + i),
                te(t, e, 1, r, n + a),
                te(t, e, 2, r, n - a),
                te(t, e, 3, r, n - i)
            }
            function re(t) {
                return (20091 * t >> 16) + t
            }
            function ne(t, e, r, n) {
                var i, o = 0, s = a(16);
                for (i = 0; 4 > i; ++i) {
                    var c = t[e + 0] + t[e + 8]
                      , u = t[e + 0] - t[e + 8]
                      , l = (35468 * t[e + 4] >> 16) - re(t[e + 12])
                      , h = re(t[e + 4]) + (35468 * t[e + 12] >> 16);
                    s[o + 0] = c + h,
                    s[o + 1] = u + l,
                    s[o + 2] = u - l,
                    s[o + 3] = c - h,
                    o += 4,
                    e++
                }
                for (i = o = 0; 4 > i; ++i)
                    c = (t = s[o + 0] + 4) + s[o + 8],
                    u = t - s[o + 8],
                    l = (35468 * s[o + 4] >> 16) - re(s[o + 12]),
                    te(r, n, 0, 0, c + (h = re(s[o + 4]) + (35468 * s[o + 12] >> 16))),
                    te(r, n, 1, 0, u + l),
                    te(r, n, 2, 0, u - l),
                    te(r, n, 3, 0, c - h),
                    o++,
                    n += 32
            }
            function ie(t, e, r, n) {
                var i = t[e + 0] + 4
                  , a = 35468 * t[e + 4] >> 16
                  , o = re(t[e + 4])
                  , s = 35468 * t[e + 1] >> 16;
                ee(r, n, 0, i + o, t = re(t[e + 1]), s),
                ee(r, n, 1, i + a, t, s),
                ee(r, n, 2, i - a, t, s),
                ee(r, n, 3, i - o, t, s)
            }
            function ae(t, e, r, n, i) {
                ne(t, e, r, n),
                i && ne(t, e + 16, r, n + 4)
            }
            function oe(t, e, r, n) {
                on(t, e + 0, r, n, 1),
                on(t, e + 32, r, n + 128, 1)
            }
            function se(t, e, r, n) {
                var i;
                for (t = t[e + 0] + 4,
                i = 0; 4 > i; ++i)
                    for (e = 0; 4 > e; ++e)
                        te(r, n, e, i, t)
            }
            function ce(t, e, r, n) {
                t[e + 0] && un(t, e + 0, r, n),
                t[e + 16] && un(t, e + 16, r, n + 4),
                t[e + 32] && un(t, e + 32, r, n + 128),
                t[e + 48] && un(t, e + 48, r, n + 128 + 4)
            }
            function ue(t, e, r, n) {
                var i, o = a(16);
                for (i = 0; 4 > i; ++i) {
                    var s = t[e + 0 + i] + t[e + 12 + i]
                      , c = t[e + 4 + i] + t[e + 8 + i]
                      , u = t[e + 4 + i] - t[e + 8 + i]
                      , l = t[e + 0 + i] - t[e + 12 + i];
                    o[0 + i] = s + c,
                    o[8 + i] = s - c,
                    o[4 + i] = l + u,
                    o[12 + i] = l - u
                }
                for (i = 0; 4 > i; ++i)
                    s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i],
                    c = o[1 + 4 * i] + o[2 + 4 * i],
                    u = o[1 + 4 * i] - o[2 + 4 * i],
                    l = t - o[3 + 4 * i],
                    r[n + 0] = s + c >> 3,
                    r[n + 16] = l + u >> 3,
                    r[n + 32] = s - c >> 3,
                    r[n + 48] = l - u >> 3,
                    n += 64
            }
            function le(t, e, r) {
                var n, i = e - 32, a = Bn, o = 255 - t[i - 1];
                for (n = 0; n < r; ++n) {
                    var s, c = a, u = o + t[e - 1];
                    for (s = 0; s < r; ++s)
                        t[e + s] = c[u + t[i + s]];
                    e += 32
                }
            }
            function he(t, e) {
                le(t, e, 4)
            }
            function fe(t, e) {
                le(t, e, 8)
            }
            function de(t, e) {
                le(t, e, 16)
            }
            function pe(t, e) {
                var r;
                for (r = 0; 16 > r; ++r)
                    n(t, e + 32 * r, t, e - 32, 16)
            }
            function ge(t, e) {
                var r;
                for (r = 16; 0 < r; --r)
                    i(t, e, t[e - 1], 16),
                    e += 32
            }
            function me(t, e, r) {
                var n;
                for (n = 0; 16 > n; ++n)
                    i(e, r + 32 * n, t, 16)
            }
            function ve(t, e) {
                var r, n = 16;
                for (r = 0; 16 > r; ++r)
                    n += t[e - 1 + 32 * r] + t[e + r - 32];
                me(n >> 5, t, e)
            }
            function be(t, e) {
                var r, n = 8;
                for (r = 0; 16 > r; ++r)
                    n += t[e - 1 + 32 * r];
                me(n >> 4, t, e)
            }
            function ye(t, e) {
                var r, n = 8;
                for (r = 0; 16 > r; ++r)
                    n += t[e + r - 32];
                me(n >> 4, t, e)
            }
            function we(t, e) {
                me(128, t, e)
            }
            function Ne(t, e, r) {
                return t + 2 * e + r + 2 >> 2
            }
            function Le(t, e) {
                var r, i = e - 32;
                i = new Uint8Array([Ne(t[i - 1], t[i + 0], t[i + 1]), Ne(t[i + 0], t[i + 1], t[i + 2]), Ne(t[i + 1], t[i + 2], t[i + 3]), Ne(t[i + 2], t[i + 3], t[i + 4])]);
                for (r = 0; 4 > r; ++r)
                    n(t, e + 32 * r, i, 0, i.length)
            }
            function Ae(t, e) {
                var r = t[e - 1]
                  , n = t[e - 1 + 32]
                  , i = t[e - 1 + 64]
                  , a = t[e - 1 + 96];
                F(t, e + 0, 16843009 * Ne(t[e - 1 - 32], r, n)),
                F(t, e + 32, 16843009 * Ne(r, n, i)),
                F(t, e + 64, 16843009 * Ne(n, i, a)),
                F(t, e + 96, 16843009 * Ne(i, a, a))
            }
            function xe(t, e) {
                var r, n = 4;
                for (r = 0; 4 > r; ++r)
                    n += t[e + r - 32] + t[e - 1 + 32 * r];
                for (n >>= 3,
                r = 0; 4 > r; ++r)
                    i(t, e + 32 * r, n, 4)
            }
            function Se(t, e) {
                var r = t[e - 1 + 0]
                  , n = t[e - 1 + 32]
                  , i = t[e - 1 + 64]
                  , a = t[e - 1 - 32]
                  , o = t[e + 0 - 32]
                  , s = t[e + 1 - 32]
                  , c = t[e + 2 - 32]
                  , u = t[e + 3 - 32];
                t[e + 0 + 96] = Ne(n, i, t[e - 1 + 96]),
                t[e + 1 + 96] = t[e + 0 + 64] = Ne(r, n, i),
                t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne(a, r, n),
                t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne(o, a, r),
                t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne(s, o, a),
                t[e + 3 + 32] = t[e + 2 + 0] = Ne(c, s, o),
                t[e + 3 + 0] = Ne(u, c, s)
            }
            function _e(t, e) {
                var r = t[e + 1 - 32]
                  , n = t[e + 2 - 32]
                  , i = t[e + 3 - 32]
                  , a = t[e + 4 - 32]
                  , o = t[e + 5 - 32]
                  , s = t[e + 6 - 32]
                  , c = t[e + 7 - 32];
                t[e + 0 + 0] = Ne(t[e + 0 - 32], r, n),
                t[e + 1 + 0] = t[e + 0 + 32] = Ne(r, n, i),
                t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne(n, i, a),
                t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne(i, a, o),
                t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne(a, o, s),
                t[e + 3 + 64] = t[e + 2 + 96] = Ne(o, s, c),
                t[e + 3 + 96] = Ne(s, c, c)
            }
            function Pe(t, e) {
                var r = t[e - 1 + 0]
                  , n = t[e - 1 + 32]
                  , i = t[e - 1 + 64]
                  , a = t[e - 1 - 32]
                  , o = t[e + 0 - 32]
                  , s = t[e + 1 - 32]
                  , c = t[e + 2 - 32]
                  , u = t[e + 3 - 32];
                t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1,
                t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1,
                t[e + 2 + 0] = t[e + 3 + 64] = s + c + 1 >> 1,
                t[e + 3 + 0] = c + u + 1 >> 1,
                t[e + 0 + 96] = Ne(i, n, r),
                t[e + 0 + 64] = Ne(n, r, a),
                t[e + 0 + 32] = t[e + 1 + 96] = Ne(r, a, o),
                t[e + 1 + 32] = t[e + 2 + 96] = Ne(a, o, s),
                t[e + 2 + 32] = t[e + 3 + 96] = Ne(o, s, c),
                t[e + 3 + 32] = Ne(s, c, u)
            }
            function ke(t, e) {
                var r = t[e + 0 - 32]
                  , n = t[e + 1 - 32]
                  , i = t[e + 2 - 32]
                  , a = t[e + 3 - 32]
                  , o = t[e + 4 - 32]
                  , s = t[e + 5 - 32]
                  , c = t[e + 6 - 32]
                  , u = t[e + 7 - 32];
                t[e + 0 + 0] = r + n + 1 >> 1,
                t[e + 1 + 0] = t[e + 0 + 64] = n + i + 1 >> 1,
                t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1,
                t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1,
                t[e + 0 + 32] = Ne(r, n, i),
                t[e + 1 + 32] = t[e + 0 + 96] = Ne(n, i, a),
                t[e + 2 + 32] = t[e + 1 + 96] = Ne(i, a, o),
                t[e + 3 + 32] = t[e + 2 + 96] = Ne(a, o, s),
                t[e + 3 + 64] = Ne(o, s, c),
                t[e + 3 + 96] = Ne(s, c, u)
            }
            function Fe(t, e) {
                var r = t[e - 1 + 0]
                  , n = t[e - 1 + 32]
                  , i = t[e - 1 + 64]
                  , a = t[e - 1 + 96];
                t[e + 0 + 0] = r + n + 1 >> 1,
                t[e + 2 + 0] = t[e + 0 + 32] = n + i + 1 >> 1,
                t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1,
                t[e + 1 + 0] = Ne(r, n, i),
                t[e + 3 + 0] = t[e + 1 + 32] = Ne(n, i, a),
                t[e + 3 + 32] = t[e + 1 + 64] = Ne(i, a, a),
                t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a
            }
            function Ie(t, e) {
                var r = t[e - 1 + 0]
                  , n = t[e - 1 + 32]
                  , i = t[e - 1 + 64]
                  , a = t[e - 1 + 96]
                  , o = t[e - 1 - 32]
                  , s = t[e + 0 - 32]
                  , c = t[e + 1 - 32]
                  , u = t[e + 2 - 32];
                t[e + 0 + 0] = t[e + 2 + 32] = r + o + 1 >> 1,
                t[e + 0 + 32] = t[e + 2 + 64] = n + r + 1 >> 1,
                t[e + 0 + 64] = t[e + 2 + 96] = i + n + 1 >> 1,
                t[e + 0 + 96] = a + i + 1 >> 1,
                t[e + 3 + 0] = Ne(s, c, u),
                t[e + 2 + 0] = Ne(o, s, c),
                t[e + 1 + 0] = t[e + 3 + 32] = Ne(r, o, s),
                t[e + 1 + 32] = t[e + 3 + 64] = Ne(n, r, o),
                t[e + 1 + 64] = t[e + 3 + 96] = Ne(i, n, r),
                t[e + 1 + 96] = Ne(a, i, n)
            }
            function Ce(t, e) {
                var r;
                for (r = 0; 8 > r; ++r)
                    n(t, e + 32 * r, t, e - 32, 8)
            }
            function je(t, e) {
                var r;
                for (r = 0; 8 > r; ++r)
                    i(t, e, t[e - 1], 8),
                    e += 32
            }
            function Oe(t, e, r) {
                var n;
                for (n = 0; 8 > n; ++n)
                    i(e, r + 32 * n, t, 8)
            }
            function Be(t, e) {
                var r, n = 8;
                for (r = 0; 8 > r; ++r)
                    n += t[e + r - 32] + t[e - 1 + 32 * r];
                Oe(n >> 4, t, e)
            }
            function Me(t, e) {
                var r, n = 4;
                for (r = 0; 8 > r; ++r)
                    n += t[e + r - 32];
                Oe(n >> 3, t, e)
            }
            function Ee(t, e) {
                var r, n = 4;
                for (r = 0; 8 > r; ++r)
                    n += t[e - 1 + 32 * r];
                Oe(n >> 3, t, e)
            }
            function qe(t, e) {
                Oe(128, t, e)
            }
            function De(t, e, r) {
                var n = t[e - r]
                  , i = t[e + 0]
                  , a = 3 * (i - n) + jn[1020 + t[e - 2 * r] - t[e + r]]
                  , o = On[112 + (a + 4 >> 3)];
                t[e - r] = Bn[255 + n + On[112 + (a + 3 >> 3)]],
                t[e + 0] = Bn[255 + i - o]
            }
            function Re(t, e, r, n) {
                var i = t[e + 0]
                  , a = t[e + r];
                return Mn[255 + t[e - 2 * r] - t[e - r]] > n || Mn[255 + a - i] > n
            }
            function Te(t, e, r, n) {
                return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n
            }
            function Ue(t, e, r, n, i) {
                var a = t[e - 3 * r]
                  , o = t[e - 2 * r]
                  , s = t[e - r]
                  , c = t[e + 0]
                  , u = t[e + r]
                  , l = t[e + 2 * r]
                  , h = t[e + 3 * r];
                return 4 * Mn[255 + s - c] + Mn[255 + o - u] > n ? 0 : Mn[255 + t[e - 4 * r] - a] <= i && Mn[255 + a - o] <= i && Mn[255 + o - s] <= i && Mn[255 + h - l] <= i && Mn[255 + l - u] <= i && Mn[255 + u - c] <= i
            }
            function ze(t, e, r, n) {
                var i = 2 * n + 1;
                for (n = 0; 16 > n; ++n)
                    Te(t, e + n, r, i) && De(t, e + n, r)
            }
            function He(t, e, r, n) {
                var i = 2 * n + 1;
                for (n = 0; 16 > n; ++n)
                    Te(t, e + n * r, 1, i) && De(t, e + n * r, 1)
            }
            function We(t, e, r, n) {
                var i;
                for (i = 3; 0 < i; --i)
                    ze(t, e += 4 * r, r, n)
            }
            function Ve(t, e, r, n) {
                var i;
                for (i = 3; 0 < i; --i)
                    He(t, e += 4, r, n)
            }
            function Ge(t, e, r, n, i, a, o, s) {
                for (a = 2 * a + 1; 0 < i--; ) {
                    if (Ue(t, e, r, a, o))
                        if (Re(t, e, r, s))
                            De(t, e, r);
                        else {
                            var c = t
                              , u = e
                              , l = r
                              , h = c[u - 2 * l]
                              , f = c[u - l]
                              , d = c[u + 0]
                              , p = c[u + l]
                              , g = c[u + 2 * l]
                              , m = 27 * (b = jn[1020 + 3 * (d - f) + jn[1020 + h - p]]) + 63 >> 7
                              , v = 18 * b + 63 >> 7
                              , b = 9 * b + 63 >> 7;
                            c[u - 3 * l] = Bn[255 + c[u - 3 * l] + b],
                            c[u - 2 * l] = Bn[255 + h + v],
                            c[u - l] = Bn[255 + f + m],
                            c[u + 0] = Bn[255 + d - m],
                            c[u + l] = Bn[255 + p - v],
                            c[u + 2 * l] = Bn[255 + g - b]
                        }
                    e += n
                }
            }
            function Ye(t, e, r, n, i, a, o, s) {
                for (a = 2 * a + 1; 0 < i--; ) {
                    if (Ue(t, e, r, a, o))
                        if (Re(t, e, r, s))
                            De(t, e, r);
                        else {
                            var c = t
                              , u = e
                              , l = r
                              , h = c[u - l]
                              , f = c[u + 0]
                              , d = c[u + l]
                              , p = On[112 + ((g = 3 * (f - h)) + 4 >> 3)]
                              , g = On[112 + (g + 3 >> 3)]
                              , m = p + 1 >> 1;
                            c[u - 2 * l] = Bn[255 + c[u - 2 * l] + m],
                            c[u - l] = Bn[255 + h + g],
                            c[u + 0] = Bn[255 + f - p],
                            c[u + l] = Bn[255 + d - m]
                        }
                    e += n
                }
            }
            function Je(t, e, r, n, i, a) {
                Ge(t, e, r, 1, 16, n, i, a)
            }
            function Xe(t, e, r, n, i, a) {
                Ge(t, e, 1, r, 16, n, i, a)
            }
            function Ke(t, e, r, n, i, a) {
                var o;
                for (o = 3; 0 < o; --o)
                    Ye(t, e += 4 * r, r, 1, 16, n, i, a)
            }
            function Ze(t, e, r, n, i, a) {
                var o;
                for (o = 3; 0 < o; --o)
                    Ye(t, e += 4, 1, r, 16, n, i, a)
            }
            function $e(t, e, r, n, i, a, o, s) {
                Ge(t, e, i, 1, 8, a, o, s),
                Ge(r, n, i, 1, 8, a, o, s)
            }
            function Qe(t, e, r, n, i, a, o, s) {
                Ge(t, e, 1, i, 8, a, o, s),
                Ge(r, n, 1, i, 8, a, o, s)
            }
            function tr(t, e, r, n, i, a, o, s) {
                Ye(t, e + 4 * i, i, 1, 8, a, o, s),
                Ye(r, n + 4 * i, i, 1, 8, a, o, s)
            }
            function er(t, e, r, n, i, a, o, s) {
                Ye(t, e + 4, 1, i, 8, a, o, s),
                Ye(r, n + 4, 1, i, 8, a, o, s)
            }
            function rr() {
                this.ba = new ot,
                this.ec = [],
                this.cc = [],
                this.Mc = [],
                this.Dc = this.Nc = this.dc = this.fc = 0,
                this.Oa = new ct,
                this.memory = 0,
                this.Ib = "OutputFunc",
                this.Jb = "OutputAlphaFunc",
                this.Nd = "OutputRowFunc"
            }
            function nr() {
                this.data = [],
                this.offset = this.kd = this.ha = this.w = 0,
                this.na = [],
                this.xa = this.gb = this.Ja = this.Sa = this.P = 0
            }
            function ir() {
                this.nc = this.Ea = this.b = this.hc = 0,
                this.K = [],
                this.w = 0
            }
            function ar() {
                this.ua = 0,
                this.Wa = new M,
                this.vb = new M,
                this.md = this.xc = this.wc = 0,
                this.vc = [],
                this.Wb = 0,
                this.Ya = new d,
                this.yc = new h
            }
            function or() {
                this.xb = this.a = 0,
                this.l = new Gt,
                this.ca = new ot,
                this.V = [],
                this.Ba = 0,
                this.Ta = [],
                this.Ua = 0,
                this.m = new N,
                this.Pb = 0,
                this.wd = new N,
                this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0,
                this.s = new ar,
                this.ab = 0,
                this.gc = o(4, ir),
                this.Oc = 0
            }
            function sr() {
                this.Lc = this.Z = this.$a = this.i = this.c = 0,
                this.l = new Gt,
                this.ic = 0,
                this.ca = [],
                this.tb = 0,
                this.qd = null,
                this.rd = 0
            }
            function cr(t, e, r, n, i, a, o) {
                for (t = null == t ? 0 : t[e + 0],
                e = 0; e < o; ++e)
                    i[a + e] = t + r[n + e] & 255,
                    t = i[a + e]
            }
            function ur(t, e, r, n, i, a, o) {
                var s;
                if (null == t)
                    cr(null, null, r, n, i, a, o);
                else
                    for (s = 0; s < o; ++s)
                        i[a + s] = t[e + s] + r[n + s] & 255
            }
            function lr(t, e, r, n, i, a, o) {
                if (null == t)
                    cr(null, null, r, n, i, a, o);
                else {
                    var s, c = t[e + 0], u = c, l = c;
                    for (s = 0; s < o; ++s)
                        u = l + (c = t[e + s]) - u,
                        l = r[n + s] + (-256 & u ? 0 > u ? 0 : 255 : u) & 255,
                        u = c,
                        i[a + s] = l
                }
            }
            function hr(t, r, i, o) {
                var s = r.width
                  , c = r.o;
                if (e(null != t && null != r),
                0 > i || 0 >= o || i + o > c)
                    return null;
                if (!t.Cc) {
                    if (null == t.ga) {
                        var u;
                        if (t.ga = new sr,
                        (u = null == t.ga) || (u = r.width * r.o,
                        e(0 == t.Gb.length),
                        t.Gb = a(u),
                        t.Uc = 0,
                        null == t.Gb ? u = 0 : (t.mb = t.Gb,
                        t.nb = t.Uc,
                        t.rc = null,
                        u = 1),
                        u = !u),
                        !u) {
                            u = t.ga;
                            var l = t.Fa
                              , h = t.P
                              , f = t.qc
                              , d = t.mb
                              , p = t.nb
                              , g = h + 1
                              , m = f - 1
                              , b = u.l;
                            if (e(null != l && null != d && null != r),
                            mi[0] = null,
                            mi[1] = cr,
                            mi[2] = ur,
                            mi[3] = lr,
                            u.ca = d,
                            u.tb = p,
                            u.c = r.width,
                            u.i = r.height,
                            e(0 < u.c && 0 < u.i),
                            1 >= f)
                                r = 0;
                            else if (u.$a = l[h + 0] >> 0 & 3,
                            u.Z = l[h + 0] >> 2 & 3,
                            u.Lc = l[h + 0] >> 4 & 3,
                            h = l[h + 0] >> 6 & 3,
                            0 > u.$a || 1 < u.$a || 4 <= u.Z || 1 < u.Lc || h)
                                r = 0;
                            else if (b.put = dt,
                            b.ac = ft,
                            b.bc = pt,
                            b.ma = u,
                            b.width = r.width,
                            b.height = r.height,
                            b.Da = r.Da,
                            b.v = r.v,
                            b.va = r.va,
                            b.j = r.j,
                            b.o = r.o,
                            u.$a)
                                t: {
                                    e(1 == u.$a),
                                    r = kt();
                                    e: for (; ; ) {
                                        if (null == r) {
                                            r = 0;
                                            break t
                                        }
                                        if (e(null != u),
                                        u.mc = r,
                                        r.c = u.c,
                                        r.i = u.i,
                                        r.l = u.l,
                                        r.l.ma = u,
                                        r.l.width = u.c,
                                        r.l.height = u.i,
                                        r.a = 0,
                                        v(r.m, l, g, m),
                                        !Ft(u.c, u.i, 1, r, null))
                                            break e;
                                        if (1 == r.ab && 3 == r.gc[0].hc && At(r.s) ? (u.ic = 1,
                                        l = r.c * r.i,
                                        r.Ta = null,
                                        r.Ua = 0,
                                        r.V = a(l),
                                        r.Ba = 0,
                                        null == r.V ? (r.a = 1,
                                        r = 0) : r = 1) : (u.ic = 0,
                                        r = It(r, u.c)),
                                        !r)
                                            break e;
                                        r = 1;
                                        break t
                                    }
                                    u.mc = null,
                                    r = 0
                                }
                            else
                                r = m >= u.c * u.i;
                            u = !r
                        }
                        if (u)
                            return null;
                        1 != t.ga.Lc ? t.Ga = 0 : o = c - i
                    }
                    e(null != t.ga),
                    e(i + o <= c);
                    t: {
                        if (r = (l = t.ga).c,
                        c = l.l.o,
                        0 == l.$a) {
                            if (g = t.rc,
                            m = t.Vc,
                            b = t.Fa,
                            h = t.P + 1 + i * r,
                            f = t.mb,
                            d = t.nb + i * r,
                            e(h <= t.P + t.qc),
                            0 != l.Z)
                                for (e(null != mi[l.Z]),
                                u = 0; u < o; ++u)
                                    mi[l.Z](g, m, b, h, f, d, r),
                                    g = f,
                                    m = d,
                                    d += r,
                                    h += r;
                            else
                                for (u = 0; u < o; ++u)
                                    n(f, d, b, h, r),
                                    g = f,
                                    m = d,
                                    d += r,
                                    h += r;
                            t.rc = g,
                            t.Vc = m
                        } else {
                            if (e(null != l.mc),
                            r = i + o,
                            e(null != (u = l.mc)),
                            e(r <= u.i),
                            u.C >= r)
                                r = 1;
                            else if (l.ic || mr(),
                            l.ic) {
                                l = u.V,
                                g = u.Ba,
                                m = u.c;
                                var y = u.i
                                  , w = (b = 1,
                                h = u.$ / m,
                                f = u.$ % m,
                                d = u.m,
                                p = u.s,
                                u.$)
                                  , N = m * y
                                  , L = m * r
                                  , x = p.wc
                                  , _ = w < L ? wt(p, f, h) : null;
                                e(w <= N),
                                e(r <= y),
                                e(At(p));
                                e: for (; ; ) {
                                    for (; !d.h && w < L; ) {
                                        if (f & x || (_ = wt(p, f, h)),
                                        e(null != _),
                                        S(d),
                                        256 > (y = bt(_.G[0], _.H[0], d)))
                                            l[g + w] = y,
                                            ++w,
                                            ++f >= m && (f = 0,
                                            ++h <= r && !(h % 16) && St(u, h));
                                        else {
                                            if (!(280 > y)) {
                                                b = 0;
                                                break e
                                            }
                                            y = mt(y - 256, d);
                                            var P, k = bt(_.G[4], _.H[4], d);
                                            if (S(d),
                                            !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {
                                                b = 0;
                                                break e
                                            }
                                            for (P = 0; P < y; ++P)
                                                l[g + w + P] = l[g + w + P - k];
                                            for (w += y,
                                            f += y; f >= m; )
                                                f -= m,
                                                ++h <= r && !(h % 16) && St(u, h);
                                            w < L && f & x && (_ = wt(p, f, h))
                                        }
                                        e(d.h == A(d))
                                    }
                                    St(u, h > r ? r : h);
                                    break e
                                }
                                !b || d.h && w < N ? (b = 0,
                                u.a = d.h ? 5 : 3) : u.$ = w,
                                r = b
                            } else
                                r = _t(u, u.V, u.Ba, u.c, u.i, r, Ct);
                            if (!r) {
                                o = 0;
                                break t
                            }
                        }
                        i + o >= c && (t.Cc = 1),
                        o = 1
                    }
                    if (!o)
                        return null;
                    if (t.Cc && (null != (o = t.ga) && (o.mc = null),
                    t.ga = null,
                    0 < t.Ga))
                        return alert("todo:WebPDequantizeLevels"),
                        null
                }
                return t.nb + i * s
            }
            function fr(t, e, r, n, i, a) {
                for (; 0 < i--; ) {
                    var o, s = t, c = e + (r ? 1 : 0), u = t, l = e + (r ? 0 : 3);
                    for (o = 0; o < n; ++o) {
                        var h = u[l + 4 * o];
                        255 != h && (h *= 32897,
                        s[c + 4 * o + 0] = s[c + 4 * o + 0] * h >> 23,
                        s[c + 4 * o + 1] = s[c + 4 * o + 1] * h >> 23,
                        s[c + 4 * o + 2] = s[c + 4 * o + 2] * h >> 23)
                    }
                    e += a
                }
            }
            function dr(t, e, r, n, i) {
                for (; 0 < n--; ) {
                    var a;
                    for (a = 0; a < r; ++a) {
                        var o = t[e + 2 * a + 0]
                          , s = 15 & (u = t[e + 2 * a + 1])
                          , c = 4369 * s
                          , u = (240 & u | u >> 4) * c >> 16;
                        t[e + 2 * a + 0] = (240 & o | o >> 4) * c >> 16 & 240 | (15 & o | o << 4) * c >> 16 >> 4 & 15,
                        t[e + 2 * a + 1] = 240 & u | s
                    }
                    e += i
                }
            }
            function pr(t, e, r, n, i, a, o, s) {
                var c, u, l = 255;
                for (u = 0; u < i; ++u) {
                    for (c = 0; c < n; ++c) {
                        var h = t[e + c];
                        a[o + 4 * c] = h,
                        l &= h
                    }
                    e += r,
                    o += s
                }
                return 255 != l
            }
            function gr(t, e, r, n, i) {
                var a;
                for (a = 0; a < i; ++a)
                    r[n + a] = t[e + a] >> 8
            }
            function mr() {
                An = fr,
                xn = dr,
                Sn = pr,
                _n = gr
            }
            function vr(r, n, i) {
                t[r] = function(t, r, a, o, s, c, u, l, h, f, d, p, g, m, v, b, y) {
                    var w, N = y - 1 >> 1, L = s[c + 0] | u[l + 0] << 16, A = h[f + 0] | d[p + 0] << 16;
                    e(null != t);
                    var x = 3 * L + A + 131074 >> 2;
                    for (n(t[r + 0], 255 & x, x >> 16, g, m),
                    null != a && (x = 3 * A + L + 131074 >> 2,
                    n(a[o + 0], 255 & x, x >> 16, v, b)),
                    w = 1; w <= N; ++w) {
                        var S = s[c + w] | u[l + w] << 16
                          , _ = h[f + w] | d[p + w] << 16
                          , P = L + S + A + _ + 524296
                          , k = P + 2 * (S + A) >> 3;
                        x = k + L >> 1,
                        L = (P = P + 2 * (L + _) >> 3) + S >> 1,
                        n(t[r + 2 * w - 1], 255 & x, x >> 16, g, m + (2 * w - 1) * i),
                        n(t[r + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i),
                        null != a && (x = P + A >> 1,
                        L = k + _ >> 1,
                        n(a[o + 2 * w - 1], 255 & x, x >> 16, v, b + (2 * w - 1) * i),
                        n(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)),
                        L = S,
                        A = _
                    }
                    1 & y || (x = 3 * L + A + 131074 >> 2,
                    n(t[r + y - 1], 255 & x, x >> 16, g, m + (y - 1) * i),
                    null != a && (x = 3 * A + L + 131074 >> 2,
                    n(a[o + y - 1], 255 & x, x >> 16, v, b + (y - 1) * i)))
                }
            }
            function br() {
                vi[En] = bi,
                vi[qn] = wi,
                vi[Dn] = yi,
                vi[Rn] = Ni,
                vi[Tn] = Li,
                vi[Un] = Ai,
                vi[zn] = xi,
                vi[Hn] = wi,
                vi[Wn] = Ni,
                vi[Vn] = Li,
                vi[Gn] = Ai
            }
            function yr(t) {
                return t & ~Ii ? 0 > t ? 0 : 255 : t >> Fi
            }
            function wr(t, e) {
                return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234)
            }
            function Nr(t, e, r) {
                return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708)
            }
            function Lr(t, e) {
                return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685)
            }
            function Ar(t, e, r, n, i) {
                n[i + 0] = wr(t, r),
                n[i + 1] = Nr(t, e, r),
                n[i + 2] = Lr(t, e)
            }
            function xr(t, e, r, n, i) {
                n[i + 0] = Lr(t, e),
                n[i + 1] = Nr(t, e, r),
                n[i + 2] = wr(t, r)
            }
            function Sr(t, e, r, n, i) {
                var a = Nr(t, e, r);
                e = a << 3 & 224 | Lr(t, e) >> 3,
                n[i + 0] = 248 & wr(t, r) | a >> 5,
                n[i + 1] = e
            }
            function _r(t, e, r, n, i) {
                var a = 240 & Lr(t, e) | 15;
                n[i + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4,
                n[i + 1] = a
            }
            function Pr(t, e, r, n, i) {
                n[i + 0] = 255,
                Ar(t, e, r, n, i + 1)
            }
            function kr(t, e, r, n, i) {
                xr(t, e, r, n, i),
                n[i + 3] = 255
            }
            function Fr(t, e, r, n, i) {
                Ar(t, e, r, n, i),
                n[i + 3] = 255
            }
            function Vt(t, e) {
                return 0 > t ? 0 : t > e ? e : t
            }
            function Ir(e, r, n) {
                t[e] = function(t, e, i, a, o, s, c, u, l) {
                    for (var h = u + (-2 & l) * n; u != h; )
                        r(t[e + 0], i[a + 0], o[s + 0], c, u),
                        r(t[e + 1], i[a + 0], o[s + 0], c, u + n),
                        e += 2,
                        ++a,
                        ++s,
                        u += 2 * n;
                    1 & l && r(t[e + 0], i[a + 0], o[s + 0], c, u)
                }
            }
            function Cr(t, e, r) {
                return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r
            }
            function jr(t, e, r, n, i) {
                switch (t >>> 30) {
                case 3:
                    on(e, r, n, i, 0);
                    break;
                case 2:
                    sn(e, r, n, i);
                    break;
                case 1:
                    un(e, r, n, i)
                }
            }
            function Or(t, e) {
                var r, a, o = e.M, s = e.Nb, c = t.oc, u = t.pc + 40, l = t.oc, h = t.pc + 584, f = t.oc, d = t.pc + 600;
                for (r = 0; 16 > r; ++r)
                    c[u + 32 * r - 1] = 129;
                for (r = 0; 8 > r; ++r)
                    l[h + 32 * r - 1] = 129,
                    f[d + 32 * r - 1] = 129;
                for (0 < o ? c[u - 1 - 32] = l[h - 1 - 32] = f[d - 1 - 32] = 129 : (i(c, u - 32 - 1, 127, 21),
                i(l, h - 32 - 1, 127, 9),
                i(f, d - 32 - 1, 127, 9)),
                a = 0; a < t.za; ++a) {
                    var p = e.ya[e.aa + a];
                    if (0 < a) {
                        for (r = -1; 16 > r; ++r)
                            n(c, u + 32 * r - 4, c, u + 32 * r + 12, 4);
                        for (r = -1; 8 > r; ++r)
                            n(l, h + 32 * r - 4, l, h + 32 * r + 4, 4),
                            n(f, d + 32 * r - 4, f, d + 32 * r + 4, 4)
                    }
                    var g = t.Gd
                      , m = t.Hd + a
                      , v = p.ad
                      , b = p.Hc;
                    if (0 < o && (n(c, u - 32, g[m].y, 0, 16),
                    n(l, h - 32, g[m].f, 0, 8),
                    n(f, d - 32, g[m].ea, 0, 8)),
                    p.Za) {
                        var y = c
                          , w = u - 32 + 16;
                        for (0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : n(y, w, g[m + 1].y, 0, 4)),
                        r = 0; 4 > r; r++)
                            y[w + 128 + r] = y[w + 256 + r] = y[w + 384 + r] = y[w + 0 + r];
                        for (r = 0; 16 > r; ++r,
                        b <<= 2)
                            y = c,
                            w = u + Di[r],
                            fi[p.Ob[r]](y, w),
                            jr(b, v, 16 * +r, y, w)
                    } else if (y = Cr(a, o, p.Ob[0]),
                    hi[y](c, u),
                    0 != b)
                        for (r = 0; 16 > r; ++r,
                        b <<= 2)
                            jr(b, v, 16 * +r, c, u + Di[r]);
                    for (r = p.Gc,
                    y = Cr(a, o, p.Dd),
                    di[y](l, h),
                    di[y](f, d),
                    b = v,
                    y = l,
                    w = h,
                    255 & (p = r >> 0) && (170 & p ? cn(b, 256, y, w) : ln(b, 256, y, w)),
                    p = f,
                    b = d,
                    255 & (r >>= 8) && (170 & r ? cn(v, 320, p, b) : ln(v, 320, p, b)),
                    o < t.Ub - 1 && (n(g[m].y, 0, c, u + 480, 16),
                    n(g[m].f, 0, l, h + 224, 8),
                    n(g[m].ea, 0, f, d + 224, 8)),
                    r = 8 * s * t.B,
                    g = t.sa,
                    m = t.ta + 16 * a + 16 * s * t.R,
                    v = t.qa,
                    p = t.ra + 8 * a + r,
                    b = t.Ha,
                    y = t.Ia + 8 * a + r,
                    r = 0; 16 > r; ++r)
                        n(g, m + r * t.R, c, u + 32 * r, 16);
                    for (r = 0; 8 > r; ++r)
                        n(v, p + r * t.B, l, h + 32 * r, 8),
                        n(b, y + r * t.B, f, d + 32 * r, 8)
                }
            }
            function Br(t, n, i, a, o, s, c, u, l) {
                var h = [0]
                  , f = [0]
                  , d = 0
                  , p = null != l ? l.kd : 0
                  , g = null != l ? l : new nr;
                if (null == t || 12 > i)
                    return 7;
                g.data = t,
                g.w = n,
                g.ha = i,
                n = [n],
                i = [i],
                g.gb = [g.gb];
                t: {
                    var m = n
                      , b = i
                      , y = g.gb;
                    if (e(null != t),
                    e(null != b),
                    e(null != y),
                    y[0] = 0,
                    12 <= b[0] && !r(t, m[0], "RIFF")) {
                        if (r(t, m[0] + 8, "WEBP")) {
                            y = 3;
                            break t
                        }
                        var w = j(t, m[0] + 4);
                        if (12 > w || 4294967286 < w) {
                            y = 3;
                            break t
                        }
                        if (p && w > b[0] - 8) {
                            y = 7;
                            break t
                        }
                        y[0] = w,
                        m[0] += 12,
                        b[0] -= 12
                    }
                    y = 0
                }
                if (0 != y)
                    return y;
                for (w = 0 < g.gb[0],
                i = i[0]; ; ) {
                    t: {
                        var L = t;
                        b = n,
                        y = i;
                        var A = h
                          , x = f
                          , S = m = [0];
                        if ((k = d = [d])[0] = 0,
                        8 > y[0])
                            y = 7;
                        else {
                            if (!r(L, b[0], "VP8X")) {
                                if (10 != j(L, b[0] + 4)) {
                                    y = 3;
                                    break t
                                }
                                if (18 > y[0]) {
                                    y = 7;
                                    break t
                                }
                                var _ = j(L, b[0] + 8)
                                  , P = 1 + C(L, b[0] + 12);
                                if (2147483648 <= P * (L = 1 + C(L, b[0] + 15))) {
                                    y = 3;
                                    break t
                                }
                                null != S && (S[0] = _),
                                null != A && (A[0] = P),
                                null != x && (x[0] = L),
                                b[0] += 18,
                                y[0] -= 18,
                                k[0] = 1
                            }
                            y = 0
                        }
                    }
                    if (d = d[0],
                    m = m[0],
                    0 != y)
                        return y;
                    if (b = !!(2 & m),
                    !w && d)
                        return 3;
                    if (null != s && (s[0] = !!(16 & m)),
                    null != c && (c[0] = b),
                    null != u && (u[0] = 0),
                    c = h[0],
                    m = f[0],
                    d && b && null == l) {
                        y = 0;
                        break
                    }
                    if (4 > i) {
                        y = 7;
                        break
                    }
                    if (w && d || !w && !d && !r(t, n[0], "ALPH")) {
                        i = [i],
                        g.na = [g.na],
                        g.P = [g.P],
                        g.Sa = [g.Sa];
                        t: {
                            _ = t,
                            y = n,
                            w = i;
                            var k = g.gb;
                            A = g.na,
                            x = g.P,
                            S = g.Sa;
                            P = 22,
                            e(null != _),
                            e(null != w),
                            L = y[0];
                            var F = w[0];
                            for (e(null != A),
                            e(null != S),
                            A[0] = null,
                            x[0] = null,
                            S[0] = 0; ; ) {
                                if (y[0] = L,
                                w[0] = F,
                                8 > F) {
                                    y = 7;
                                    break t
                                }
                                var I = j(_, L + 4);
                                if (4294967286 < I) {
                                    y = 3;
                                    break t
                                }
                                var O = 8 + I + 1 & -2;
                                if (P += O,
                                0 < k && P > k) {
                                    y = 3;
                                    break t
                                }
                                if (!r(_, L, "VP8 ") || !r(_, L, "VP8L")) {
                                    y = 0;
                                    break t
                                }
                                if (F[0] < O) {
                                    y = 7;
                                    break t
                                }
                                r(_, L, "ALPH") || (A[0] = _,
                                x[0] = L + 8,
                                S[0] = I),
                                L += O,
                                F -= O
                            }
                        }
                        if (i = i[0],
                        g.na = g.na[0],
                        g.P = g.P[0],
                        g.Sa = g.Sa[0],
                        0 != y)
                            break
                    }
                    i = [i],
                    g.Ja = [g.Ja],
                    g.xa = [g.xa];
                    t: if (k = t,
                    y = n,
                    w = i,
                    A = g.gb[0],
                    x = g.Ja,
                    S = g.xa,
                    _ = y[0],
                    L = !r(k, _, "VP8 "),
                    P = !r(k, _, "VP8L"),
                    e(null != k),
                    e(null != w),
                    e(null != x),
                    e(null != S),
                    8 > w[0])
                        y = 7;
                    else {
                        if (L || P) {
                            if (k = j(k, _ + 4),
                            12 <= A && k > A - 12) {
                                y = 3;
                                break t
                            }
                            if (p && k > w[0] - 8) {
                                y = 7;
                                break t
                            }
                            x[0] = k,
                            y[0] += 8,
                            w[0] -= 8,
                            S[0] = P
                        } else
                            S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5),
                            x[0] = w[0];
                        y = 0
                    }
                    if (i = i[0],
                    g.Ja = g.Ja[0],
                    g.xa = g.xa[0],
                    n = n[0],
                    0 != y)
                        break;
                    if (4294967286 < g.Ja)
                        return 3;
                    if (null == u || b || (u[0] = g.xa ? 2 : 1),
                    c = [c],
                    m = [m],
                    g.xa) {
                        if (5 > i) {
                            y = 7;
                            break
                        }
                        u = c,
                        p = m,
                        b = s,
                        null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[n + 0] && !(t[n + 4] >> 5) ? (w = [0],
                        k = [0],
                        A = [0],
                        v(x = new N, t, n, i),
                        gt(x, w, k, A) ? (null != u && (u[0] = w[0]),
                        null != p && (p[0] = k[0]),
                        null != b && (b[0] = A[0]),
                        t = 1) : t = 0) : t = 0
                    } else {
                        if (10 > i) {
                            y = 7;
                            break
                        }
                        u = m,
                        null == t || 10 > i || !Xt(t, n + 3, i - 3) ? t = 0 : (p = t[n + 0] | t[n + 1] << 8 | t[n + 2] << 16,
                        b = 16383 & (t[n + 7] << 8 | t[n + 6]),
                        t = 16383 & (t[n + 9] << 8 | t[n + 8]),
                        1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (c && (c[0] = b),
                        u && (u[0] = t),
                        t = 1))
                    }
                    if (!t)
                        return 3;
                    if (c = c[0],
                    m = m[0],
                    d && (h[0] != c || f[0] != m))
                        return 3;
                    null != l && (l[0] = g,
                    l.offset = n - l.w,
                    e(4294967286 > n - l.w),
                    e(l.offset == l.ha - i));
                    break
                }
                return 0 == y || 7 == y && d && null == l ? (null != s && (s[0] |= null != g.na && 0 < g.na.length),
                null != a && (a[0] = c),
                null != o && (o[0] = m),
                0) : y
            }
            function Mr(t, e, r) {
                var n = e.width
                  , i = e.height
                  , a = 0
                  , o = 0
                  , s = n
                  , c = i;
                if (e.Da = null != t && 0 < t.Da,
                e.Da && (s = t.cd,
                c = t.bd,
                a = t.v,
                o = t.j,
                11 > r || (a &= -2,
                o &= -2),
                0 > a || 0 > o || 0 >= s || 0 >= c || a + s > n || o + c > i))
                    return 0;
                if (e.v = a,
                e.j = o,
                e.va = a + s,
                e.o = o + c,
                e.U = s,
                e.T = c,
                e.da = null != t && 0 < t.da,
                e.da) {
                    if (!E(s, c, r = [t.ib], a = [t.hb]))
                        return 0;
                    e.ib = r[0],
                    e.hb = a[0]
                }
                return e.ob = null != t && t.ob,
                e.Kb = null == t || !t.Sd,
                e.da && (e.ob = e.ib < 3 * n / 4 && e.hb < 3 * i / 4,
                e.Kb = 0),
                1
            }
            function Er(t) {
                if (null == t)
                    return 2;
                if (11 > t.S) {
                    var e = t.f.RGBA;
                    e.fb += (t.height - 1) * e.A,
                    e.A = -e.A
                } else
                    e = t.f.kb,
                    t = t.height,
                    e.O += (t - 1) * e.fa,
                    e.fa = -e.fa,
                    e.N += (t - 1 >> 1) * e.Ab,
                    e.Ab = -e.Ab,
                    e.W += (t - 1 >> 1) * e.Db,
                    e.Db = -e.Db,
                    null != e.F && (e.J += (t - 1) * e.lb,
                    e.lb = -e.lb);
                return 0
            }
            function qr(t, e, r, n) {
                if (null == n || 0 >= t || 0 >= e)
                    return 2;
                if (null != r) {
                    if (r.Da) {
                        var i = r.cd
                          , o = r.bd
                          , s = -2 & r.v
                          , c = -2 & r.j;
                        if (0 > s || 0 > c || 0 >= i || 0 >= o || s + i > t || c + o > e)
                            return 2;
                        t = i,
                        e = o
                    }
                    if (r.da) {
                        if (!E(t, e, i = [r.ib], o = [r.hb]))
                            return 2;
                        t = i[0],
                        e = o[0]
                    }
                }
                n.width = t,
                n.height = e;
                t: {
                    var u = n.width
                      , l = n.height;
                    if (t = n.S,
                    0 >= u || 0 >= l || !(t >= En && 13 > t))
                        t = 2;
                    else {
                        if (0 >= n.Rd && null == n.sd) {
                            s = o = i = e = 0;
                            var h = (c = u * zi[t]) * l;
                            if (11 > t || (o = (l + 1) / 2 * (e = (u + 1) / 2),
                            12 == t && (s = (i = u) * l)),
                            null == (l = a(h + 2 * o + s))) {
                                t = 1;
                                break t
                            }
                            n.sd = l,
                            11 > t ? ((u = n.f.RGBA).eb = l,
                            u.fb = 0,
                            u.A = c,
                            u.size = h) : ((u = n.f.kb).y = l,
                            u.O = 0,
                            u.fa = c,
                            u.Fd = h,
                            u.f = l,
                            u.N = 0 + h,
                            u.Ab = e,
                            u.Cd = o,
                            u.ea = l,
                            u.W = 0 + h + o,
                            u.Db = e,
                            u.Ed = o,
                            12 == t && (u.F = l,
                            u.J = 0 + h + 2 * o),
                            u.Tc = s,
                            u.lb = i)
                        }
                        if (e = 1,
                        i = n.S,
                        o = n.width,
                        s = n.height,
                        i >= En && 13 > i)
                            if (11 > i)
                                t = n.f.RGBA,
                                e &= (c = Math.abs(t.A)) * (s - 1) + o <= t.size,
                                e &= c >= o * zi[i],
                                e &= null != t.eb;
                            else {
                                t = n.f.kb,
                                c = (o + 1) / 2,
                                h = (s + 1) / 2,
                                u = Math.abs(t.fa);
                                l = Math.abs(t.Ab);
                                var f = Math.abs(t.Db)
                                  , d = Math.abs(t.lb)
                                  , p = d * (s - 1) + o;
                                e &= u * (s - 1) + o <= t.Fd,
                                e &= l * (h - 1) + c <= t.Cd,
                                e = (e &= f * (h - 1) + c <= t.Ed) & u >= o & l >= c & f >= c,
                                e &= null != t.y,
                                e &= null != t.f,
                                e &= null != t.ea,
                                12 == i && (e &= d >= o,
                                e &= p <= t.Tc,
                                e &= null != t.F)
                            }
                        else
                            e = 0;
                        t = e ? 0 : 2
                    }
                }
                return 0 != t || null != r && r.fd && (t = Er(n)),
                t
            }
            var Dr = 64
              , Rr = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215]
              , Tr = 24
              , Ur = 32
              , zr = 8
              , Hr = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
            R("Predictor0", "PredictorAdd0"),
            t.Predictor0 = function() {
                return 4278190080
            }
            ,
            t.Predictor1 = function(t) {
                return t
            }
            ,
            t.Predictor2 = function(t, e, r) {
                return e[r + 0]
            }
            ,
            t.Predictor3 = function(t, e, r) {
                return e[r + 1]
            }
            ,
            t.Predictor4 = function(t, e, r) {
                return e[r - 1]
            }
            ,
            t.Predictor5 = function(t, e, r) {
                return U(U(t, e[r + 1]), e[r + 0])
            }
            ,
            t.Predictor6 = function(t, e, r) {
                return U(t, e[r - 1])
            }
            ,
            t.Predictor7 = function(t, e, r) {
                return U(t, e[r + 0])
            }
            ,
            t.Predictor8 = function(t, e, r) {
                return U(e[r - 1], e[r + 0])
            }
            ,
            t.Predictor9 = function(t, e, r) {
                return U(e[r + 0], e[r + 1])
            }
            ,
            t.Predictor10 = function(t, e, r) {
                return U(U(t, e[r - 1]), U(e[r + 0], e[r + 1]))
            }
            ,
            t.Predictor11 = function(t, e, r) {
                var n = e[r + 0];
                return 0 >= W(n >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + W(n >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W(n >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W(255 & n, 255 & t, 255 & e) ? n : t
            }
            ,
            t.Predictor12 = function(t, e, r) {
                var n = e[r + 0];
                return (z((t >> 24 & 255) + (n >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z((t >> 16 & 255) + (n >> 16 & 255) - (e >> 16 & 255)) << 16 | z((t >> 8 & 255) + (n >> 8 & 255) - (e >> 8 & 255)) << 8 | z((255 & t) + (255 & n) - (255 & e))) >>> 0
            }
            ,
            t.Predictor13 = function(t, e, r) {
                var n = e[r - 1];
                return (H((t = U(t, e[r + 0])) >> 24 & 255, n >> 24 & 255) << 24 | H(t >> 16 & 255, n >> 16 & 255) << 16 | H(t >> 8 & 255, n >> 8 & 255) << 8 | H(t >> 0 & 255, n >> 0 & 255)) >>> 0
            }
            ;
            var Wr = t.PredictorAdd0;
            t.PredictorAdd1 = V,
            R("Predictor2", "PredictorAdd2"),
            R("Predictor3", "PredictorAdd3"),
            R("Predictor4", "PredictorAdd4"),
            R("Predictor5", "PredictorAdd5"),
            R("Predictor6", "PredictorAdd6"),
            R("Predictor7", "PredictorAdd7"),
            R("Predictor8", "PredictorAdd8"),
            R("Predictor9", "PredictorAdd9"),
            R("Predictor10", "PredictorAdd10"),
            R("Predictor11", "PredictorAdd11"),
            R("Predictor12", "PredictorAdd12"),
            R("Predictor13", "PredictorAdd13");
            var Vr = t.PredictorAdd2;
            X("ColorIndexInverseTransform", "MapARGB", "32b", (function(t) {
                return t >> 8 & 255
            }
            ), (function(t) {
                return t
            }
            )),
            X("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", (function(t) {
                return t
            }
            ), (function(t) {
                return t >> 8 & 255
            }
            ));
            var Gr, Yr = t.ColorIndexInverseTransform, Jr = t.MapARGB, Xr = t.VP8LColorIndexInverseTransformAlpha, Kr = t.MapAlpha, Zr = t.VP8LPredictorsAdd = [];
            Zr.length = 16,
            (t.VP8LPredictors = []).length = 16,
            (t.VP8LPredictorsAdd_C = []).length = 16,
            (t.VP8LPredictors_C = []).length = 16;
            var $r, Qr, tn, en, rn, nn, an, on, sn, cn, un, ln, hn, fn, dn, pn, gn, mn, vn, bn, yn, wn, Nn, Ln, An, xn, Sn, _n, Pn = a(511), kn = a(2041), Fn = a(225), In = a(767), Cn = 0, jn = kn, On = Fn, Bn = In, Mn = Pn, En = 0, qn = 1, Dn = 2, Rn = 3, Tn = 4, Un = 5, zn = 6, Hn = 7, Wn = 8, Vn = 9, Gn = 10, Yn = [2, 3, 7], Jn = [3, 3, 11], Xn = [280, 256, 256, 256, 40], Kn = [0, 1, 1, 1, 0], Zn = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], $n = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112], Qn = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004], ti = 8, ei = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157], ri = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284], ni = null, ii = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]], ai = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15], oi = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9], si = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]], ci = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]], ui = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]], li = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0], hi = [], fi = [], di = [], pi = 1, gi = 2, mi = [], vi = [];
            vr("UpsampleRgbLinePair", Ar, 3),
            vr("UpsampleBgrLinePair", xr, 3),
            vr("UpsampleRgbaLinePair", Fr, 4),
            vr("UpsampleBgraLinePair", kr, 4),
            vr("UpsampleArgbLinePair", Pr, 4),
            vr("UpsampleRgba4444LinePair", _r, 2),
            vr("UpsampleRgb565LinePair", Sr, 2);
            var bi = t.UpsampleRgbLinePair
              , yi = t.UpsampleBgrLinePair
              , wi = t.UpsampleRgbaLinePair
              , Ni = t.UpsampleBgraLinePair
              , Li = t.UpsampleArgbLinePair
              , Ai = t.UpsampleRgba4444LinePair
              , xi = t.UpsampleRgb565LinePair
              , Si = 16
              , _i = 1 << Si - 1
              , Pi = -227
              , ki = 482
              , Fi = 6
              , Ii = (256 << Fi) - 1
              , Ci = 0
              , ji = a(256)
              , Oi = a(256)
              , Bi = a(256)
              , Mi = a(256)
              , Ei = a(ki - Pi)
              , qi = a(ki - Pi);
            Ir("YuvToRgbRow", Ar, 3),
            Ir("YuvToBgrRow", xr, 3),
            Ir("YuvToRgbaRow", Fr, 4),
            Ir("YuvToBgraRow", kr, 4),
            Ir("YuvToArgbRow", Pr, 4),
            Ir("YuvToRgba4444Row", _r, 2),
            Ir("YuvToRgb565Row", Sr, 2);
            var Di = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396]
              , Ri = [0, 2, 8]
              , Ti = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1]
              , Ui = 1;
            this.WebPDecodeRGBA = function(t, r, n, i, a) {
                var o = qn
                  , s = new rr
                  , c = new ot;
                s.ba = c,
                c.S = o,
                c.width = [c.width],
                c.height = [c.height];
                var u = c.width
                  , l = c.height
                  , h = new st;
                if (null == h || null == t)
                    var f = 2;
                else
                    e(null != h),
                    f = Br(t, r, n, h.width, h.height, h.Pd, h.Qd, h.format, null);
                if (0 != f ? u = 0 : (null != u && (u[0] = h.width[0]),
                null != l && (l[0] = h.height[0]),
                u = 1),
                u) {
                    c.width = c.width[0],
                    c.height = c.height[0],
                    null != i && (i[0] = c.width),
                    null != a && (a[0] = c.height);
                    t: {
                        if (i = new Gt,
                        (a = new nr).data = t,
                        a.w = r,
                        a.ha = n,
                        a.kd = 1,
                        r = [0],
                        e(null != a),
                        (0 == (t = Br(a.data, a.w, a.ha, null, null, null, r, null, a)) || 7 == t) && r[0] && (t = 4),
                        0 == (r = t)) {
                            if (e(null != s),
                            i.data = a.data,
                            i.w = a.w + a.offset,
                            i.ha = a.ha - a.offset,
                            i.put = dt,
                            i.ac = ft,
                            i.bc = pt,
                            i.ma = s,
                            a.xa) {
                                if (null == (t = kt())) {
                                    s = 1;
                                    break t
                                }
                                if (function(t, r) {
                                    var n = [0]
                                      , i = [0]
                                      , a = [0];
                                    e: for (; ; ) {
                                        if (null == t)
                                            return 0;
                                        if (null == r)
                                            return t.a = 2,
                                            0;
                                        if (t.l = r,
                                        t.a = 0,
                                        v(t.m, r.data, r.w, r.ha),
                                        !gt(t.m, n, i, a)) {
                                            t.a = 3;
                                            break e
                                        }
                                        if (t.xb = gi,
                                        r.width = n[0],
                                        r.height = i[0],
                                        !Ft(n[0], i[0], 1, t, null))
                                            break e;
                                        return 1
                                    }
                                    return e(0 != t.a),
                                    0
                                }(t, i)) {
                                    if (i = 0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                                        e: {
                                            i = t;
                                            r: for (; ; ) {
                                                if (null == i) {
                                                    i = 0;
                                                    break e
                                                }
                                                if (e(null != i.s.yc),
                                                e(null != i.s.Ya),
                                                e(0 < i.s.Wb),
                                                e(null != (n = i.l)),
                                                e(null != (a = n.ma)),
                                                0 != i.xb) {
                                                    if (i.ca = a.ba,
                                                    i.tb = a.tb,
                                                    e(null != i.ca),
                                                    !Mr(a.Oa, n, Rn)) {
                                                        i.a = 2;
                                                        break r
                                                    }
                                                    if (!It(i, n.width))
                                                        break r;
                                                    if (n.da)
                                                        break r;
                                                    if ((n.da || nt(i.ca.S)) && mr(),
                                                    11 > i.ca.S || (alert("todo:WebPInitConvertARGBToYUV"),
                                                    null != i.ca.f.kb.F && mr()),
                                                    i.Pb && 0 < i.s.ua && null == i.s.vb.X && !O(i.s.vb, i.s.Wa.Xa)) {
                                                        i.a = 1;
                                                        break r
                                                    }
                                                    i.xb = 0
                                                }
                                                if (!_t(i, i.V, i.Ba, i.c, i.i, n.o, Lt))
                                                    break r;
                                                a.Dc = i.Ma,
                                                i = 1;
                                                break e
                                            }
                                            e(0 != i.a),
                                            i = 0
                                        }
                                        i = !i
                                    }
                                    i && (r = t.a)
                                } else
                                    r = t.a
                            } else {
                                if (null == (t = new Yt)) {
                                    s = 1;
                                    break t
                                }
                                if (t.Fa = a.na,
                                t.P = a.P,
                                t.qc = a.Sa,
                                Kt(t, i)) {
                                    if (0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                                        if (t.Aa = 0,
                                        n = s.Oa,
                                        e(null != (a = t)),
                                        null != n) {
                                            if (0 < (u = 0 > (u = n.Md) ? 0 : 100 < u ? 255 : 255 * u / 100)) {
                                                for (l = h = 0; 4 > l; ++l)
                                                    12 > (f = a.pb[l]).lc && (f.ia = u * Ti[0 > f.lc ? 0 : f.lc] >> 3),
                                                    h |= f.ia;
                                                h && (alert("todo:VP8InitRandom"),
                                                a.ia = 1)
                                            }
                                            a.Ga = n.Id,
                                            100 < a.Ga ? a.Ga = 100 : 0 > a.Ga && (a.Ga = 0)
                                        }
                                        Qt(t, i) || (r = t.a)
                                    }
                                } else
                                    r = t.a
                            }
                            0 == r && null != s.Oa && s.Oa.fd && (r = Er(s.ba))
                        }
                        s = r
                    }
                    o = 0 != s ? null : 11 > o ? c.f.RGBA.eb : c.f.kb.y
                } else
                    o = null;
                return o
            }
            ;
            var zi = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1]
        };
        function u(t, e) {
            for (var r = "", n = 0; n < 4; n++)
                r += String.fromCharCode(t[e++]);
            return r
        }
        function l(t, e) {
            return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0
        }
        function h(t, e) {
            return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0
        }
        new c;
        var f = [0]
          , d = [0]
          , p = []
          , g = new c
          , m = t
          , v = function(t, e) {
            var r = {}
              , n = 0
              , i = !1
              , a = 0
              , o = 0;
            if (r.frames = [],
            !/** @license
     * Copyright (c) 2017 Dominik Homberger
    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    https://webpjs.appspot.com
    WebPRiffParser dominikhlbg@gmail.com
    */
            function(t, e, r, n) {
                for (var i = 0; i < n; i++)
                    if (t[e + i] != r.charCodeAt(i))
                        return !0;
                return !1
            }(t, e, "RIFF", 4)) {
                var s, c;
                h(t, e += 4);
                for (e += 8; e < t.length; ) {
                    var f = u(t, e)
                      , d = h(t, e += 4);
                    e += 4;
                    var p = d + (1 & d);
                    switch (f) {
                    case "VP8 ":
                    case "VP8L":
                        void 0 === r.frames[n] && (r.frames[n] = {});
                        (v = r.frames[n]).src_off = i ? o : e - 8,
                        v.src_size = a + d + 8,
                        n++,
                        i && (i = !1,
                        a = 0,
                        o = 0);
                        break;
                    case "VP8X":
                        (v = r.header = {}).feature_flags = t[e];
                        var g = e + 4;
                        v.canvas_width = 1 + l(t, g);
                        g += 3;
                        v.canvas_height = 1 + l(t, g);
                        g += 3;
                        break;
                    case "ALPH":
                        i = !0,
                        a = p + 8,
                        o = e - 8;
                        break;
                    case "ANIM":
                        (v = r.header).bgcolor = h(t, e);
                        g = e + 4;
                        v.loop_count = (s = t)[(c = g) + 0] << 0 | s[c + 1] << 8;
                        g += 2;
                        break;
                    case "ANMF":
                        var m, v;
                        (v = r.frames[n] = {}).offset_x = 2 * l(t, e),
                        e += 3,
                        v.offset_y = 2 * l(t, e),
                        e += 3,
                        v.width = 1 + l(t, e),
                        e += 3,
                        v.height = 1 + l(t, e),
                        e += 3,
                        v.duration = l(t, e),
                        e += 3,
                        m = t[e++],
                        v.dispose = 1 & m,
                        v.blend = m >> 1 & 1
                    }
                    "ANMF" != f && (e += p)
                }
                return r
            }
        }(m, 0);
        v.response = m,
        v.rgbaoutput = !0,
        v.dataurl = !1;
        var b = v.header ? v.header : null
          , y = v.frames ? v.frames : null;
        if (b) {
            b.loop_counter = b.loop_count,
            f = [b.canvas_height],
            d = [b.canvas_width];
            for (var w = 0; w < y.length && 0 != y[w].blend; w++)
                ;
        }
        var N = y[0]
          , L = g.WebPDecodeRGBA(m, N.src_off, N.src_size, d, f);
        N.rgba = L,
        N.imgwidth = d[0],
        N.imgheight = f[0];
        for (var A = 0; A < d[0] * f[0] * 4; A++)
            p[A] = L[A];
        return this.width = d,
        this.height = f,
        this.data = p,
        this
    }
    !function(t) {
        var e = function() {
            return !0
        }
          , r = function(e, r, i, u) {
            var l = 4
              , h = o;
            switch (u) {
            case t.image_compression.FAST:
                l = 1,
                h = a;
                break;
            case t.image_compression.MEDIUM:
                l = 6,
                h = s;
                break;
            case t.image_compression.SLOW:
                l = 9,
                h = c
            }
            var f = _e(e = n(e, r, i, h), {
                level: l
            });
            return t.__addimage__.arrayBufferToBinaryString(f)
        }
          , n = function(t, e, r, n) {
            for (var i, a, o, s = t.length / e, c = new Uint8Array(t.length + s), u = l(), f = 0; f < s; f += 1) {
                if (o = f * e,
                i = t.subarray(o, o + e),
                n)
                    c.set(n(i, r, a), o + f);
                else {
                    for (var d, p = u.length, g = []; d < p; d += 1)
                        g[d] = u[d](i, r, a);
                    var m = h(g.concat());
                    c.set(g[m], o + f)
                }
                a = i
            }
            return c
        }
          , i = function(t) {
            var e = Array.apply([], t);
            return e.unshift(0),
            e
        }
          , a = function(t, e) {
            var r, n = [], i = t.length;
            n[0] = 1;
            for (var a = 0; a < i; a += 1)
                r = t[a - e] || 0,
                n[a + 1] = t[a] - r + 256 & 255;
            return n
        }
          , o = function(t, e, r) {
            var n, i = [], a = t.length;
            i[0] = 2;
            for (var o = 0; o < a; o += 1)
                n = r && r[o] || 0,
                i[o + 1] = t[o] - n + 256 & 255;
            return i
        }
          , s = function(t, e, r) {
            var n, i, a = [], o = t.length;
            a[0] = 3;
            for (var s = 0; s < o; s += 1)
                n = t[s - e] || 0,
                i = r && r[s] || 0,
                a[s + 1] = t[s] + 256 - (n + i >>> 1) & 255;
            return a
        }
          , c = function(t, e, r) {
            var n, i, a, o, s = [], c = t.length;
            s[0] = 4;
            for (var l = 0; l < c; l += 1)
                n = t[l - e] || 0,
                i = r && r[l] || 0,
                a = r && r[l - e] || 0,
                o = u(n, i, a),
                s[l + 1] = t[l] - o + 256 & 255;
            return s
        }
          , u = function(t, e, r) {
            if (t === e && e === r)
                return t;
            var n = Math.abs(e - r)
              , i = Math.abs(t - r)
              , a = Math.abs(t + e - r - r);
            return n <= i && n <= a ? t : i <= a ? e : r
        }
          , l = function() {
            return [i, a, o, s, c]
        }
          , h = function(t) {
            var e = t.map((function(t) {
                return t.reduce((function(t, e) {
                    return t + Math.abs(e)
                }
                ), 0)
            }
            ));
            return e.indexOf(Math.min.apply(null, e))
        };
        t.processPNG = function(n, i, a, o) {
            var s, c, u, l, h, f, d, p, g, m, v, b, y, w, N, L = this.decode.FLATE_DECODE, A = "";
            if (this.__addimage__.isArrayBuffer(n) && (n = new Uint8Array(n)),
            this.__addimage__.isArrayBufferView(n)) {
                if (n = (u = new Oe(n)).imgData,
                c = u.bits,
                s = u.colorSpace,
                h = u.colors,
                -1 !== [4, 6].indexOf(u.colorType)) {
                    if (8 === u.bits) {
                        g = (p = 32 == u.pixelBitlength ? new Uint32Array(u.decodePixels().buffer) : 16 == u.pixelBitlength ? new Uint16Array(u.decodePixels().buffer) : new Uint8Array(u.decodePixels().buffer)).length,
                        v = new Uint8Array(g * u.colors),
                        m = new Uint8Array(g);
                        var x, S = u.pixelBitlength - u.bits;
                        for (w = 0,
                        N = 0; w < g; w++) {
                            for (y = p[w],
                            x = 0; x < S; )
                                v[N++] = y >>> x & 255,
                                x += u.bits;
                            m[w] = y >>> x & 255
                        }
                    }
                    if (16 === u.bits) {
                        g = (p = new Uint32Array(u.decodePixels().buffer)).length,
                        v = new Uint8Array(g * (32 / u.pixelBitlength) * u.colors),
                        m = new Uint8Array(g * (32 / u.pixelBitlength)),
                        b = u.colors > 1,
                        w = 0,
                        N = 0;
                        for (var _ = 0; w < g; )
                            y = p[w++],
                            v[N++] = y >>> 0 & 255,
                            b && (v[N++] = y >>> 16 & 255,
                            y = p[w++],
                            v[N++] = y >>> 0 & 255),
                            m[_++] = y >>> 16 & 255;
                        c = 8
                    }
                    o !== t.image_compression.NONE && e() ? (n = r(v, u.width * u.colors, u.colors, o),
                    d = r(m, u.width, 1, o)) : (n = v,
                    d = m,
                    L = void 0)
                }
                if (3 === u.colorType && (s = this.color_spaces.INDEXED,
                f = u.palette,
                u.transparency.indexed)) {
                    var P = u.transparency.indexed
                      , k = 0;
                    for (w = 0,
                    g = P.length; w < g; ++w)
                        k += P[w];
                    if ((k /= 255) === g - 1 && -1 !== P.indexOf(0))
                        l = [P.indexOf(0)];
                    else if (k !== g) {
                        for (p = u.decodePixels(),
                        m = new Uint8Array(p.length),
                        w = 0,
                        g = p.length; w < g; w++)
                            m[w] = P[p[w]];
                        d = r(m, u.width, 1)
                    }
                }
                var F = function(e) {
                    var r;
                    switch (e) {
                    case t.image_compression.FAST:
                        r = 11;
                        break;
                    case t.image_compression.MEDIUM:
                        r = 13;
                        break;
                    case t.image_compression.SLOW:
                        r = 14;
                        break;
                    default:
                        r = 12
                    }
                    return r
                }(o);
                return L === this.decode.FLATE_DECODE && (A = "/Predictor " + F + " "),
                A += "/Colors " + h + " /BitsPerComponent " + c + " /Columns " + u.width,
                (this.__addimage__.isArrayBuffer(n) || this.__addimage__.isArrayBufferView(n)) && (n = this.__addimage__.arrayBufferToBinaryString(n)),
                (d && this.__addimage__.isArrayBuffer(d) || this.__addimage__.isArrayBufferView(d)) && (d = this.__addimage__.arrayBufferToBinaryString(d)),
                {
                    alias: a,
                    data: n,
                    index: i,
                    filter: L,
                    decodeParameters: A,
                    transparency: l,
                    palette: f,
                    sMask: d,
                    predictor: F,
                    width: u.width,
                    height: u.height,
                    bitsPerComponent: c,
                    colorSpace: s
                }
            }
        }
    }(M.API),
    function(t) {
        t.processGIF89A = function(e, r, n, i) {
            var a = new Be(e)
              , o = a.width
              , s = a.height
              , c = [];
            a.decodeAndBlitFrameRGBA(0, c);
            var u = {
                data: c,
                width: o,
                height: s
            }
              , l = new Ee(100).encode(u, 100);
            return t.processJPEG.call(this, l, r, n, i)
        }
        ,
        t.processGIF87A = t.processGIF89A
    }(M.API),
    qe.prototype.parseHeader = function() {
        if (this.fileSize = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.reserved = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.offset = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.headerSize = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.width = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.height = this.datav.getInt32(this.pos, !0),
        this.pos += 4,
        this.planes = this.datav.getUint16(this.pos, !0),
        this.pos += 2,
        this.bitPP = this.datav.getUint16(this.pos, !0),
        this.pos += 2,
        this.compress = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.rawSize = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.hr = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.vr = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.colors = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        this.importantColors = this.datav.getUint32(this.pos, !0),
        this.pos += 4,
        16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15),
        this.bitPP < 15) {
            var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
            this.palette = new Array(t);
            for (var e = 0; e < t; e++) {
                var r = this.datav.getUint8(this.pos++, !0)
                  , n = this.datav.getUint8(this.pos++, !0)
                  , i = this.datav.getUint8(this.pos++, !0)
                  , a = this.datav.getUint8(this.pos++, !0);
                this.palette[e] = {
                    red: i,
                    green: n,
                    blue: r,
                    quad: a
                }
            }
        }
        this.height < 0 && (this.height *= -1,
        this.bottom_up = !1)
    }
    ,
    qe.prototype.parseBGR = function() {
        this.pos = this.offset;
        try {
            var t = "bit" + this.bitPP
              , e = this.width * this.height * 4;
            this.data = new Uint8Array(e),
            this[t]()
        } catch (t) {
            i.log("bit decode error:" + t)
        }
    }
    ,
    qe.prototype.bit1 = function() {
        var t, e = Math.ceil(this.width / 8), r = e % 4;
        for (t = this.height - 1; t >= 0; t--) {
            for (var n = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++)
                for (var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++) {
                    var c = this.palette[a >> 7 - s & 1];
                    this.data[o + 4 * s] = c.blue,
                    this.data[o + 4 * s + 1] = c.green,
                    this.data[o + 4 * s + 2] = c.red,
                    this.data[o + 4 * s + 3] = 255
                }
            0 !== r && (this.pos += 4 - r)
        }
    }
    ,
    qe.prototype.bit4 = function() {
        for (var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--) {
            for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < t; i++) {
                var a = this.datav.getUint8(this.pos++, !0)
                  , o = n * this.width * 4 + 2 * i * 4
                  , s = a >> 4
                  , c = 15 & a
                  , u = this.palette[s];
                if (this.data[o] = u.blue,
                this.data[o + 1] = u.green,
                this.data[o + 2] = u.red,
                this.data[o + 3] = 255,
                2 * i + 1 >= this.width)
                    break;
                u = this.palette[c],
                this.data[o + 4] = u.blue,
                this.data[o + 4 + 1] = u.green,
                this.data[o + 4 + 2] = u.red,
                this.data[o + 4 + 3] = 255
            }
            0 !== e && (this.pos += 4 - e)
        }
    }
    ,
    qe.prototype.bit8 = function() {
        for (var t = this.width % 4, e = this.height - 1; e >= 0; e--) {
            for (var r = this.bottom_up ? e : this.height - 1 - e, n = 0; n < this.width; n++) {
                var i = this.datav.getUint8(this.pos++, !0)
                  , a = r * this.width * 4 + 4 * n;
                if (i < this.palette.length) {
                    var o = this.palette[i];
                    this.data[a] = o.red,
                    this.data[a + 1] = o.green,
                    this.data[a + 2] = o.blue,
                    this.data[a + 3] = 255
                } else
                    this.data[a] = 255,
                    this.data[a + 1] = 255,
                    this.data[a + 2] = 255,
                    this.data[a + 3] = 255
            }
            0 !== t && (this.pos += 4 - t)
        }
    }
    ,
    qe.prototype.bit15 = function() {
        for (var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--) {
            for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < this.width; i++) {
                var a = this.datav.getUint16(this.pos, !0);
                this.pos += 2;
                var o = (a & e) / e * 255 | 0
                  , s = (a >> 5 & e) / e * 255 | 0
                  , c = (a >> 10 & e) / e * 255 | 0
                  , u = a >> 15 ? 255 : 0
                  , l = n * this.width * 4 + 4 * i;
                this.data[l] = c,
                this.data[l + 1] = s,
                this.data[l + 2] = o,
                this.data[l + 3] = u
            }
            this.pos += t
        }
    }
    ,
    qe.prototype.bit16 = function() {
        for (var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n = this.height - 1; n >= 0; n--) {
            for (var i = this.bottom_up ? n : this.height - 1 - n, a = 0; a < this.width; a++) {
                var o = this.datav.getUint16(this.pos, !0);
                this.pos += 2;
                var s = (o & e) / e * 255 | 0
                  , c = (o >> 5 & r) / r * 255 | 0
                  , u = (o >> 11) / e * 255 | 0
                  , l = i * this.width * 4 + 4 * a;
                this.data[l] = u,
                this.data[l + 1] = c,
                this.data[l + 2] = s,
                this.data[l + 3] = 255
            }
            this.pos += t
        }
    }
    ,
    qe.prototype.bit24 = function() {
        for (var t = this.height - 1; t >= 0; t--) {
            for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
                var n = this.datav.getUint8(this.pos++, !0)
                  , i = this.datav.getUint8(this.pos++, !0)
                  , a = this.datav.getUint8(this.pos++, !0)
                  , o = e * this.width * 4 + 4 * r;
                this.data[o] = a,
                this.data[o + 1] = i,
                this.data[o + 2] = n,
                this.data[o + 3] = 255
            }
            this.pos += this.width % 4
        }
    }
    ,
    qe.prototype.bit32 = function() {
        for (var t = this.height - 1; t >= 0; t--)
            for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
                var n = this.datav.getUint8(this.pos++, !0)
                  , i = this.datav.getUint8(this.pos++, !0)
                  , a = this.datav.getUint8(this.pos++, !0)
                  , o = this.datav.getUint8(this.pos++, !0)
                  , s = e * this.width * 4 + 4 * r;
                this.data[s] = a,
                this.data[s + 1] = i,
                this.data[s + 2] = n,
                this.data[s + 3] = o
            }
    }
    ,
    qe.prototype.getData = function() {
        return this.data
    }
    ,
    /**
   * @license
   * Copyright (c) 2018 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        t.processBMP = function(e, r, n, i) {
            var a = new qe(e,!1)
              , o = a.width
              , s = a.height
              , c = {
                data: a.getData(),
                width: o,
                height: s
            }
              , u = new Ee(100).encode(c, 100);
            return t.processJPEG.call(this, u, r, n, i)
        }
    }(M.API),
    De.prototype.getData = function() {
        return this.data
    }
    ,
    /**
   * @license
   * Copyright (c) 2019 Aras Abbasi
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        t.processWEBP = function(e, r, n, i) {
            var a = new De(e,!1)
              , o = a.width
              , s = a.height
              , c = {
                data: a.getData(),
                width: o,
                height: s
            }
              , u = new Ee(100).encode(c, 100);
            return t.processJPEG.call(this, u, r, n, i)
        }
    }(M.API),
    /**
   * @license
   *
   * Copyright (c) 2021 Antti Palola, https://github.com/Pantura
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   */
    function(t) {
        t.processRGBA = function(t, e, r) {
            for (var n = t.data, i = n.length, a = new Uint8Array(i / 4 * 3), o = new Uint8Array(i / 4), s = 0, c = 0, u = 0; u < i; u += 4) {
                var l = n[u]
                  , h = n[u + 1]
                  , f = n[u + 2]
                  , d = n[u + 3];
                a[s++] = l,
                a[s++] = h,
                a[s++] = f,
                o[c++] = d
            }
            var p = this.__addimage__.arrayBufferToBinaryString(a);
            return {
                alpha: this.__addimage__.arrayBufferToBinaryString(o),
                data: p,
                index: e,
                alias: r,
                colorSpace: "DeviceRGB",
                bitsPerComponent: 8,
                width: t.width,
                height: t.height
            }
        }
    }(M.API),
    /**
   * @license
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        t.setLanguage = function(t) {
            return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {},
            this.internal.languageSettings.isSubscribed = !1),
            void 0 !== {
                af: "Afrikaans",
                sq: "Albanian",
                ar: "Arabic (Standard)",
                "ar-DZ": "Arabic (Algeria)",
                "ar-BH": "Arabic (Bahrain)",
                "ar-EG": "Arabic (Egypt)",
                "ar-IQ": "Arabic (Iraq)",
                "ar-JO": "Arabic (Jordan)",
                "ar-KW": "Arabic (Kuwait)",
                "ar-LB": "Arabic (Lebanon)",
                "ar-LY": "Arabic (Libya)",
                "ar-MA": "Arabic (Morocco)",
                "ar-OM": "Arabic (Oman)",
                "ar-QA": "Arabic (Qatar)",
                "ar-SA": "Arabic (Saudi Arabia)",
                "ar-SY": "Arabic (Syria)",
                "ar-TN": "Arabic (Tunisia)",
                "ar-AE": "Arabic (U.A.E.)",
                "ar-YE": "Arabic (Yemen)",
                an: "Aragonese",
                hy: "Armenian",
                as: "Assamese",
                ast: "Asturian",
                az: "Azerbaijani",
                eu: "Basque",
                be: "Belarusian",
                bn: "Bengali",
                bs: "Bosnian",
                br: "Breton",
                bg: "Bulgarian",
                my: "Burmese",
                ca: "Catalan",
                ch: "Chamorro",
                ce: "Chechen",
                zh: "Chinese",
                "zh-HK": "Chinese (Hong Kong)",
                "zh-CN": "Chinese (PRC)",
                "zh-SG": "Chinese (Singapore)",
                "zh-TW": "Chinese (Taiwan)",
                cv: "Chuvash",
                co: "Corsican",
                cr: "Cree",
                hr: "Croatian",
                cs: "Czech",
                da: "Danish",
                nl: "Dutch (Standard)",
                "nl-BE": "Dutch (Belgian)",
                en: "English",
                "en-AU": "English (Australia)",
                "en-BZ": "English (Belize)",
                "en-CA": "English (Canada)",
                "en-IE": "English (Ireland)",
                "en-JM": "English (Jamaica)",
                "en-NZ": "English (New Zealand)",
                "en-PH": "English (Philippines)",
                "en-ZA": "English (South Africa)",
                "en-TT": "English (Trinidad & Tobago)",
                "en-GB": "English (United Kingdom)",
                "en-US": "English (United States)",
                "en-ZW": "English (Zimbabwe)",
                eo: "Esperanto",
                et: "Estonian",
                fo: "Faeroese",
                fj: "Fijian",
                fi: "Finnish",
                fr: "French (Standard)",
                "fr-BE": "French (Belgium)",
                "fr-CA": "French (Canada)",
                "fr-FR": "French (France)",
                "fr-LU": "French (Luxembourg)",
                "fr-MC": "French (Monaco)",
                "fr-CH": "French (Switzerland)",
                fy: "Frisian",
                fur: "Friulian",
                gd: "Gaelic (Scots)",
                "gd-IE": "Gaelic (Irish)",
                gl: "Galacian",
                ka: "Georgian",
                de: "German (Standard)",
                "de-AT": "German (Austria)",
                "de-DE": "German (Germany)",
                "de-LI": "German (Liechtenstein)",
                "de-LU": "German (Luxembourg)",
                "de-CH": "German (Switzerland)",
                el: "Greek",
                gu: "Gujurati",
                ht: "Haitian",
                he: "Hebrew",
                hi: "Hindi",
                hu: "Hungarian",
                is: "Icelandic",
                id: "Indonesian",
                iu: "Inuktitut",
                ga: "Irish",
                it: "Italian (Standard)",
                "it-CH": "Italian (Switzerland)",
                ja: "Japanese",
                kn: "Kannada",
                ks: "Kashmiri",
                kk: "Kazakh",
                km: "Khmer",
                ky: "Kirghiz",
                tlh: "Klingon",
                ko: "Korean",
                "ko-KP": "Korean (North Korea)",
                "ko-KR": "Korean (South Korea)",
                la: "Latin",
                lv: "Latvian",
                lt: "Lithuanian",
                lb: "Luxembourgish",
                mk: "North Macedonia",
                ms: "Malay",
                ml: "Malayalam",
                mt: "Maltese",
                mi: "Maori",
                mr: "Marathi",
                mo: "Moldavian",
                nv: "Navajo",
                ng: "Ndonga",
                ne: "Nepali",
                no: "Norwegian",
                nb: "Norwegian (Bokmal)",
                nn: "Norwegian (Nynorsk)",
                oc: "Occitan",
                or: "Oriya",
                om: "Oromo",
                fa: "Persian",
                "fa-IR": "Persian/Iran",
                pl: "Polish",
                pt: "Portuguese",
                "pt-BR": "Portuguese (Brazil)",
                pa: "Punjabi",
                "pa-IN": "Punjabi (India)",
                "pa-PK": "Punjabi (Pakistan)",
                qu: "Quechua",
                rm: "Rhaeto-Romanic",
                ro: "Romanian",
                "ro-MO": "Romanian (Moldavia)",
                ru: "Russian",
                "ru-MO": "Russian (Moldavia)",
                sz: "Sami (Lappish)",
                sg: "Sango",
                sa: "Sanskrit",
                sc: "Sardinian",
                sd: "Sindhi",
                si: "Singhalese",
                sr: "Serbian",
                sk: "Slovak",
                sl: "Slovenian",
                so: "Somani",
                sb: "Sorbian",
                es: "Spanish",
                "es-AR": "Spanish (Argentina)",
                "es-BO": "Spanish (Bolivia)",
                "es-CL": "Spanish (Chile)",
                "es-CO": "Spanish (Colombia)",
                "es-CR": "Spanish (Costa Rica)",
                "es-DO": "Spanish (Dominican Republic)",
                "es-EC": "Spanish (Ecuador)",
                "es-SV": "Spanish (El Salvador)",
                "es-GT": "Spanish (Guatemala)",
                "es-HN": "Spanish (Honduras)",
                "es-MX": "Spanish (Mexico)",
                "es-NI": "Spanish (Nicaragua)",
                "es-PA": "Spanish (Panama)",
                "es-PY": "Spanish (Paraguay)",
                "es-PE": "Spanish (Peru)",
                "es-PR": "Spanish (Puerto Rico)",
                "es-ES": "Spanish (Spain)",
                "es-UY": "Spanish (Uruguay)",
                "es-VE": "Spanish (Venezuela)",
                sx: "Sutu",
                sw: "Swahili",
                sv: "Swedish",
                "sv-FI": "Swedish (Finland)",
                "sv-SV": "Swedish (Sweden)",
                ta: "Tamil",
                tt: "Tatar",
                te: "Teluga",
                th: "Thai",
                tig: "Tigre",
                ts: "Tsonga",
                tn: "Tswana",
                tr: "Turkish",
                tk: "Turkmen",
                uk: "Ukrainian",
                hsb: "Upper Sorbian",
                ur: "Urdu",
                ve: "Venda",
                vi: "Vietnamese",
                vo: "Volapuk",
                wa: "Walloon",
                cy: "Welsh",
                xh: "Xhosa",
                ji: "Yiddish",
                zu: "Zulu"
            }[t] && (this.internal.languageSettings.languageCode = t,
            !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", (function() {
                this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")")
            }
            )),
            this.internal.languageSettings.isSubscribed = !0)),
            this
        }
    }(M.API),
    ke = M.API,
    Fe = ke.getCharWidthsArray = function(t, r) {
        var n, i, a = (r = r || {}).font || this.internal.getFont(), o = r.fontSize || this.internal.getFontSize(), s = r.charSpace || this.internal.getCharSpace(), c = r.widths ? r.widths : a.metadata.Unicode.widths, u = c.fof ? c.fof : 1, l = r.kerning ? r.kerning : a.metadata.Unicode.kerning, h = l.fof ? l.fof : 1, f = !1 !== r.doKerning, d = 0, p = t.length, g = 0, m = c[0] || u, v = [];
        for (n = 0; n < p; n++)
            i = t.charCodeAt(n),
            "function" == typeof a.metadata.widthOfString ? v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i)) + s * (1e3 / o) || 0) / 1e3) : (d = f && "object" === e(l[i]) && !isNaN(parseInt(l[i][g], 10)) ? l[i][g] / h : 0,
            v.push((c[i] || m) / u + d)),
            g = i;
        return v
    }
    ,
    Ie = ke.getStringUnitWidth = function(t, e) {
        var r = (e = e || {}).fontSize || this.internal.getFontSize()
          , n = e.font || this.internal.getFont()
          , i = e.charSpace || this.internal.getCharSpace();
        return ke.processArabic && (t = ke.processArabic(t)),
        "function" == typeof n.metadata.widthOfString ? n.metadata.widthOfString(t, r, i) / r : Fe.apply(this, arguments).reduce((function(t, e) {
            return t + e
        }
        ), 0)
    }
    ,
    Ce = function(t, e, r, n) {
        for (var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < r; )
            s += e[a],
            a++;
        i.push(t.slice(0, a));
        var c = a;
        for (s = 0; a !== o; )
            s + e[a] > n && (i.push(t.slice(c, a)),
            s = 0,
            c = a),
            s += e[a],
            a++;
        return c !== a && i.push(t.slice(c, a)),
        i
    }
    ,
    je = function(t, e, r) {
        r || (r = {});
        var n, i, a, o, s, c, u, l = [], h = [l], f = r.textIndent || 0, d = 0, p = 0, g = t.split(" "), m = Fe.apply(this, [" ", r])[0];
        if (c = -1 === r.lineIndent ? g[0].length + 2 : r.lineIndent || 0) {
            var v = Array(c).join(" ")
              , b = [];
            g.map((function(t) {
                (t = t.split(/\s*\n/)).length > 1 ? b = b.concat(t.map((function(t, e) {
                    return (e && t.length ? "\n" : "") + t
                }
                ))) : b.push(t[0])
            }
            )),
            g = b,
            c = Ie.apply(this, [v, r])
        }
        for (a = 0,
        o = g.length; a < o; a++) {
            var y = 0;
            if (n = g[a],
            c && "\n" == n[0] && (n = n.substr(1),
            y = 1),
            f + d + (p = (i = Fe.apply(this, [n, r])).reduce((function(t, e) {
                return t + e
            }
            ), 0)) > e || y) {
                if (p > e) {
                    for (s = Ce.apply(this, [n, i, e - (f + d), e]),
                    l.push(s.shift()),
                    l = [s.pop()]; s.length; )
                        h.push([s.shift()]);
                    p = i.slice(n.length - (l[0] ? l[0].length : 0)).reduce((function(t, e) {
                        return t + e
                    }
                    ), 0)
                } else
                    l = [n];
                h.push(l),
                f = p + c,
                d = m
            } else
                l.push(n),
                f += d + p,
                d = m
        }
        return u = c ? function(t, e) {
            return (e ? v : "") + t.join(" ")
        }
        : function(t) {
            return t.join(" ")
        }
        ,
        h.map(u)
    }
    ,
    ke.splitTextToSize = function(t, e, r) {
        var n, i = (r = r || {}).fontSize || this.internal.getFontSize(), a = function(t) {
            if (t.widths && t.kerning)
                return {
                    widths: t.widths,
                    kerning: t.kerning
                };
            var e = this.internal.getFont(t.fontName, t.fontStyle);
            return e.metadata.Unicode ? {
                widths: e.metadata.Unicode.widths || {
                    0: 1
                },
                kerning: e.metadata.Unicode.kerning || {}
            } : {
                font: e.metadata,
                fontSize: this.internal.getFontSize(),
                charSpace: this.internal.getCharSpace()
            }
        }
        .call(this, r);
        n = Array.isArray(t) ? t : String(t).split(/\r?\n/);
        var o = 1 * this.internal.scaleFactor * e / i;
        a.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i : 0,
        a.lineIndent = r.lineIndent;
        var s, c, u = [];
        for (s = 0,
        c = n.length; s < c; s++)
            u = u.concat(je.apply(this, [n[s], o, a]));
        return u
    }
    ,
    function(t) {
        t.__fontmetrics__ = t.__fontmetrics__ || {};
        for (var r = "klmnopqrstuvwxyz", n = {}, i = {}, a = 0; a < r.length; a++)
            n[r[a]] = "0123456789abcdef"[a],
            i["0123456789abcdef"[a]] = r[a];
        var o = function(t) {
            return "0x" + parseInt(t, 10).toString(16)
        }
          , s = t.__fontmetrics__.compress = function(t) {
            var r, n, a, c, u = ["{"];
            for (var l in t) {
                if (r = t[l],
                isNaN(parseInt(l, 10)) ? n = "'" + l + "'" : (l = parseInt(l, 10),
                n = (n = o(l).slice(2)).slice(0, -1) + i[n.slice(-1)]),
                "number" == typeof r)
                    r < 0 ? (a = o(r).slice(3),
                    c = "-") : (a = o(r).slice(2),
                    c = ""),
                    a = c + a.slice(0, -1) + i[a.slice(-1)];
                else {
                    if ("object" !== e(r))
                        throw new Error("Don't know what to do with value type " + e(r) + ".");
                    a = s(r)
                }
                u.push(n + a)
            }
            return u.push("}"),
            u.join("")
        }
          , c = t.__fontmetrics__.uncompress = function(t) {
            if ("string" != typeof t)
                throw new Error("Invalid argument passed to uncompress.");
            for (var e, r, i, a, o = {}, s = 1, c = o, u = [], l = "", h = "", f = t.length - 1, d = 1; d < f; d += 1)
                "'" == (a = t[d]) ? e ? (i = e.join(""),
                e = void 0) : e = [] : e ? e.push(a) : "{" == a ? (u.push([c, i]),
                c = {},
                i = void 0) : "}" == a ? ((r = u.pop())[0][r[1]] = c,
                i = void 0,
                c = r[0]) : "-" == a ? s = -1 : void 0 === i ? n.hasOwnProperty(a) ? (l += n[a],
                i = parseInt(l, 16) * s,
                s = 1,
                l = "") : l += a : n.hasOwnProperty(a) ? (h += n[a],
                c[i] = parseInt(h, 16) * s,
                s = 1,
                i = void 0,
                h = "") : h += a;
            return o
        }
          , u = {
            codePages: ["WinAnsiEncoding"],
            WinAnsiEncoding: c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
        }
          , l = {
            Unicode: {
                Courier: u,
                "Courier-Bold": u,
                "Courier-BoldOblique": u,
                "Courier-Oblique": u,
                Helvetica: u,
                "Helvetica-Bold": u,
                "Helvetica-BoldOblique": u,
                "Helvetica-Oblique": u,
                "Times-Roman": u,
                "Times-Bold": u,
                "Times-BoldItalic": u,
                "Times-Italic": u
            }
        }
          , h = {
            Unicode: {
                "Courier-Oblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
                "Times-BoldItalic": c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
                "Helvetica-Bold": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
                Courier: c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
                "Courier-BoldOblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
                "Times-Bold": c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
                Symbol: c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
                Helvetica: c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
                "Helvetica-BoldOblique": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
                ZapfDingbats: c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
                "Courier-Bold": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
                "Times-Italic": c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
                "Times-Roman": c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
                "Helvetica-Oblique": c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
            }
        };
        t.events.push(["addFont", function(t) {
            var e = t.font
              , r = h.Unicode[e.postScriptName];
            r && (e.metadata.Unicode = {},
            e.metadata.Unicode.widths = r.widths,
            e.metadata.Unicode.kerning = r.kerning);
            var n = l.Unicode[e.postScriptName];
            n && (e.metadata.Unicode.encoding = n,
            e.encoding = n.codePages[0])
        }
        ])
    }(M.API),
    /**
   * @license
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = function(t) {
            for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++)
                r[n] = t.charCodeAt(n);
            return r
        };
        t.API.events.push(["addFont", function(r) {
            var n = void 0
              , i = r.font
              , a = r.instance;
            if (!i.isStandardFont) {
                if (void 0 === a)
                    throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
                if ("string" != typeof (n = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName)))
                    throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
                !function(r, n) {
                    n = /^\x00\x01\x00\x00/.test(n) ? e(n) : e(c(n)),
                    r.metadata = t.API.TTFFont.open(n),
                    r.metadata.Unicode = r.metadata.Unicode || {
                        encoding: {},
                        kerning: {},
                        widths: []
                    },
                    r.metadata.glyIdsUsed = [0]
                }(i, n)
            }
        }
        ])
    }(M),
    function(n) {
        function a() {
            return (r.canvg ? Promise.resolve(r.canvg) : "object" === (void 0 === t ? "undefined" : e(t)) && "undefined" != typeof module ? new Promise((function(t, e) {
                try {
                    t(require("canvg"))
                } catch (t) {
                    e(t)
                }
            }
            )) : "function" == typeof define && define.amd ? new Promise((function(t, e) {
                try {
                    require(["canvg"], t)
                } catch (t) {
                    e(t)
                }
            }
            )) : Promise.reject(new Error("Could not load canvg"))).catch((function(t) {
                return Promise.reject(new Error("Could not load canvg: " + t))
            }
            )).then((function(t) {
                return t.default ? t.default : t
            }
            ))
        }
        n.addSvgAsImage = function(t, e, r, n, o, s, c, u) {
            if (isNaN(e) || isNaN(r))
                throw i.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments),
                new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
            if (isNaN(n) || isNaN(o))
                throw i.error("jsPDF.addSvgAsImage: Invalid measurements", arguments),
                new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
            var l = document.createElement("canvas");
            l.width = n,
            l.height = o;
            var h = l.getContext("2d");
            h.fillStyle = "#fff",
            h.fillRect(0, 0, l.width, l.height);
            var f = {
                ignoreMouse: !0,
                ignoreAnimation: !0,
                ignoreDimensions: !0
            }
              , d = this;
            return a().then((function(e) {
                return e.fromString(h, t, f)
            }
            ), (function() {
                return Promise.reject(new Error("Could not load canvg."))
            }
            )).then((function(t) {
                return t.render(f)
            }
            )).then((function() {
                d.addImage(l.toDataURL("image/jpeg", 1), e, r, n, o, c, u)
            }
            ))
        }
    }(M.API),
    /**
   * @license
   * ====================================================================
   * Copyright (c) 2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   */
    function(t) {
        t.putTotalPages = function(t) {
            var e, r = 0;
            parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t,"g"),
            r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()),"g"),
            r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
            for (var n = 1; n <= this.internal.getNumberOfPages(); n++)
                for (var i = 0; i < this.internal.pages[n].length; i++)
                    this.internal.pages[n][i] = this.internal.pages[n][i].replace(e, r);
            return this
        }
    }(M.API),
    function(t) {
        t.viewerPreferences = function(t, r) {
            var n;
            t = t || {},
            r = r || !1;
            var i, a, o, s = {
                HideToolbar: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.3
                },
                HideMenubar: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.3
                },
                HideWindowUI: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.3
                },
                FitWindow: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.3
                },
                CenterWindow: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.3
                },
                DisplayDocTitle: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.4
                },
                NonFullScreenPageMode: {
                    defaultValue: "UseNone",
                    value: "UseNone",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
                    pdfVersion: 1.3
                },
                Direction: {
                    defaultValue: "L2R",
                    value: "L2R",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["L2R", "R2L"],
                    pdfVersion: 1.3
                },
                ViewArea: {
                    defaultValue: "CropBox",
                    value: "CropBox",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
                    pdfVersion: 1.4
                },
                ViewClip: {
                    defaultValue: "CropBox",
                    value: "CropBox",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
                    pdfVersion: 1.4
                },
                PrintArea: {
                    defaultValue: "CropBox",
                    value: "CropBox",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
                    pdfVersion: 1.4
                },
                PrintClip: {
                    defaultValue: "CropBox",
                    value: "CropBox",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
                    pdfVersion: 1.4
                },
                PrintScaling: {
                    defaultValue: "AppDefault",
                    value: "AppDefault",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["AppDefault", "None"],
                    pdfVersion: 1.6
                },
                Duplex: {
                    defaultValue: "",
                    value: "none",
                    type: "name",
                    explicitSet: !1,
                    valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
                    pdfVersion: 1.7
                },
                PickTrayByPDFSize: {
                    defaultValue: !1,
                    value: !1,
                    type: "boolean",
                    explicitSet: !1,
                    valueSet: [!0, !1],
                    pdfVersion: 1.7
                },
                PrintPageRange: {
                    defaultValue: "",
                    value: "",
                    type: "array",
                    explicitSet: !1,
                    valueSet: null,
                    pdfVersion: 1.7
                },
                NumCopies: {
                    defaultValue: 1,
                    value: 1,
                    type: "integer",
                    explicitSet: !1,
                    valueSet: null,
                    pdfVersion: 1.7
                }
            }, c = Object.keys(s), u = [], l = 0, h = 0, f = 0;
            function d(t, e) {
                var r, n = !1;
                for (r = 0; r < t.length; r += 1)
                    t[r] === e && (n = !0);
                return n
            }
            if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {},
            this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s)),
            this.internal.viewerpreferences.isSubscribed = !1),
            n = this.internal.viewerpreferences.configuration,
            "reset" === t || !0 === r) {
                var p = c.length;
                for (f = 0; f < p; f += 1)
                    n[c[f]].value = n[c[f]].defaultValue,
                    n[c[f]].explicitSet = !1
            }
            if ("object" === e(t))
                for (a in t)
                    if (o = t[a],
                    d(c, a) && void 0 !== o) {
                        if ("boolean" === n[a].type && "boolean" == typeof o)
                            n[a].value = o;
                        else if ("name" === n[a].type && d(n[a].valueSet, o))
                            n[a].value = o;
                        else if ("integer" === n[a].type && Number.isInteger(o))
                            n[a].value = o;
                        else if ("array" === n[a].type) {
                            for (l = 0; l < o.length; l += 1)
                                if (i = !0,
                                1 === o[l].length && "number" == typeof o[l][0])
                                    u.push(String(o[l] - 1));
                                else if (o[l].length > 1) {
                                    for (h = 0; h < o[l].length; h += 1)
                                        "number" != typeof o[l][h] && (i = !1);
                                    !0 === i && u.push([o[l][0] - 1, o[l][1] - 1].join(" "))
                                }
                            n[a].value = "[" + u.join(" ") + "]"
                        } else
                            n[a].value = n[a].defaultValue;
                        n[a].explicitSet = !0
                    }
            return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", (function() {
                var t, e = [];
                for (t in n)
                    !0 === n[t].explicitSet && ("name" === n[t].type ? e.push("/" + t + " /" + n[t].value) : e.push("/" + t + " " + n[t].value));
                0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>")
            }
            )),
            this.internal.viewerpreferences.isSubscribed = !0),
            this.internal.viewerpreferences.configuration = n,
            this
        }
    }(M.API),
    /** ====================================================================
   * @license
   * jsPDF XMP metadata plugin
   * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   * ====================================================================
   */
    function(t) {
        var e = function() {
            var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>'
              , e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">'))
              , r = unescape(encodeURIComponent(t))
              , n = unescape(encodeURIComponent(this.internal.__metadata__.metadata))
              , i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>"))
              , a = unescape(encodeURIComponent("</x:xmpmeta>"))
              , o = r.length + n.length + i.length + e.length + a.length;
            this.internal.__metadata__.metadata_object_number = this.internal.newObject(),
            this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o + " >>"),
            this.internal.write("stream"),
            this.internal.write(e + r + n + i + a),
            this.internal.write("endstream"),
            this.internal.write("endobj")
        }
          , r = function() {
            this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R")
        };
        t.addMetadata = function(t, n) {
            return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
                metadata: t,
                namespaceuri: n || "http://jspdf.default.namespaceuri/"
            },
            this.internal.events.subscribe("putCatalog", r),
            this.internal.events.subscribe("postPutResources", e)),
            this
        }
    }(M.API),
    function(t) {
        var e = t.API
          , r = e.pdfEscape16 = function(t, e) {
            for (var r, n = e.metadata.Unicode.widths, i = ["", "0", "00", "000", "0000"], a = [""], o = 0, s = t.length; o < s; ++o) {
                if (r = e.metadata.characterToGlyph(t.charCodeAt(o)),
                e.metadata.glyIdsUsed.push(r),
                e.metadata.toUnicode[r] = t.charCodeAt(o),
                -1 == n.indexOf(r) && (n.push(r),
                n.push([parseInt(e.metadata.widthOfGlyph(r), 10)])),
                "0" == r)
                    return a.join("");
                r = r.toString(16),
                a.push(i[4 - r.length], r)
            }
            return a.join("")
        }
          , n = function(t) {
            var e, r, n, i, a, o, s;
            for (a = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange",
            n = [],
            o = 0,
            s = (r = Object.keys(t).sort((function(t, e) {
                return t - e
            }
            ))).length; o < s; o++)
                e = r[o],
                n.length >= 100 && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar",
                n = []),
                void 0 !== t[e] && null !== t[e] && "function" == typeof t[e].toString && (i = ("0000" + t[e].toString(16)).slice(-4),
                e = ("0000" + (+e).toString(16)).slice(-4),
                n.push("<" + e + "><" + i + ">"));
            return n.length && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar\n"),
            a += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"
        };
        e.events.push(["putFont", function(e) {
            !function(e) {
                var r = e.font
                  , i = e.out
                  , a = e.newObject
                  , o = e.putStream;
                if (r.metadata instanceof t.API.TTFFont && "Identity-H" === r.encoding) {
                    for (var s = r.metadata.Unicode.widths, c = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), u = "", l = 0; l < c.length; l++)
                        u += String.fromCharCode(c[l]);
                    var h = a();
                    o({
                        data: u,
                        addLength1: !0,
                        objectId: h
                    }),
                    i("endobj");
                    var f = a();
                    o({
                        data: n(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: f
                    }),
                    i("endobj");
                    var d = a();
                    i("<<"),
                    i("/Type /FontDescriptor"),
                    i("/FontName /" + F(r.fontName)),
                    i("/FontFile2 " + h + " 0 R"),
                    i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)),
                    i("/Flags " + r.metadata.flags),
                    i("/StemV " + r.metadata.stemV),
                    i("/ItalicAngle " + r.metadata.italicAngle),
                    i("/Ascent " + r.metadata.ascender),
                    i("/Descent " + r.metadata.decender),
                    i("/CapHeight " + r.metadata.capHeight),
                    i(">>"),
                    i("endobj");
                    var p = a();
                    i("<<"),
                    i("/Type /Font"),
                    i("/BaseFont /" + F(r.fontName)),
                    i("/FontDescriptor " + d + " 0 R"),
                    i("/W " + t.API.PDFObject.convert(s)),
                    i("/CIDToGIDMap /Identity"),
                    i("/DW 1000"),
                    i("/Subtype /CIDFontType2"),
                    i("/CIDSystemInfo"),
                    i("<<"),
                    i("/Supplement 0"),
                    i("/Registry (Adobe)"),
                    i("/Ordering (" + r.encoding + ")"),
                    i(">>"),
                    i(">>"),
                    i("endobj"),
                    r.objectNumber = a(),
                    i("<<"),
                    i("/Type /Font"),
                    i("/Subtype /Type0"),
                    i("/ToUnicode " + f + " 0 R"),
                    i("/BaseFont /" + F(r.fontName)),
                    i("/Encoding /" + r.encoding),
                    i("/DescendantFonts [" + p + " 0 R]"),
                    i(">>"),
                    i("endobj"),
                    r.isAlreadyPutted = !0
                }
            }(e)
        }
        ]);
        e.events.push(["putFont", function(e) {
            !function(e) {
                var r = e.font
                  , i = e.out
                  , a = e.newObject
                  , o = e.putStream;
                if (r.metadata instanceof t.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
                    for (var s = r.metadata.rawData, c = "", u = 0; u < s.length; u++)
                        c += String.fromCharCode(s[u]);
                    var l = a();
                    o({
                        data: c,
                        addLength1: !0,
                        objectId: l
                    }),
                    i("endobj");
                    var h = a();
                    o({
                        data: n(r.metadata.toUnicode),
                        addLength1: !0,
                        objectId: h
                    }),
                    i("endobj");
                    var f = a();
                    i("<<"),
                    i("/Descent " + r.metadata.decender),
                    i("/CapHeight " + r.metadata.capHeight),
                    i("/StemV " + r.metadata.stemV),
                    i("/Type /FontDescriptor"),
                    i("/FontFile2 " + l + " 0 R"),
                    i("/Flags 96"),
                    i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)),
                    i("/FontName /" + F(r.fontName)),
                    i("/ItalicAngle " + r.metadata.italicAngle),
                    i("/Ascent " + r.metadata.ascender),
                    i(">>"),
                    i("endobj"),
                    r.objectNumber = a();
                    for (var d = 0; d < r.metadata.hmtx.widths.length; d++)
                        r.metadata.hmtx.widths[d] = parseInt(r.metadata.hmtx.widths[d] * (1e3 / r.metadata.head.unitsPerEm));
                    i("<</Subtype/TrueType/Type/Font/ToUnicode " + h + " 0 R/BaseFont/" + F(r.fontName) + "/FontDescriptor " + f + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"),
                    i("endobj"),
                    r.isAlreadyPutted = !0
                }
            }(e)
        }
        ]);
        var i = function(t) {
            var e, n = t.text || "", i = t.x, a = t.y, o = t.options || {}, s = t.mutex || {}, c = s.pdfEscape, u = s.activeFontKey, l = s.fonts, h = u, f = "", d = 0, p = "", g = l[h].encoding;
            if ("Identity-H" !== l[h].encoding)
                return {
                    text: n,
                    x: i,
                    y: a,
                    options: o,
                    mutex: s
                };
            for (p = n,
            h = u,
            Array.isArray(n) && (p = n[0]),
            d = 0; d < p.length; d += 1)
                l[h].metadata.hasOwnProperty("cmap") && (e = l[h].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),
                e || p[d].charCodeAt(0) < 256 && l[h].metadata.hasOwnProperty("Unicode") ? f += p[d] : f += "";
            var m = "";
            return parseInt(h.slice(1)) < 14 || "WinAnsiEncoding" === g ? m = c(f, h).split("").map((function(t) {
                return t.charCodeAt(0).toString(16)
            }
            )).join("") : "Identity-H" === g && (m = r(f, l[h])),
            s.isHex = !0,
            {
                text: m,
                x: i,
                y: a,
                options: o,
                mutex: s
            }
        };
        e.events.push(["postProcessText", function(t) {
            var e = t.text || ""
              , r = []
              , n = {
                text: e,
                x: t.x,
                y: t.y,
                options: t.options,
                mutex: t.mutex
            };
            if (Array.isArray(e)) {
                var a = 0;
                for (a = 0; a < e.length; a += 1)
                    Array.isArray(e[a]) && 3 === e[a].length ? r.push([i(Object.assign({}, n, {
                        text: e[a][0]
                    })).text, e[a][1], e[a][2]]) : r.push(i(Object.assign({}, n, {
                        text: e[a]
                    })).text);
                t.text = r
            } else
                t.text = i(Object.assign({}, n, {
                    text: e
                })).text
        }
        ])
    }(M),
    /**
   * @license
   * jsPDF virtual FileSystem functionality
   *
   * Licensed under the MIT License.
   * http://opensource.org/licenses/mit-license
   */
    function(t) {
        var e = function() {
            return void 0 === this.internal.vFS && (this.internal.vFS = {}),
            !0
        };
        t.existsFileInVFS = function(t) {
            return e.call(this),
            void 0 !== this.internal.vFS[t]
        }
        ,
        t.addFileToVFS = function(t, r) {
            return e.call(this),
            this.internal.vFS[t] = r,
            this
        }
        ,
        t.getFileFromVFS = function(t) {
            return e.call(this),
            void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null
        }
    }(M.API),
    /**
   * @license
   * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
   * MIT License
   */
    function(t) {
        t.__bidiEngine__ = t.prototype.__bidiEngine__ = function(t) {
            var r, n, i, a, o, s, c, u = e, l = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]], h = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]], f = {
                L: 0,
                R: 1,
                EN: 2,
                AN: 3,
                N: 4,
                B: 5,
                S: 6
            }, d = {
                0: 0,
                5: 1,
                6: 2,
                7: 3,
                32: 4,
                251: 5,
                254: 6,
                255: 7
            }, p = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"], g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/), m = !1, v = 0;
            this.__bidiEngine__ = {};
            var b = function(t) {
                var e = t.charCodeAt()
                  , r = e >> 8
                  , n = d[r];
                return void 0 !== n ? u[256 * n + (255 & e)] : 252 === r || 253 === r ? "AL" : g.test(r) ? "L" : 8 === r ? "R" : "N"
            }
              , y = function(t) {
                for (var e, r = 0; r < t.length; r++) {
                    if ("L" === (e = b(t.charAt(r))))
                        return !1;
                    if ("R" === e)
                        return !0
                }
                return !1
            }
              , w = function(t, e, o, s) {
                var c, u, l, h, f = e[s];
                switch (f) {
                case "L":
                case "R":
                    m = !1;
                    break;
                case "N":
                case "AN":
                    break;
                case "EN":
                    m && (f = "AN");
                    break;
                case "AL":
                    m = !0,
                    f = "R";
                    break;
                case "WS":
                    f = "N";
                    break;
                case "CS":
                    s < 1 || s + 1 >= e.length || "EN" !== (c = o[s - 1]) && "AN" !== c || "EN" !== (u = e[s + 1]) && "AN" !== u ? f = "N" : m && (u = "AN"),
                    f = u === c ? u : "N";
                    break;
                case "ES":
                    f = "EN" === (c = s > 0 ? o[s - 1] : "B") && s + 1 < e.length && "EN" === e[s + 1] ? "EN" : "N";
                    break;
                case "ET":
                    if (s > 0 && "EN" === o[s - 1]) {
                        f = "EN";
                        break
                    }
                    if (m) {
                        f = "N";
                        break
                    }
                    for (l = s + 1,
                    h = e.length; l < h && "ET" === e[l]; )
                        l++;
                    f = l < h && "EN" === e[l] ? "EN" : "N";
                    break;
                case "NSM":
                    if (i && !a) {
                        for (h = e.length,
                        l = s + 1; l < h && "NSM" === e[l]; )
                            l++;
                        if (l < h) {
                            var d = t[s]
                              , p = d >= 1425 && d <= 2303 || 64286 === d;
                            if (c = e[l],
                            p && ("R" === c || "AL" === c)) {
                                f = "R";
                                break
                            }
                        }
                    }
                    f = s < 1 || "B" === (c = e[s - 1]) ? "N" : o[s - 1];
                    break;
                case "B":
                    m = !1,
                    r = !0,
                    f = v;
                    break;
                case "S":
                    n = !0,
                    f = "N";
                    break;
                case "LRE":
                case "RLE":
                case "LRO":
                case "RLO":
                case "PDF":
                    m = !1;
                    break;
                case "BN":
                    f = "N"
                }
                return f
            }
              , N = function(t, e, r) {
                var n = t.split("");
                return r && L(n, r, {
                    hiLevel: v
                }),
                n.reverse(),
                e && e.reverse(),
                n.join("")
            }
              , L = function(t, e, i) {
                var a, o, s, c, u, d = -1, p = t.length, g = 0, y = [], N = v ? h : l, L = [];
                for (m = !1,
                r = !1,
                n = !1,
                o = 0; o < p; o++)
                    L[o] = b(t[o]);
                for (s = 0; s < p; s++) {
                    if (u = g,
                    y[s] = w(t, L, y, s),
                    a = 240 & (g = N[u][f[y[s]]]),
                    g &= 15,
                    e[s] = c = N[g][5],
                    a > 0)
                        if (16 === a) {
                            for (o = d; o < s; o++)
                                e[o] = 1;
                            d = -1
                        } else
                            d = -1;
                    if (N[g][6])
                        -1 === d && (d = s);
                    else if (d > -1) {
                        for (o = d; o < s; o++)
                            e[o] = c;
                        d = -1
                    }
                    "B" === L[s] && (e[s] = 0),
                    i.hiLevel |= c
                }
                n && function(t, e, r) {
                    for (var n = 0; n < r; n++)
                        if ("S" === t[n]) {
                            e[n] = v;
                            for (var i = n - 1; i >= 0 && "WS" === t[i]; i--)
                                e[i] = v
                        }
                }(L, e, p)
            }
              , A = function(t, e, n, i, a) {
                if (!(a.hiLevel < t)) {
                    if (1 === t && 1 === v && !r)
                        return e.reverse(),
                        void (n && n.reverse());
                    for (var o, s, c, u, l = e.length, h = 0; h < l; ) {
                        if (i[h] >= t) {
                            for (c = h + 1; c < l && i[c] >= t; )
                                c++;
                            for (u = h,
                            s = c - 1; u < s; u++,
                            s--)
                                o = e[u],
                                e[u] = e[s],
                                e[s] = o,
                                n && (o = n[u],
                                n[u] = n[s],
                                n[s] = o);
                            h = c
                        }
                        h++
                    }
                }
            }
              , x = function(t, e, r) {
                var n = t.split("")
                  , i = {
                    hiLevel: v
                };
                return r || (r = []),
                L(n, r, i),
                function(t, e, r) {
                    if (0 !== r.hiLevel && c)
                        for (var n, i = 0; i < t.length; i++)
                            1 === e[i] && (n = p.indexOf(t[i])) >= 0 && (t[i] = p[n + 1])
                }(n, r, i),
                A(2, n, e, r, i),
                A(1, n, e, r, i),
                n.join("")
            };
            return this.__bidiEngine__.doBidiReorder = function(t, e, r) {
                if (function(t, e) {
                    if (e)
                        for (var r = 0; r < t.length; r++)
                            e[r] = r;
                    void 0 === a && (a = y(t)),
                    void 0 === s && (s = y(t))
                }(t, e),
                i || !o || s)
                    if (i && o && a ^ s)
                        v = a ? 1 : 0,
                        t = N(t, e, r);
                    else if (!i && o && s)
                        v = a ? 1 : 0,
                        t = x(t, e, r),
                        t = N(t, e);
                    else if (!i || a || o || s) {
                        if (i && !o && a ^ s)
                            t = N(t, e),
                            a ? (v = 0,
                            t = x(t, e, r)) : (v = 1,
                            t = x(t, e, r),
                            t = N(t, e));
                        else if (i && a && !o && s)
                            v = 1,
                            t = x(t, e, r),
                            t = N(t, e);
                        else if (!i && !o && a ^ s) {
                            var n = c;
                            a ? (v = 1,
                            t = x(t, e, r),
                            v = 0,
                            c = !1,
                            t = x(t, e, r),
                            c = n) : (v = 0,
                            t = x(t, e, r),
                            t = N(t, e),
                            v = 1,
                            c = !1,
                            t = x(t, e, r),
                            c = n,
                            t = N(t, e))
                        }
                    } else
                        v = 0,
                        t = x(t, e, r);
                else
                    v = a ? 1 : 0,
                    t = x(t, e, r);
                return t
            }
            ,
            this.__bidiEngine__.setOptions = function(t) {
                t && (i = t.isInputVisual,
                o = t.isOutputVisual,
                a = t.isInputRtl,
                s = t.isOutputRtl,
                c = t.isSymmetricSwapping)
            }
            ,
            this.__bidiEngine__.setOptions(t),
            this.__bidiEngine__
        }
        ;
        var e = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"]
          , r = new t.__bidiEngine__({
            isInputVisual: !0
        });
        t.API.events.push(["postProcessText", function(t) {
            var e = t.text
              , n = (t.x,
            t.y,
            t.options || {})
              , i = (t.mutex,
            n.lang,
            []);
            if (n.isInputVisual = "boolean" != typeof n.isInputVisual || n.isInputVisual,
            r.setOptions(n),
            "[object Array]" === Object.prototype.toString.call(e)) {
                var a = 0;
                for (i = [],
                a = 0; a < e.length; a += 1)
                    "[object Array]" === Object.prototype.toString.call(e[a]) ? i.push([r.doBidiReorder(e[a][0]), e[a][1], e[a][2]]) : i.push([r.doBidiReorder(e[a])]);
                t.text = i
            } else
                t.text = r.doBidiReorder(e);
            r.setOptions({
                isInputVisual: !0
            })
        }
        ])
    }(M),
    M.API.TTFFont = function() {
        function t(t) {
            var e;
            if (this.rawData = t,
            e = this.contents = new Te(t),
            this.contents.pos = 4,
            "ttcf" === e.readString(4))
                throw new Error("TTCF not supported.");
            e.pos = 0,
            this.parse(),
            this.subset = new ar(this),
            this.registerTTF()
        }
        return t.open = function(e) {
            return new t(e)
        }
        ,
        t.prototype.parse = function() {
            return this.directory = new Ue(this.contents),
            this.head = new We(this),
            this.name = new Ze(this),
            this.cmap = new Ge(this),
            this.toUnicode = {},
            this.hhea = new Ye(this),
            this.maxp = new $e(this),
            this.hmtx = new Qe(this),
            this.post = new Xe(this),
            this.os2 = new Je(this),
            this.loca = new ir(this),
            this.glyf = new er(this),
            this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender,
            this.decender = this.os2.exists && this.os2.decender || this.hhea.decender,
            this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap,
            this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax]
        }
        ,
        t.prototype.registerTTF = function() {
            var t, e, r, n, i;
            if (this.scaleFactor = 1e3 / this.head.unitsPerEm,
            this.bbox = function() {
                var e, r, n, i;
                for (i = [],
                e = 0,
                r = (n = this.bbox).length; e < r; e++)
                    t = n[e],
                    i.push(Math.round(t * this.scaleFactor));
                return i
            }
            .call(this),
            this.stemV = 0,
            this.post.exists ? (r = 255 & (n = this.post.italic_angle),
            0 != (32768 & (e = n >> 16)) && (e = -(1 + (65535 ^ e))),
            this.italicAngle = +(e + "." + r)) : this.italicAngle = 0,
            this.ascender = Math.round(this.ascender * this.scaleFactor),
            this.decender = Math.round(this.decender * this.scaleFactor),
            this.lineGap = Math.round(this.lineGap * this.scaleFactor),
            this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender,
            this.xHeight = this.os2.exists && this.os2.xHeight || 0,
            this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8,
            this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i,
            this.isScript = 10 === this.familyClass,
            this.flags = 0,
            this.post.isFixedPitch && (this.flags |= 1),
            this.isSerif && (this.flags |= 2),
            this.isScript && (this.flags |= 8),
            0 !== this.italicAngle && (this.flags |= 64),
            this.flags |= 32,
            !this.cmap.unicode)
                throw new Error("No unicode cmap for font")
        }
        ,
        t.prototype.characterToGlyph = function(t) {
            var e;
            return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0
        }
        ,
        t.prototype.widthOfGlyph = function(t) {
            var e;
            return e = 1e3 / this.head.unitsPerEm,
            this.hmtx.forGlyph(t).advance * e
        }
        ,
        t.prototype.widthOfString = function(t, e, r) {
            var n, i, a, o;
            for (a = 0,
            i = 0,
            o = (t = "" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i)
                n = t.charCodeAt(i),
                a += this.widthOfGlyph(this.characterToGlyph(n)) + r * (1e3 / e) || 0;
            return a * (e / 1e3)
        }
        ,
        t.prototype.lineHeight = function(t, e) {
            var r;
            return null == e && (e = !1),
            r = e ? this.lineGap : 0,
            (this.ascender + r - this.decender) / 1e3 * t
        }
        ,
        t
    }();
    var Re, Te = function() {
        function t(t) {
            this.data = null != t ? t : [],
            this.pos = 0,
            this.length = this.data.length
        }
        return t.prototype.readByte = function() {
            return this.data[this.pos++]
        }
        ,
        t.prototype.writeByte = function(t) {
            return this.data[this.pos++] = t
        }
        ,
        t.prototype.readUInt32 = function() {
            return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte()
        }
        ,
        t.prototype.writeUInt32 = function(t) {
            return this.writeByte(t >>> 24 & 255),
            this.writeByte(t >> 16 & 255),
            this.writeByte(t >> 8 & 255),
            this.writeByte(255 & t)
        }
        ,
        t.prototype.readInt32 = function() {
            var t;
            return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t
        }
        ,
        t.prototype.writeInt32 = function(t) {
            return t < 0 && (t += 4294967296),
            this.writeUInt32(t)
        }
        ,
        t.prototype.readUInt16 = function() {
            return this.readByte() << 8 | this.readByte()
        }
        ,
        t.prototype.writeUInt16 = function(t) {
            return this.writeByte(t >> 8 & 255),
            this.writeByte(255 & t)
        }
        ,
        t.prototype.readInt16 = function() {
            var t;
            return (t = this.readUInt16()) >= 32768 ? t - 65536 : t
        }
        ,
        t.prototype.writeInt16 = function(t) {
            return t < 0 && (t += 65536),
            this.writeUInt16(t)
        }
        ,
        t.prototype.readString = function(t) {
            var e, r;
            for (r = [],
            e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e)
                r[e] = String.fromCharCode(this.readByte());
            return r.join("")
        }
        ,
        t.prototype.writeString = function(t) {
            var e, r, n;
            for (n = [],
            e = 0,
            r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e)
                n.push(this.writeByte(t.charCodeAt(e)));
            return n
        }
        ,
        t.prototype.readShort = function() {
            return this.readInt16()
        }
        ,
        t.prototype.writeShort = function(t) {
            return this.writeInt16(t)
        }
        ,
        t.prototype.readLongLong = function() {
            var t, e, r, n, i, a, o, s;
            return t = this.readByte(),
            e = this.readByte(),
            r = this.readByte(),
            n = this.readByte(),
            i = this.readByte(),
            a = this.readByte(),
            o = this.readByte(),
            s = this.readByte(),
            128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n + 16777216 * i + 65536 * a + 256 * o + s
        }
        ,
        t.prototype.writeLongLong = function(t) {
            var e, r;
            return e = Math.floor(t / 4294967296),
            r = 4294967295 & t,
            this.writeByte(e >> 24 & 255),
            this.writeByte(e >> 16 & 255),
            this.writeByte(e >> 8 & 255),
            this.writeByte(255 & e),
            this.writeByte(r >> 24 & 255),
            this.writeByte(r >> 16 & 255),
            this.writeByte(r >> 8 & 255),
            this.writeByte(255 & r)
        }
        ,
        t.prototype.readInt = function() {
            return this.readInt32()
        }
        ,
        t.prototype.writeInt = function(t) {
            return this.writeInt32(t)
        }
        ,
        t.prototype.read = function(t) {
            var e, r;
            for (e = [],
            r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r)
                e.push(this.readByte());
            return e
        }
        ,
        t.prototype.write = function(t) {
            var e, r, n, i;
            for (i = [],
            r = 0,
            n = t.length; r < n; r++)
                e = t[r],
                i.push(this.writeByte(e));
            return i
        }
        ,
        t
    }(), Ue = function() {
        var t;
        function e(t) {
            var e, r, n;
            for (this.scalarType = t.readInt(),
            this.tableCount = t.readShort(),
            this.searchRange = t.readShort(),
            this.entrySelector = t.readShort(),
            this.rangeShift = t.readShort(),
            this.tables = {},
            r = 0,
            n = this.tableCount; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r)
                e = {
                    tag: t.readString(4),
                    checksum: t.readInt(),
                    offset: t.readInt(),
                    length: t.readInt()
                },
                this.tables[e.tag] = e
        }
        return e.prototype.encode = function(e) {
            var r, n, i, a, o, s, c, u, l, h, f, d, p;
            for (p in f = Object.keys(e).length,
            s = Math.log(2),
            l = 16 * Math.floor(Math.log(f) / s),
            a = Math.floor(l / s),
            u = 16 * f - l,
            (n = new Te).writeInt(this.scalarType),
            n.writeShort(f),
            n.writeShort(l),
            n.writeShort(a),
            n.writeShort(u),
            i = 16 * f,
            c = n.pos + i,
            o = null,
            d = [],
            e)
                for (h = e[p],
                n.writeString(p),
                n.writeInt(t(h)),
                n.writeInt(c),
                n.writeInt(h.length),
                d = d.concat(h),
                "head" === p && (o = c),
                c += h.length; c % 4; )
                    d.push(0),
                    c++;
            return n.write(d),
            r = 2981146554 - t(n.data),
            n.pos = o + 8,
            n.writeUInt32(r),
            n.data
        }
        ,
        t = function(t) {
            var e, r, n, i;
            for (t = tr.call(t); t.length % 4; )
                t.push(0);
            for (n = new Te(t),
            r = 0,
            e = 0,
            i = t.length; e < i; e = e += 4)
                r += n.readUInt32();
            return 4294967295 & r
        }
        ,
        e
    }(), ze = {}.hasOwnProperty, He = function(t, e) {
        for (var r in e)
            ze.call(e, r) && (t[r] = e[r]);
        function n() {
            this.constructor = t
        }
        return n.prototype = e.prototype,
        t.prototype = new n,
        t.__super__ = e.prototype,
        t
    }, We = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "head",
        e.prototype.parse = function(t) {
            return t.pos = this.offset,
            this.version = t.readInt(),
            this.revision = t.readInt(),
            this.checkSumAdjustment = t.readInt(),
            this.magicNumber = t.readInt(),
            this.flags = t.readShort(),
            this.unitsPerEm = t.readShort(),
            this.created = t.readLongLong(),
            this.modified = t.readLongLong(),
            this.xMin = t.readShort(),
            this.yMin = t.readShort(),
            this.xMax = t.readShort(),
            this.yMax = t.readShort(),
            this.macStyle = t.readShort(),
            this.lowestRecPPEM = t.readShort(),
            this.fontDirectionHint = t.readShort(),
            this.indexToLocFormat = t.readShort(),
            this.glyphDataFormat = t.readShort()
        }
        ,
        e.prototype.encode = function(t) {
            var e;
            return (e = new Te).writeInt(this.version),
            e.writeInt(this.revision),
            e.writeInt(this.checkSumAdjustment),
            e.writeInt(this.magicNumber),
            e.writeShort(this.flags),
            e.writeShort(this.unitsPerEm),
            e.writeLongLong(this.created),
            e.writeLongLong(this.modified),
            e.writeShort(this.xMin),
            e.writeShort(this.yMin),
            e.writeShort(this.xMax),
            e.writeShort(this.yMax),
            e.writeShort(this.macStyle),
            e.writeShort(this.lowestRecPPEM),
            e.writeShort(this.fontDirectionHint),
            e.writeShort(t),
            e.writeShort(this.glyphDataFormat),
            e.data
        }
        ,
        e
    }(Re = function() {
        function t(t) {
            var e;
            this.file = t,
            e = this.file.directory.tables[this.tag],
            this.exists = !!e,
            e && (this.offset = e.offset,
            this.length = e.length,
            this.parse(this.file.contents))
        }
        return t.prototype.parse = function() {}
        ,
        t.prototype.encode = function() {}
        ,
        t.prototype.raw = function() {
            return this.exists ? (this.file.contents.pos = this.offset,
            this.file.contents.read(this.length)) : null
        }
        ,
        t
    }()), Ve = function() {
        function t(t, e) {
            var r, n, i, a, o, s, c, u, l, h, f, d, p, g, m, v, b;
            switch (this.platformID = t.readUInt16(),
            this.encodingID = t.readShort(),
            this.offset = e + t.readInt(),
            l = t.pos,
            t.pos = this.offset,
            this.format = t.readUInt16(),
            this.length = t.readUInt16(),
            this.language = t.readUInt16(),
            this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format,
            this.codeMap = {},
            this.format) {
            case 0:
                for (s = 0; s < 256; ++s)
                    this.codeMap[s] = t.readByte();
                break;
            case 4:
                for (f = t.readUInt16(),
                h = f / 2,
                t.pos += 6,
                i = function() {
                    var e, r;
                    for (r = [],
                    s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)
                        r.push(t.readUInt16());
                    return r
                }(),
                t.pos += 2,
                p = function() {
                    var e, r;
                    for (r = [],
                    s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)
                        r.push(t.readUInt16());
                    return r
                }(),
                c = function() {
                    var e, r;
                    for (r = [],
                    s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)
                        r.push(t.readUInt16());
                    return r
                }(),
                u = function() {
                    var e, r;
                    for (r = [],
                    s = e = 0; 0 <= h ? e < h : e > h; s = 0 <= h ? ++e : --e)
                        r.push(t.readUInt16());
                    return r
                }(),
                n = (this.length - t.pos + this.offset) / 2,
                o = function() {
                    var e, r;
                    for (r = [],
                    s = e = 0; 0 <= n ? e < n : e > n; s = 0 <= n ? ++e : --e)
                        r.push(t.readUInt16());
                    return r
                }(),
                s = m = 0,
                b = i.length; m < b; s = ++m)
                    for (g = i[s],
                    r = v = d = p[s]; d <= g ? v <= g : v >= g; r = d <= g ? ++v : --v)
                        0 === u[s] ? a = r + c[s] : 0 !== (a = o[u[s] / 2 + (r - d) - (h - s)] || 0) && (a += c[s]),
                        this.codeMap[r] = 65535 & a
            }
            t.pos = l
        }
        return t.encode = function(t, e) {
            var r, n, i, a, o, s, c, u, l, h, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, F, I, C, j, O, B, M, E, q, D, R, T, U, z, H, W, V, G, Y;
            switch (F = new Te,
            a = Object.keys(t).sort((function(t, e) {
                return t - e
            }
            )),
            e) {
            case "macroman":
                for (p = 0,
                g = function() {
                    var t = [];
                    for (d = 0; d < 256; ++d)
                        t.push(0);
                    return t
                }(),
                v = {
                    0: 0
                },
                i = {},
                I = 0,
                B = a.length; I < B; I++)
                    null == v[W = t[n = a[I]]] && (v[W] = ++p),
                    i[n] = {
                        old: t[n],
                        new: v[t[n]]
                    },
                    g[n] = v[t[n]];
                return F.writeUInt16(1),
                F.writeUInt16(0),
                F.writeUInt32(12),
                F.writeUInt16(0),
                F.writeUInt16(262),
                F.writeUInt16(0),
                F.write(g),
                {
                    charMap: i,
                    subtable: F.data,
                    maxGlyphID: p + 1
                };
            case "unicode":
                for (P = [],
                l = [],
                b = 0,
                v = {},
                r = {},
                m = c = null,
                C = 0,
                M = a.length; C < M; C++)
                    null == v[w = t[n = a[C]]] && (v[w] = ++b),
                    r[n] = {
                        old: w,
                        new: v[w]
                    },
                    o = v[w] - n,
                    null != m && o === c || (m && l.push(m),
                    P.push(n),
                    c = o),
                    m = n;
                for (m && l.push(m),
                l.push(65535),
                P.push(65535),
                S = 2 * (x = P.length),
                A = 2 * Math.pow(Math.log(x) / Math.LN2, 2),
                h = Math.log(A / 2) / Math.LN2,
                L = 2 * x - A,
                s = [],
                N = [],
                f = [],
                d = j = 0,
                E = P.length; j < E; d = ++j) {
                    if (_ = P[d],
                    u = l[d],
                    65535 === _) {
                        s.push(0),
                        N.push(0);
                        break
                    }
                    if (_ - (k = r[_].new) >= 32768)
                        for (s.push(0),
                        N.push(2 * (f.length + x - d)),
                        n = O = _; _ <= u ? O <= u : O >= u; n = _ <= u ? ++O : --O)
                            f.push(r[n].new);
                    else
                        s.push(k - _),
                        N.push(0)
                }
                for (F.writeUInt16(3),
                F.writeUInt16(1),
                F.writeUInt32(12),
                F.writeUInt16(4),
                F.writeUInt16(16 + 8 * x + 2 * f.length),
                F.writeUInt16(0),
                F.writeUInt16(S),
                F.writeUInt16(A),
                F.writeUInt16(h),
                F.writeUInt16(L),
                z = 0,
                q = l.length; z < q; z++)
                    n = l[z],
                    F.writeUInt16(n);
                for (F.writeUInt16(0),
                H = 0,
                D = P.length; H < D; H++)
                    n = P[H],
                    F.writeUInt16(n);
                for (V = 0,
                R = s.length; V < R; V++)
                    o = s[V],
                    F.writeUInt16(o);
                for (G = 0,
                T = N.length; G < T; G++)
                    y = N[G],
                    F.writeUInt16(y);
                for (Y = 0,
                U = f.length; Y < U; Y++)
                    p = f[Y],
                    F.writeUInt16(p);
                return {
                    charMap: r,
                    subtable: F.data,
                    maxGlyphID: b + 1
                }
            }
        }
        ,
        t
    }(), Ge = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "cmap",
        e.prototype.parse = function(t) {
            var e, r, n;
            for (t.pos = this.offset,
            this.version = t.readUInt16(),
            n = t.readUInt16(),
            this.tables = [],
            this.unicode = null,
            r = 0; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r)
                e = new Ve(t,this.offset),
                this.tables.push(e),
                e.isUnicode && null == this.unicode && (this.unicode = e);
            return !0
        }
        ,
        e.encode = function(t, e) {
            var r, n;
            return null == e && (e = "macroman"),
            r = Ve.encode(t, e),
            (n = new Te).writeUInt16(0),
            n.writeUInt16(1),
            r.table = n.data.concat(r.subtable),
            r
        }
        ,
        e
    }(Re), Ye = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "hhea",
        e.prototype.parse = function(t) {
            return t.pos = this.offset,
            this.version = t.readInt(),
            this.ascender = t.readShort(),
            this.decender = t.readShort(),
            this.lineGap = t.readShort(),
            this.advanceWidthMax = t.readShort(),
            this.minLeftSideBearing = t.readShort(),
            this.minRightSideBearing = t.readShort(),
            this.xMaxExtent = t.readShort(),
            this.caretSlopeRise = t.readShort(),
            this.caretSlopeRun = t.readShort(),
            this.caretOffset = t.readShort(),
            t.pos += 8,
            this.metricDataFormat = t.readShort(),
            this.numberOfMetrics = t.readUInt16()
        }
        ,
        e
    }(Re), Je = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "OS/2",
        e.prototype.parse = function(t) {
            if (t.pos = this.offset,
            this.version = t.readUInt16(),
            this.averageCharWidth = t.readShort(),
            this.weightClass = t.readUInt16(),
            this.widthClass = t.readUInt16(),
            this.type = t.readShort(),
            this.ySubscriptXSize = t.readShort(),
            this.ySubscriptYSize = t.readShort(),
            this.ySubscriptXOffset = t.readShort(),
            this.ySubscriptYOffset = t.readShort(),
            this.ySuperscriptXSize = t.readShort(),
            this.ySuperscriptYSize = t.readShort(),
            this.ySuperscriptXOffset = t.readShort(),
            this.ySuperscriptYOffset = t.readShort(),
            this.yStrikeoutSize = t.readShort(),
            this.yStrikeoutPosition = t.readShort(),
            this.familyClass = t.readShort(),
            this.panose = function() {
                var e, r;
                for (r = [],
                e = 0; e < 10; ++e)
                    r.push(t.readByte());
                return r
            }(),
            this.charRange = function() {
                var e, r;
                for (r = [],
                e = 0; e < 4; ++e)
                    r.push(t.readInt());
                return r
            }(),
            this.vendorID = t.readString(4),
            this.selection = t.readShort(),
            this.firstCharIndex = t.readShort(),
            this.lastCharIndex = t.readShort(),
            this.version > 0 && (this.ascent = t.readShort(),
            this.descent = t.readShort(),
            this.lineGap = t.readShort(),
            this.winAscent = t.readShort(),
            this.winDescent = t.readShort(),
            this.codePageRange = function() {
                var e, r;
                for (r = [],
                e = 0; e < 2; e = ++e)
                    r.push(t.readInt());
                return r
            }(),
            this.version > 1))
                return this.xHeight = t.readShort(),
                this.capHeight = t.readShort(),
                this.defaultChar = t.readShort(),
                this.breakChar = t.readShort(),
                this.maxContext = t.readShort()
        }
        ,
        e
    }(Re), Xe = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "post",
        e.prototype.parse = function(t) {
            var e, r, n;
            switch (t.pos = this.offset,
            this.format = t.readInt(),
            this.italicAngle = t.readInt(),
            this.underlinePosition = t.readShort(),
            this.underlineThickness = t.readShort(),
            this.isFixedPitch = t.readInt(),
            this.minMemType42 = t.readInt(),
            this.maxMemType42 = t.readInt(),
            this.minMemType1 = t.readInt(),
            this.maxMemType1 = t.readInt(),
            this.format) {
            case 65536:
                break;
            case 131072:
                var i;
                for (r = t.readUInt16(),
                this.glyphNameIndex = [],
                i = 0; 0 <= r ? i < r : i > r; i = 0 <= r ? ++i : --i)
                    this.glyphNameIndex.push(t.readUInt16());
                for (this.names = [],
                n = []; t.pos < this.offset + this.length; )
                    e = t.readByte(),
                    n.push(this.names.push(t.readString(e)));
                return n;
            case 151552:
                return r = t.readUInt16(),
                this.offsets = t.read(r);
            case 196608:
                break;
            case 262144:
                return this.map = function() {
                    var e, r, n;
                    for (n = [],
                    i = e = 0,
                    r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i = 0 <= r ? ++e : --e)
                        n.push(t.readUInt32());
                    return n
                }
                .call(this)
            }
        }
        ,
        e
    }(Re), Ke = function(t, e) {
        this.raw = t,
        this.length = t.length,
        this.platformID = e.platformID,
        this.encodingID = e.encodingID,
        this.languageID = e.languageID
    }, Ze = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "name",
        e.prototype.parse = function(t) {
            var e, r, n, i, a, o, s, c, u, l, h;
            for (t.pos = this.offset,
            t.readShort(),
            e = t.readShort(),
            o = t.readShort(),
            r = [],
            i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i)
                r.push({
                    platformID: t.readShort(),
                    encodingID: t.readShort(),
                    languageID: t.readShort(),
                    nameID: t.readShort(),
                    length: t.readShort(),
                    offset: this.offset + o + t.readShort()
                });
            for (s = {},
            i = u = 0,
            l = r.length; u < l; i = ++u)
                n = r[i],
                t.pos = n.offset,
                c = t.readString(n.length),
                a = new Ke(c,n),
                null == s[h = n.nameID] && (s[h] = []),
                s[n.nameID].push(a);
            this.strings = s,
            this.copyright = s[0],
            this.fontFamily = s[1],
            this.fontSubfamily = s[2],
            this.uniqueSubfamily = s[3],
            this.fontName = s[4],
            this.version = s[5];
            try {
                this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "")
            } catch (t) {
                this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "")
            }
            return this.trademark = s[7],
            this.manufacturer = s[8],
            this.designer = s[9],
            this.description = s[10],
            this.vendorUrl = s[11],
            this.designerUrl = s[12],
            this.license = s[13],
            this.licenseUrl = s[14],
            this.preferredFamily = s[15],
            this.preferredSubfamily = s[17],
            this.compatibleFull = s[18],
            this.sampleText = s[19]
        }
        ,
        e
    }(Re), $e = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "maxp",
        e.prototype.parse = function(t) {
            return t.pos = this.offset,
            this.version = t.readInt(),
            this.numGlyphs = t.readUInt16(),
            this.maxPoints = t.readUInt16(),
            this.maxContours = t.readUInt16(),
            this.maxCompositePoints = t.readUInt16(),
            this.maxComponentContours = t.readUInt16(),
            this.maxZones = t.readUInt16(),
            this.maxTwilightPoints = t.readUInt16(),
            this.maxStorage = t.readUInt16(),
            this.maxFunctionDefs = t.readUInt16(),
            this.maxInstructionDefs = t.readUInt16(),
            this.maxStackElements = t.readUInt16(),
            this.maxSizeOfInstructions = t.readUInt16(),
            this.maxComponentElements = t.readUInt16(),
            this.maxComponentDepth = t.readUInt16()
        }
        ,
        e
    }(Re), Qe = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "hmtx",
        e.prototype.parse = function(t) {
            var e, r, n, i, a, o, s;
            for (t.pos = this.offset,
            this.metrics = [],
            e = 0,
            o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e)
                this.metrics.push({
                    advance: t.readUInt16(),
                    lsb: t.readInt16()
                });
            for (n = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics,
            this.leftSideBearings = function() {
                var r, i;
                for (i = [],
                e = r = 0; 0 <= n ? r < n : r > n; e = 0 <= n ? ++r : --r)
                    i.push(t.readInt16());
                return i
            }(),
            this.widths = function() {
                var t, e, r, n;
                for (n = [],
                t = 0,
                e = (r = this.metrics).length; t < e; t++)
                    i = r[t],
                    n.push(i.advance);
                return n
            }
            .call(this),
            r = this.widths[this.widths.length - 1],
            s = [],
            e = a = 0; 0 <= n ? a < n : a > n; e = 0 <= n ? ++a : --a)
                s.push(this.widths.push(r));
            return s
        }
        ,
        e.prototype.forGlyph = function(t) {
            return t in this.metrics ? this.metrics[t] : {
                advance: this.metrics[this.metrics.length - 1].advance,
                lsb: this.leftSideBearings[t - this.metrics.length]
            }
        }
        ,
        e
    }(Re), tr = [].slice, er = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "glyf",
        e.prototype.parse = function() {
            return this.cache = {}
        }
        ,
        e.prototype.glyphFor = function(t) {
            var e, r, n, i, a, o, s, c, u, l;
            return t in this.cache ? this.cache[t] : (i = this.file.loca,
            e = this.file.contents,
            r = i.indexOf(t),
            0 === (n = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r,
            a = (o = new Te(e.read(n))).readShort(),
            c = o.readShort(),
            l = o.readShort(),
            s = o.readShort(),
            u = o.readShort(),
            this.cache[t] = -1 === a ? new nr(o,c,l,s,u) : new rr(o,a,c,l,s,u),
            this.cache[t]))
        }
        ,
        e.prototype.encode = function(t, e, r) {
            var n, i, a, o, s;
            for (a = [],
            i = [],
            o = 0,
            s = e.length; o < s; o++)
                n = t[e[o]],
                i.push(a.length),
                n && (a = a.concat(n.encode(r)));
            return i.push(a.length),
            {
                table: a,
                offsets: i
            }
        }
        ,
        e
    }(Re), rr = function() {
        function t(t, e, r, n, i, a) {
            this.raw = t,
            this.numberOfContours = e,
            this.xMin = r,
            this.yMin = n,
            this.xMax = i,
            this.yMax = a,
            this.compound = !1
        }
        return t.prototype.encode = function() {
            return this.raw.data
        }
        ,
        t
    }(), nr = function() {
        function t(t, e, r, n, i) {
            var a, o;
            for (this.raw = t,
            this.xMin = e,
            this.yMin = r,
            this.xMax = n,
            this.yMax = i,
            this.compound = !0,
            this.glyphIDs = [],
            this.glyphOffsets = [],
            a = this.raw; o = a.readShort(),
            this.glyphOffsets.push(a.pos),
            this.glyphIDs.push(a.readUInt16()),
            32 & o; )
                a.pos += 1 & o ? 4 : 2,
                128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2)
        }
        return 1,
        8,
        32,
        64,
        128,
        t.prototype.encode = function() {
            var t, e, r;
            for (e = new Te(tr.call(this.raw.data)),
            t = 0,
            r = this.glyphIDs.length; t < r; ++t)
                e.pos = this.glyphOffsets[t];
            return e.data
        }
        ,
        t
    }(), ir = function(t) {
        function e() {
            return e.__super__.constructor.apply(this, arguments)
        }
        return He(e, t),
        e.prototype.tag = "loca",
        e.prototype.parse = function(t) {
            var e, r;
            return t.pos = this.offset,
            e = this.file.head.indexToLocFormat,
            this.offsets = 0 === e ? function() {
                var e, n;
                for (n = [],
                r = 0,
                e = this.length; r < e; r += 2)
                    n.push(2 * t.readUInt16());
                return n
            }
            .call(this) : function() {
                var e, n;
                for (n = [],
                r = 0,
                e = this.length; r < e; r += 4)
                    n.push(t.readUInt32());
                return n
            }
            .call(this)
        }
        ,
        e.prototype.indexOf = function(t) {
            return this.offsets[t]
        }
        ,
        e.prototype.lengthOf = function(t) {
            return this.offsets[t + 1] - this.offsets[t]
        }
        ,
        e.prototype.encode = function(t, e) {
            for (var r = new Uint32Array(this.offsets.length), n = 0, i = 0, a = 0; a < r.length; ++a)
                if (r[a] = n,
                i < e.length && e[i] == a) {
                    ++i,
                    r[a] = n;
                    var o = this.offsets[a]
                      , s = this.offsets[a + 1] - o;
                    s > 0 && (n += s)
                }
            for (var c = new Array(4 * r.length), u = 0; u < r.length; ++u)
                c[4 * u + 3] = 255 & r[u],
                c[4 * u + 2] = (65280 & r[u]) >> 8,
                c[4 * u + 1] = (16711680 & r[u]) >> 16,
                c[4 * u] = (4278190080 & r[u]) >> 24;
            return c
        }
        ,
        e
    }(Re), ar = function() {
        function t(t) {
            this.font = t,
            this.subset = {},
            this.unicodes = {},
            this.next = 33
        }
        return t.prototype.generateCmap = function() {
            var t, e, r, n, i;
            for (e in n = this.font.cmap.tables[0].codeMap,
            t = {},
            i = this.subset)
                r = i[e],
                t[e] = n[r];
            return t
        }
        ,
        t.prototype.glyphsFor = function(t) {
            var e, r, n, i, a, o, s;
            for (n = {},
            a = 0,
            o = t.length; a < o; a++)
                n[i = t[a]] = this.font.glyf.glyphFor(i);
            for (i in e = [],
            n)
                (null != (r = n[i]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);
            if (e.length > 0)
                for (i in s = this.glyphsFor(e))
                    r = s[i],
                    n[i] = r;
            return n
        }
        ,
        t.prototype.encode = function(t, e) {
            var r, n, i, a, o, s, c, u, l, h, f, d, p, g, m;
            for (n in r = Ge.encode(this.generateCmap(), "unicode"),
            a = this.glyphsFor(t),
            f = {
                0: 0
            },
            m = r.charMap)
                f[(s = m[n]).old] = s.new;
            for (d in h = r.maxGlyphID,
            a)
                d in f || (f[d] = h++);
            return u = function(t) {
                var e, r;
                for (e in r = {},
                t)
                    r[t[e]] = e;
                return r
            }(f),
            l = Object.keys(u).sort((function(t, e) {
                return t - e
            }
            )),
            p = function() {
                var t, e, r;
                for (r = [],
                t = 0,
                e = l.length; t < e; t++)
                    o = l[t],
                    r.push(u[o]);
                return r
            }(),
            i = this.font.glyf.encode(a, p, f),
            c = this.font.loca.encode(i.offsets, p),
            g = {
                cmap: this.font.cmap.raw(),
                glyf: i.table,
                loca: c,
                hmtx: this.font.hmtx.raw(),
                hhea: this.font.hhea.raw(),
                maxp: this.font.maxp.raw(),
                post: this.font.post.raw(),
                name: this.font.name.raw(),
                head: this.font.head.encode(e)
            },
            this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()),
            this.font.directory.encode(g)
        }
        ,
        t
    }();
    M.API.PDFObject = function() {
        var t;
        function e() {}
        return t = function(t, e) {
            return (Array(e + 1).join("0") + t).slice(-e)
        }
        ,
        e.convert = function(r) {
            var n, i, a, o;
            if (Array.isArray(r))
                return "[" + function() {
                    var t, i, a;
                    for (a = [],
                    t = 0,
                    i = r.length; t < i; t++)
                        n = r[t],
                        a.push(e.convert(n));
                    return a
                }().join(" ") + "]";
            if ("string" == typeof r)
                return "/" + r;
            if (null != r ? r.isString : void 0)
                return "(" + r + ")";
            if (r instanceof Date)
                return "(D:" + t(r.getUTCFullYear(), 4) + t(r.getUTCMonth(), 2) + t(r.getUTCDate(), 2) + t(r.getUTCHours(), 2) + t(r.getUTCMinutes(), 2) + t(r.getUTCSeconds(), 2) + "Z)";
            if ("[object Object]" === {}.toString.call(r)) {
                for (i in a = ["<<"],
                r)
                    o = r[i],
                    a.push("/" + i + " " + e.convert(o));
                return a.push(">>"),
                a.join("\n")
            }
            return "" + r
        }
        ,
        e
    }(),
    t.AcroForm = xt,
    t.AcroFormAppearance = Lt,
    t.AcroFormButton = gt,
    t.AcroFormCheckBox = yt,
    t.AcroFormChoiceField = ht,
    t.AcroFormComboBox = dt,
    t.AcroFormEditBox = pt,
    t.AcroFormListBox = ft,
    t.AcroFormPasswordField = Nt,
    t.AcroFormPushButton = mt,
    t.AcroFormRadioButton = vt,
    t.AcroFormTextField = wt,
    t.GState = C,
    t.ShadingPattern = O,
    t.TilingPattern = B,
    t.default = M,
    t.jsPDF = M,
    Object.defineProperty(t, "__esModule", {
        value: !0
    })
}
));
//# sourceMappingURL=jspdf.umd.min.js.map













